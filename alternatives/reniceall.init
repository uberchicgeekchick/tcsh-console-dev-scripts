#!/bin/tcsh -f
	onintr exit_script;
	if(! ${?TCSH_ALTERNATIVES_PATH} ) \
		setenv TCSH_ALTERNATIVES_PATH \$"{TCSH_RC_SESSION_PATH}/../alternatives";

	set scripts_basename="reniceall.init";
	set scripts_alias="`printf "\""%s"\"" "\""${scripts_basename}"\"" | sed -r 's/(.*)\.(tcsh|cshrc|init)"\$"/\1/'`";
	
	if( ${?script} ) \
		unset script;
	if( ${?scripts_exec} ) \
		unset scripts_exec;
	
	set dependencies=("${scripts_basename}.init" "renice" );
	@ dependencies_index=0;
	
	while( $dependencies_index < ${#dependencies} )
		@ dependencies_index++;
		set dependency=$dependencies[$dependencies_index];
		if( ${?debug} ) \
			printf "\n**%s debug:** looking for dependency: %s; "\$"dependencies[%d].\n\n" "${scripts_basename}" "${dependency}" $dependencies_index > ${stdout};
		
		foreach exec("`where "\""${dependency}"\""`")
			if(! -x "${exec}" ) then
				unset exec;
				continue;
			endif
			
			if( ${?debug} ) \
				printf "\n**%s debug:** looking for dependency: %s, "\$"dependencies[%d], against: %s.\n\n" "${scripts_basename}" "${dependency}" $dependencies_index "${exec}" > ${stdout};
			switch("${exec}")
				case "${scripts_basename}":
				case "${TCSH_ALTERNATIVES_PATH}/${scripts_basename}":
					if( ${?script} ) \
						breaksw;
						
					set old_owd="${cwd}";
					cd "`dirname '${exec}'`";
					set scripts_path="${cwd}";
					cd "${owd}";
					set owd="${old_owd}";
					unset old_owd;
					set script="${scripts_path}/${scripts_basename}";
					breaksw;
				
				case "/bin/${dependency}":
				case "/usr/bin/${dependency}":
				case "/usr/share/bin/${dependency}":
				case "/usr/local/bin/${dependency}":
					switch( "${dependency}" )
						case "renice":
							if(! ${?scripts_exec} ) \
								set scripts_exec="${exec}";
							breaksw;
					endsw
					breaksw;
				
				default:
					breaksw;
			endsw
			unset exec;
		end
	end
	
	if(! ${?scripts_exec} ) \
		goto missing_dependency;
	
	if(! -x "${scripts_exec}" ) \
		goto missing_dependency;
		
	unset dependency dependencies;
#goto ependencies_check;

if(! ${?0} ) then
	alias "${scripts_alias}"	\$"{TCSH_ALTERNATIVES_PATH}/${scripts_basename}";
	complete "${scripts_alias}" 'p/1/(-19 -18 -17 -16 -15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 +1 +2 +3 +4 +5 +6 +7 +8 +9 +10 +11 +12 +13 +14 +15 +16 +17 +18 +19 +20)/' 'p/2-/c/'
	set status=-1;
	unset scripts_ext scripts_basename dependency dependencies;
	goto main_quit;
endif

main:
	set status=0;
	
	goto parse_argv; #exits via calling main_quit || reniceall.
#main

reniceall:
	if(!( ${?priority} && ${?programs_to_renice} )) \
		goto usage;
	
	set status=0;
	if( $uid != 0 && `printf "${priority}" | sed -r 's/^(.).*$/\1/'` == "-" ) \
		set scripts_exec="sudo ${scripts_exec}";
	foreach program_to_renice(${programs_to_renice})
		if( "${program_to_renice}" == "" ) \
			continue;
		
		if( ${?debug} ) then
			printf "Looking for all PIDs belonging to %s\n" "${program_to_renice}";
			echo "/bin/ps -A -c -F | /bin/grep --perl-regexp "\""^[0-9]+[\\t ]+([0-9]+).*[0-9]{2}:[0-9]{2}:[0-9]{2} [^ ]*$program_to_renice"\"" | sed -r 's/^[0-9]+[ ]+([0-9]+).*[\\r\\n]*/\\1/'";
		endif
		foreach pid( `/bin/ps -A -c -F | /bin/grep --perl-regexp "^[0-9]+[\t ]+([0-9]+).*[0-9]{2}:[0-9]{2}:[0-9]{2} [^ ]*$program_to_renice" | sed -r 's/^[0-9]+[ ]+([0-9]+).*[\r\n]*/\1/'` )
			if( "${pid}" == "" ) \
				continue;
			
			printf "Renicing %s(pid: %s) to %s.\n" "${program_to_renice}" "${pid}" "${priority}";
			if( ${?debug} ) \
				printf "%s %s %s\n" "${scripts_exec}" "${priority}" "${pid}";
			echo ${scripts_exec} ${priority} ${pid};
			${scripts_exec} ${priority} ${pid};
		end
	end
	goto main_quit;
#reniceall


exit_script:
	onintr main_quit;
	goto main_quit;
#goto main_quit;



main_quit:
	if( ${?debug} ) \
		unset debug;
	if( ${?dependencies_index} ) \
		unset dependencies_index;
	if( ${?option} ) \
		unset option;
	if( ${?pid} ) \
		unset pid;
	if( ${?priority} ) \
		unset priority;
	if( ${?programs_to_renice} ) \
		unset programs_to_renice;
	if( ${?program_to_renice} ) \
		unset program_to_renice;
	if( ${?script} ) \
		unset script;
	if( ${?scripts_alias} ) \
		unset scripts_alias;
	if( ${?scripts_exec} ) \
		unset scripts_exec;
	if( ${?scripts_path} ) \
		unset scripts_path;
	if( ${?value} ) \
		unset value;
	if( ${?dependencies} )\
		unset dependencies;
	if( ${?dependency} ) \
		unset dependency;
	if( ${?scripts_exec} ) \
		unset scripts_exec;
	if( ${?scripts_basename} ) \
		unset scripts_basename;
	exit ${status};
#main_quit

usage:
	printf "%s priority program_to_renice..." "${scripts_basename}";
	goto main_quit;
#usage:

missing_dependency:
	printf "One or more required dependencies couldn't be found.\n\n[%s] couldn't be found.\n\n%s requires: %s" "${dependency}" "${scripts_basename}" "${dependencies}";
	set status=-1;
	goto main_quit;
#missing_dependency:

parse_argv:
	while( "${1}" != "" )
		set option="`echo '${1}' | sed -r 's/[\-]{1,2}([^=]+)=?(.*)"\$"/\1/'`";
		set value="`echo '${1}' | sed -r 's/[\-]{1,2}([^=]+)=?(.*)"\$"/\2/'`";
		
		switch( "${option}" )
			case "help":
				goto usage;
				breaksw;
			
			case "debug":
				set debug;
				breaksw;
			
			default:
				if( `echo "${1}" | sed -r 's/^[\+\-]?[0-9]+$//'` == "" ) then
					set priority="${1}";
					echo "New priority will be: '${priority}'\n";
					breaksw;
				endif
				
				if(! ${?programs_to_renice} ) then
					set programs_to_renice=( "${1}" );
				else
					set programs_to_renice=( ${programs_to_renice} "${1}" );
				endif
				breaksw;
		endsw
		shift;
	end
	goto reniceall;
#parse_argv

