#!/usr/bin/perl

# Copyright (C) 2009  Xyne
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# METADATA
# Version: 1.1

use strict;
use warnings;

use Image::Magick;

# Constants

my @color_int_values = qw/0 95 135 175 215 255/; # determined by direct measurement in urxvt-256color
my @color_hex_values = map {sprintf("%02X", $_)} @color_int_values;
my @greyscale_int_values = (); # same as above
my $n = 8;
while($n < 240)
{
  push(@greyscale_int_values,$n);
  $n += 10;
}
my @greyscale_hex_values = map {sprintf("%02X", $_)} @greyscale_int_values;





sub term2hex
{
  my $arg = $_[0];
  if ($arg > 15 and $arg < 232)
  {
    $arg -= 16;
    my $b = $arg % 6;
    my $g = int($arg/6) % 6;
    my $r = int($arg/36) % 6;
    ($r,$g,$b) = map {$color_hex_values[$_]} ($r,$g,$b);
    return '#' . join('',$r,$g,$b);
  }
  elsif ($arg > 231 and $arg < 256)
  {
    $arg -= 232;
    return '#' . ($greyscale_hex_values[$arg] x 3);
  }
  return '#000000'
}





sub rgb2term
{
  my ($r,$g,$b) = map {255 * $_} @_;
  my ($cr,$cg,$cb) = map {&get_closest_color($_)} ($r,$g,$b);
  my ($gr,$gg,$gb) = map {&get_closest_greyscale($_)} ($r,$g,$b);

  my @vectors = ([$cr,$cg,$cb],[($gr) x 3], [($gg) x 3], [($gb) x 3]);

  my $shortest = 0x1000000;
  my $closest = 0;
  for(my $i=0; $i<scalar(@vectors); $i++)
  {
    my ($vr,$vg,$vb) = @{ $vectors[$i] };
    my $d = &get_vector_distance_squared($r,$g,$b,$vr,$vg,$vb);
    if ($d < $shortest)
    {
      $closest = $i;
      $shortest = $d;
    }
  }
  ($r,$g,$b) = @{ $vectors[$closest] };
  if ($closest == 0)
  {
    ($r,$g,$b) = map {&get_index($_,@color_int_values)} ($r,$g,$b);
    return 16 + $b + 6*$g + 36*$r;
  }
  else
  {
    my $color;
    if ($r == 0) {$color = 16;}
    elsif ($r == 255) {$color = 231;}
    else {$color = &get_index($r,@greyscale_int_values) + 232}
    return $color;
  }
}




sub get_closest_color
{
  return &get_closest(@_,@color_int_values);
}




sub get_closest_greyscale
{
  return &get_closest(@_,@greyscale_int_values);
}




sub get_closest
{
  my ($arg,@int_values) = @_;
  my $closest = 0;
  my $shortest = 256;
  foreach my $val (@int_values)
  {
    my $d = abs($arg - $val);
    if ($d < $shortest)
    {
      $closest = $val;
      $shortest = $d;
    }
  }
  return $closest;
}



sub get_index
{
  my $arg = shift;
  return (grep {$arg eq $_[$_]} (0..scalar(@_)-1))[0];
}

sub get_vector_distance_squared
{
  my ($a,$b,$c,$u,$v,$w) = @_;
  return ($a-$u)**2 + ($b-$v)**2 + ($c-$w)**2;
}

sub print_pixel
{
  my $color = &rgb2term(@_);
  print "\x1b[0;48;5;${color}m ";
}




my %options = (
  '-w' => undef,
  '-h' => undef,
  '-r' => undef,
  '-p' => 0
);

my @switches = qw/-p/;



sub display_help
{
  print <<'HELP';
USAGE
  tiv [options] [paths]

OPTIONS
  -w <int>
    Set the maximum output width. This should not exceed the current number of
    columns. To get the maximum width, use "-w $COLUMNS" if your terminal sets
    this variable, or "-w `tput cols`" if you have tput installed, otherwise
    guess. If not given, tiv will try to use tput to get the columns, otherwise
    it will default to 80.
    
  -h <int>
    Set the maximum output height. To maximize the image while keeping all of it
    on the screen, use with "-h $LINES" or "-h `tput lines`". Leave this blank
    to maximize by width and allow the image to scroll.
  
  -r <float>
    The aspect ratio of the output. Each "pixel" is the width of a space and the
    height of a line, which will depend on your font settings. The ratio should
    be given as <font width>/<font height>, e.g. 0.5.
  
  -p
    Pause after displaying the image to prevent the prompt from pushing it up.
    Press enter to continue.

  --help
    Display this message and exit.

HELP
exit(1);
}


my @fpaths = ();
while (@ARGV)
{
  my $arg = shift @ARGV;
  if (grep {$arg eq $_} @switches)
  {
    $options{$arg} = 1;
  }
  elsif (exists($options{$arg}))
  {
    $options{$arg} = shift @ARGV;
  }
  elsif ($arg eq '--help')
  {
    &display_help();
  }
  elsif (substr($arg,0,1) ne '-')
  {
    push(@fpaths,$arg);
  }
}


sub get_term_width
{
  if (-x '/bin/tput')
  {
    my $cols = `/bin/tput cols`;
    chomp  $cols;
    return $cols;
  }
  else
  {
    return 80;
  }
}


my $c = $options{'-w'};
if (not $c)
{
  $c = &get_term_width();
}
my $l = $options{'-h'};
my $ratio = $options{'-r'};
my $pause = $options{'-p'};

&display_help() if not (@fpaths and $c);

foreach my $fpath (@fpaths)
{
  my $image = Image::Magick->new();
  $image->Read($fpath);
  my $w;
  my $h;
  if (defined($ratio))
  {
    $w = $image->Get('width');
    $h = $image->Get('height');
  
    $l = int($c * $h / $w) if not defined($l);
  
    if ($ratio < 1) { $w /= $ratio; }
    else { $h *= $ratio; }
    my $f1 = $l/$h;
    my $f2 = $c/$w;
    my $f = ($f1 > $f2) ? $f2 : $f1;
    $w = int($f*$w);
    $h = int($f*$h);
    $image->Scale('width'=>$w, 'height'=>$h);
  }
  else
  {
    # If the number of rows have been specified, scale to fit within limits...
    if (defined($l))
      { $image->Scale('width'=>$c, 'height'=>$l); }
    # else scale to width and allow height to fill scrollback.
    else
      { $image->Resize('geometry'=>$c.'x'); }
  }
  $w = $image->Get('width');
  $h = $image->Get('height');
  for (my $y=1;$y<=$h;$y++)
  {
    for (my $x=1;$x<=$w;$x++)
    {
      my @rgb = $image->GetPixel('x'=>$x, 'y'=>$y, 'channel'=>'RGB');
      &print_pixel(@rgb);
    }
    print "\x1b[0;49;m";
    print "\n" if $y < $h;
  }
  if ($pause) {<STDIN>}
  else {print "\n";}
}

