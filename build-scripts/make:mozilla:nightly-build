#!/bin/tcsh -f
set mozilla_dir="/programs/Mozilla";
set tarball_backup_dir="/uberChick/Downloads/Mozilla/Nightly-Builds";
set prefix="/programs/Mozilla";

if ( "${?1}" == "0" || "${1}" == "" || "${1}" == "--help" ) then
	printf "Usage: %s (firefox|thunderbird)\n\tchecks out the latest source code for the mozilla project, builds it, makes its package(tarball), and back-ups the built tarball using the build day.\n" `basename "${0}"`;
	exit -1;
endif



init:
cd "${mozilla_dir}";

if ( "${?GREP_OPTIONS}" == "1" ) unsetenv GREP_OPTIONS;
unalias grep;
unalias egrep;

if ( ! -d "src" ) mkdir "src";
cd src;



configure:
switch ( "${1}" )
case "thunderbird":
	set build_mozilla="thunderbird";
	set mercurial_repo="comm-central";
	set enable_mozilla="--enable-application=mail --enable-calendar --enable-static";
	set prefix="${prefix}/Thunderbird3";
	breaksw
case "xulrunner":
	set build_mozilla="xulrunner";
	set mercurial_repo="mozilla-central";
	set enable_mozilla="--enable-application=xulrunner --enable-libxul";
	set prefix="${prefix}/XULRunner-1.9.1";
	breaksw
case "firefox":
default:
	set build_mozilla="firefox";
	set mercurial_repo="mozilla-central";
	set enable_mozilla="--enable-application=browser --enable-libxul";
	set prefix="${prefix}/Firefox3";
	breaksw
endsw
set topdir="${mozilla_dir}/src";
if ( ! -d "${topdir}" ) mkdir -p "${topdir}";
set srcdir="${topdir}/${build_mozilla}-src";
if ( ! -d "${srcdir}" ) mkdir "${srcdir}";
set objdir="${topdir}/${build_mozilla}-objdir";
if ( ! -d "${objdir}" ) mkdir "${objdir}";

if ( "${?2}" == "1" && "${2}" == "set-default" ) goto make_default


checkout:
if ( ! -d "${srcdir}/.hg" ) hg clone "http://hg.mozilla.org/${mercurial_repo}/" "${srcdir}";
cd "${srcdir}";
hg pull -u;



mozconfig:
cd "${srcdir}";
printf "ac_add_options ${enable_mozilla} --enable-installer --enable-default-toolkit=cairo-gtk2 --enable-optimize=-O3 --disable-updater --disable-pedantic --disable-tests --disable-mochitest --disable-shared\nmk_add_options MOZ_OBJDIR=@TOPSRCDIR@/../${build_mozilla}-objdir\nmk_add_options AUTOCONF=autoconf-2.13\n" >! ".mozconfig"



make:
cd "${srcdir}";
if ( "${build_mozilla}" == "thunderbird" ) python client.py checkout;
make -f client.mk build;
if ( ${status} != "0" ) then
	printf "\n\n********************* FATAL ERROR ************************\n\t\t\tmake faild with error %d\n\n" ${#status};
	exit ${#status};
endif



make_tarball:
cd "${objdir}";
make package;



backup:
cd "${objdir}";
set today=`date '+%Y-%m-%d'`;
if ( "${build_mozilla}" == "thunderbird" ) cd mozilla;
foreach tarball ( dist/*.tar.bz2 )
	set todays_tarball="`basename ${tarball} | sed 's/\(.*\)\(\.tar\.bz2\)/\1\.${today}\2/g'`";
	mv ${tarball} "${tarball_backup_dir}/${todays_tarball}";
end



install:
cd "${objdir}";
if ( "${build_mozilla}" == "thunderbird" ) cd mozilla;
tar -C "${prefix}" -xjf dist/${build_mozilla}-*.tar.bz2;



install_plugins:
if ( "${build_mozilla}" == "firefox" ) then
	cd "${prefix}/${build_mozilla}";
	rm -r searchplugins plugins;
	ln -s ../searchplugins .;
	ln -s ../plugins .;
	cd ..;
endif



prepare_first_run:
goto make_default
goto stop_build

run:
${prefix}/${build_mozilla}/${build_mozilla} &


exit_check:
if ( "${?2}" == "1" && "${2}" == "as-default" ) goto make_default
exit



make_default:
set second_run
goto stop_build
install_default:
rm -rf "${prefix}/x86_64";
mv "${prefix}/${build_mozilla}" "${prefix}/x86_64";
${prefix}/x86_64/${build_mozilla} &

exit


stop_build:
foreach program ( ( "${build_mozilla}-bin" "${build_mozilla}" ) )
	foreach pid ( `pidof -x "${program}"` )
		set still_running = ( "\n" );
		while ( "${#still_running}" < 10 )
			kill -QUIT "${pid}";
			sleep 2;
			foreach test ( `pidof -x "${program}"` )
				if ( "${pid}" == "${test}" ) set still_running = ( ${still_running} "\n" );
			end
		end
		kill -9 "${pid}"
	end
end
if ( "${?second_run}" == "0" ) goto run

goto install_default


