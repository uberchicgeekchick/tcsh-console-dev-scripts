#!/bin/tcsh -f
setenv	CFLAGS		"-std=gnu99 -O3 -L/lib64 -L/usr/lib64 -L/usr/lib -L/lib -I/usr/include"
setenv	CXXFLAGS	"-std=gnu++0x -O3 -L/lib64 -L/usr/lib64 -L/usr/lib -L/lib -I/usr/include"
setenv	MAKEFLAGS	"-O3"

if( ${?http_proxy}  ) unsetenv http_proxy

set mozilla_src_dir="/programs/src/mozilla";
set tarball_backup_dir="/uberChick/Downloads/Mozilla/Nightly-Builds";
set prefix="/programs/Mozilla";

if ( ! ${?1} || "${1}" == "" || "${1}" == "--help" ) then
	printf "Usage: %s (firefox|thunderbird)\n\tchecks out the latest source code for the mozilla project, builds it, makes its package(tarball), and back-ups the built tarball using the build day.\n" `basename "${0}"`;
	exit -1;
endif



init:
cd "${mozilla_src_dir}";

if ( ${?GREP_OPTIONS} ) unsetenv GREP_OPTIONS;
unalias grep;
unalias egrep;


configure:
switch ( "${1}" )
case "thunderbird":
	set build_mozilla="thunderbird";
	set mercurial_repo="comm-central";
	set enable_mozilla="--enable-application=mail --enable-calendar --enable-static";
	set prefix="${prefix}/Thunderbird3";
	breaksw
case "xulrunner":
	set build_mozilla="xulrunner";
	set mercurial_repo="mozilla-central";
	set enable_mozilla="--enable-application=xulrunner --enable-libxul";
	set prefix="${prefix}/XULRunner-1.9.1";
	breaksw
case "firefox":
default:
	set build_mozilla="firefox";
	set mercurial_repo="mozilla-central";
	set enable_mozilla="--enable-application=browser --enable-libxul";
	set prefix="${prefix}/Firefox3";
	breaksw
endsw
set topdir="${mozilla_src_dir}/src";
if ( ! -d "${topdir}" ) mkdir -p "${topdir}";
set srcdir="${topdir}/${build_mozilla}-src";
set objdir="${topdir}/${build_mozilla}-objdir";

if ( ${?2} && "${2}" == "set-default" ) goto make_default


checkout:
if ( !( -d "${srcdir}" && -d "${srcdir}/.hg" ) ) then
	cd "${topdir}";
	printf "Checking out: %s\n" ${mercurial_repo}
	hg clone "http://hg.mozilla.org/${mercurial_repo}" "${srcdir}";
	cd "${srcdir}";
else
	cd "${srcdir}";
	hg pull -u;
endif



mozconfig:
cd "${srcdir}";
printf "ac_add_options ${enable_mozilla} --enable-installer --enable-default-toolkit=cairo-gtk2 --enable-optimize=-O3 --disable-freetypetest --disable-updater --disable-pedantic --disable-tests --disable-mochitest --disable-shared\nmk_add_options MOZ_OBJDIR=${objdir}\nmk_add_options AUTOCONF=autoconf-2.13\n" >! ".mozconfig"



make:
cd "${srcdir}";
if ( "${build_mozilla}" == "thunderbird" ) then
	python client.py --skip-comm checkout;
	if ( ${status} != "0" ) then
		printf "\n\n********************* FATAL ERROR ************************\n\t\t\tmake failed with error %s\n\n" ${status};
		exit ${status};
	endif
endif
make -f client.mk build;
if ( ${status} != "0" ) then
	printf "\n\n********************* FATAL ERROR ************************\n\t\t\tmake failed with error %s\n\n" ${status};
	exit ${status};
endif



make_tarball:
cd "${objdir}";
make package;



backup:
cd "${objdir}";
set today=`date '+%Y-%m-%d'`;
if ( "${build_mozilla}" == "thunderbird" ) cd mozilla;
pwd
foreach tarball ( dist/*.tar.bz2 )
	set backup_tarball="`basename ${tarball} | sed 's/\(.*\)\(\.tar\.bz2\)/\1\.${today}\2/g'`";
	cp ${tarball} "${tarball_backup_dir}/${backup_tarball}";
	if( ${status} != "0" ) then
		printf "\n\n********************* WARNING: BACKUP ************************\n\t\t\ttarball back-up failed; error: %s\n\n" ${status};
		continue;
	endif
	
	rm ${tarball_backup_dir}/${build_mozilla}-.*.tar.bz2;
	cp ${tarball} "${tarball_backup_dir}/${backup_tarball}";
	#set tarball="${tarball_backup_dir}/${backup_tarball}";
end



install:
cd "${objdir}";
tar -C "${prefix}" -xjf "${tarball}";



install_plugins:
if ( "${build_mozilla}" != "firefox" ) goto prepare_first_run

cd "${prefix}/${build_mozilla}";
rm -r searchplugins plugins;
ln -s ../searchplugins .;
ln -s ../plugins .;
cd ..;



prepare_first_run:
goto stop_build


make_default:
set second_run
goto stop_build


exec_install:
${prefix}/x86_64/${build_mozilla} &


exit


test_exec:
if(!(${second_run})) then
	set mozilla_exec="${prefix}/${build_mozilla}/${build_mozilla}";
else
	set mozilla_exec="${prefix}/x86_64/${build_mozilla}";
endif

if(! -e ${mozilla_exec} ) then
	printf "\n\n********************* FATAL ERROR ************************\n\t\t\tInstallation of %s failed\n\t\t\tBinary is not executable: [%s]\n\n" ${build_mozilla} ${mozilla_exec};
	exit -1;
endif

if(!(${second_run})) then
	rm -rf "${prefix}/x86_64";
	mv "${prefix}/${build_mozilla}" "${prefix}/x86_64";
	goto exec_install
endif

goto make_default



stop_build:
if(${?exec_stopped}) goto test_exec

foreach program ( ( "${build_mozilla}-bin" "${build_mozilla}" ) )
	foreach pid ( `pidof -x "${program}"` )
		set still_running = ( "\n" );
		while ( "${#still_running}" < 10 )
			kill -QUIT "${pid}";
			sleep 2;
			foreach test ( `pidof -x "${program}"` )
				if ( "${pid}" == "${test}" ) set still_running = ( ${still_running} "\n" );
			end
		end
		kill -9 "${pid}"
	end
end

set exec_stopped

if(! ${?second_run} ) then
	set second_run;
	goto test_exec
endif

goto exec_install

