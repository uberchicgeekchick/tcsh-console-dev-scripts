#!/bin/tcsh -f
if(! ${?TCSH_RC_SESSION_PATH} ) setenv TCSH_RC_SESSION_PATH "/projects/cli/console.pallet/tcshrc";
source "${TCSH_RC_SESSION_PATH}/../devel/make/compilers.environment";

setenv	CFLAGS		"-std=gnu99 -L/lib64 -L/usr/lib64 -L/usr/lib -L/lib -I/usr/include"
setenv	CXXFLAGS	"-std=gnu++0x -L/lib64 -L/usr/lib64 -L/usr/lib -L/lib -I/usr/include"
#setenv	MAKEFLAGS	"-O3"
if( ${?MAKEFLAGS} ) unsetenv	MAKEFLAGS;

if( ${?http_proxy}  ) unsetenv http_proxy

set mozilla_top_dir="/programs/Mozilla";
set tarball_backup_dir="/uberChick/Downloads/Mozilla/Nightly-Builds";

if( ! ${?1} || "${1}" == "" || "${1}" == "--help" ) then
	printf "Usage: %s (firefox|thunderbird)\n\tchecks out the latest source code for the mozilla project, builds it, makes its package(tarball), and back-ups the built tarball using the build day.\n" `basename "${0}"`;
	exit -1;
endif



init:
cd "${mozilla_top_dir}";

if( ${?GREP_OPTIONS} ) unsetenv GREP_OPTIONS;
unalias grep;
unalias egrep;


configure:
switch ( "${1}" )
case "thunderbird":
	set mozilla_project="mail";
	set build_mozilla="thunderbird";
	set mercurial_repo="comm-central";
	set enable_mozilla="--enable-calendar --enable-static";
	set prefix="${mozilla_top_dir}/Thunderbird3";
	breaksw;

case "xulrunner":
	set mozilla_project="xulrunner";
	set build_mozilla="xulrunner";
	set mercurial_repo="mozilla-central";
	set enable_mozilla="--enable-libxul";
	set prefix="${mozilla_top_dir}/XULRunner-1.9.1";
	breaksw;

case "firefox":
	set mozilla_project="browser";
	set build_mozilla="firefox";
	set mercurial_repo="mozilla-central";
	set enable_mozilla="--enable-libxul";
	set prefix="${mozilla_top_dir}/Firefox3";
	breaksw;

default:
	printf "%s is an unsupport mozilla build target.\n\tSupported build targets are: xulrunner, firefox, or thunderbird.\n" ${1};
	exit -1;
endsw

set topdir="${mozilla_top_dir}/src";
if( ! -d "${topdir}" ) mkdir -p "${topdir}";

set srcdir="${topdir}/${build_mozilla}-src";
if(! -d "${srcdir}" ) mkdir -p "${srcdir}";

set objdir="${topdir}/${build_mozilla}-objdir";
if(! -d "${objdir}" ) mkdir -p "${objdir}";

if( -e "${srcdir}/.make.lock" ) then
	printf "Another instance of %s is using the current source.  Please wait a few seconds than try again." "`basename ${0}`";
	exit -2;
endif

while( ${?2} && "${2}" != "" )
	case "--disable=exec":
		set no_exec;
		breaksw
	case "--make=package-only":
		goto make_package;
		breaksw
	default:
		printf "Unsupported option: %s\nSupported options are:					\
			--disable=exec		Only valid for when building firefox or thunderbird.	\
						It will keep %s from \
						running firefox/thunderbird when make completes.	\
													\
			--make=package-only	%s will only recreate the project's 			\
						tarball based off of a previous build.  No now files	\
						will be checked out or built.				\
			" "${2}" "${0}" "${0}";
		breaksw
	endsw
end

goto make;

checkout:
cd "${srcdir}";
if( !( -d "${srcdir}" && -d "${srcdir}/.hg" ) ) then
	set hg_reaction="checkout";
	printf "Cloning: %s.\n" "${mercurial_repo}";
	hg clone "http://hg.mozilla.org/${mercurial_repo}" "${srcdir}";
else
	set hg_reaction="update";
	printf "Checking out: %s.\n" "${mercurial_repo}";
	if( "${build_mozilla}" == "thunderbird" && -e client.py ) then
		python client.py checkout;
	else
		hg pull -u;
		python client.py --skip-comm checkout;
	endif
endif

if( ${status} != 0 ) goto status_failed;
unset hg_reaction;


make:
cd "${srcdir}";

#if( "${build_mozilla}" != "thunderbird" ) then
	set mozconfig="${srcdir}/.mozconfig"
#else
#	set mozconfig="${srcdir}/.mozconfig.mk";
#endif

setenv MOZCONFIG "${mozconfig}";
printf "mk_add_options MOZ_OBJDIR=${objdir}\nac_add_options --enable-application=${mozilla_project} ${enable_mozilla} --disable-optimize --enable-installer --disable-freetypetest --disable-updater --disable-pedantic --disable-tests --disable-mochitest --disable-shared --enable-cpp-rtti\nmk_add_options MOZ_OBJDIR=${objdir}\nmk_add_options MOZ_CO_PROJECT=${mozilla_project}\n" >! "${mozconfig}";
#" --enable-default-toolkit=gtk2"

make -f client.mk;
if( ${status} != 0 ) goto status_failed;

make_package:
cd "${objdir}";
make package;



backup:
cd "${objdir}";
set today=`date '+%Y-%m-%d'`;
if( "${build_mozilla}" == "thunderbird" ) cd mozilla;
pwd
foreach tarball ( dist/*.tar.bz2 )
	set backup_tarball="`basename ${tarball} | sed 's/\(.*\)\(\.tar\.bz2\)/\1\.${today}\2/g'`";
	cp ${tarball} "${tarball_backup_dir}/${backup_tarball}";
	if( ${status} != "0" ) then
		printf "\n\n********************* WARNING: BACKUP ************************\n\t\t\ttarball back-up failed; error: %s\n\n" ${status};
		continue;
	endif
	
	rm "${tarball_backup_dir}"/${build_mozilla}-*.tar.bz2;
	cp ${tarball} "${tarball_backup_dir}/${backup_tarball}";
	set tarball="${tarball_backup_dir}/${backup_tarball}";
end



install:
cd "${objdir}";
tar -C "${prefix}" -xjf "${tarball}";
if( "${build_mozilla}" == "xulrunner" ) exit 0;



install_plugins:
if( "${build_mozilla}" != "firefox" ) goto prepare_first_run

cd "${prefix}/${build_mozilla}";
rm -r searchplugins plugins;
ln -s ../searchplugins .;
ln -s ../plugins .;
cd ..;



prepare_first_run:
goto stop_build


make_default:
set second_run
goto stop_build


exec_install:
${prefix}/x86_64/${build_mozilla} &


exit


test_exec:
if(!(${second_run})) then
	set mozilla_exec="${prefix}/${build_mozilla}/${build_mozilla}";
else
	set mozilla_exec="${prefix}/x86_64/${build_mozilla}";
endif

if(! -e ${mozilla_exec} ) then
	printf "\n\n********************* FATAL ERROR ************************\n\t\t\tInstallation of %s failed\n\t\t\tBinary is not executable: [%s]\n\n" ${build_mozilla} ${mozilla_exec};
	exit -1;
endif

if(!(${second_run})) then
	rm -rf "${prefix}/x86_64";
	mv "${prefix}/${build_mozilla}" "${prefix}/x86_64";
	goto exec_install
endif

goto make_default



stop_build:
if(${?exec_stopped}) goto test_exec

foreach program ( ( "${build_mozilla}-bin" "${build_mozilla}" ) )
	foreach pid ( `pidof -x "${program}"` )
		set still_running = ( "\n" );
		while ( "${#still_running}" < 10 )
			kill -QUIT "${pid}";
			sleep 2;
			foreach test ( `pidof -x "${program}"` )
				if( "${pid}" == "${test}" ) set still_running = ( ${still_running} "\n" );
			end
		end
		kill -9 "${pid}"
	end
end

set exec_stopped

if(! ${?second_run} ) then
	set second_run;
	goto test_exec
endif

goto exec_install

exit;

status_failed:
	printf "\n\n********************* FATAL ERROR ************************\n\t\t\tmake failed with error %s\n\n" ${status};
	exit ${status};

