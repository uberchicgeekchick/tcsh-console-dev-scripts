#!/bin/tcsh -f
	if(! ${?TCSH_RC_SESSION_PATH} ) \
		setenv TCSH_RC_SESSION_PATH "/projects/cli/console.pallet/tcshrc";

init:
	if( `alias grep` != "" ) \
		unalias grep;
	
	
	if(! ${?TCSH_CANVAS_PATH} ) \
		setenv TCSH_CANVAS_PATH "${TCSH_RC_SESSION_PATH}/../devel/make";
	source "${TCSH_CANVAS_PATH}/canvas.init.tcsh" ${argv};
	
	
	if( "${1}" == "--reset" ) \
		shift;
	
	
	#setenv CPPFLAGS "${INCLUDE_AND_LIB_FLAGS_AND_PATHS} -O3";
	setenv CPPFLAGS "${INCLUDE_AND_LIB_FLAGS_AND_PATHS} -O3 -g3 -ggdb -ffast-math";
	
	#setenv MAKEFLAGS "-Wall -Wextra -Werror -Wformat=2 -Wno-unused-parameter -Wno-parentheses";
	setenv MAKEFLAGS "${INCLUDE_AND_LIB_FLAGS_AND_PATHS} -Wall -Wextra -Wformat=2 -Wno-unused-parameter -Wno-parentheses";
	#if( ${?MAKEFLAGS} ) unsetenv	MAKEFLAGS;
	
	#setenv CFLAGS "-std=gnu99 ${INCLdUDE_AND_LIB_FLAGS_AND_PATHS}";
	setenv CFLAGS "${MAKEFLAGS}";
	
	#setenv CXXFLAGS "-std=gnu++0x ${CPPFLAGS} ${MAKEFLAGS}";
	setenv CXXFLAGS "${MAKEFLAGS}";
	
	if( ${?http_proxy}  ) unsetenv http_proxy;
	
	set mozilla_top_dir="/programs/mozilla";
	set tarball_backup_dir="/uberChick/Downloads/Mozilla/Nightly-Builds";
	
	if( "${cwd}" != "${mozilla_top_dir}" ) \
		cd "${mozilla_top_dir}";
	
	if( ${?GREP_OPTIONS} ) \
		unsetenv GREP_OPTIONS;
	
	unalias grep;
	unalias egrep;
#init:

parse_argv:
	while( "${1}" != "" )
		
		#if( `printf '%s' "${2}" | sed -r 's/^(\-\-).*$/\1/'` != "--" ) \
		#	goto configure;
			
		switch( "${1}" )
			case "-O=0":
			case "-O=none":
			case "--optimize=no":
			case "--non-optimized":
			case "--optimization=none":
				setenv CPPFLAGS "${INCLUDE_AND_LIB_FLAGS_AND_PATHS}";
				breaksw;
			
			case "--disable=exec":
				set no_exec;
				breaksw;
			
			case "--make=package":
				set goto="make_package";
				breaksw;
			
			case "--make":
				set goto="make";
				breaksw;
			
			case "--goto=backup":
			case "--goto=install":
			case "--reinstall":
				set goto="backup";
				breaksw;
			
			case "xulrunner":
			case "firefox":
			case "thunderbird":
				set build_mozilla="${1}";
				breaksw;
			
			case "--help":
			default:
				printf "Usage: %s [options...] (firefox|thunderbird)\n\t%s checks out the latest source code for the mozilla project, builds it, makes its package(tarball), and back-ups the built tarball using the build day.\n" `basename "${0}"` `basename "${0}"`;
				
				if( "${1}" != "" && "${1}" != "--help" ) \
					printf "Unsupported option: %s\n" "${1}";
				
				printf "					\
	Supported options are:							\
		--help			Displays this screen.			\
										\
		-O=0								\
		-O=none								\
		--optimize=no							\
		--non-optimized							\
		--optimization=none	These disable GCC optimization.		\
										\
		--disable=exec		Only valid for when building		\
					firefox or thunderbird and stops	\
					%s from running firefox/thunderbird	\
					after make completes.			\
										\
		--make			Run's %make -f client.mk%s without	\
					checking out the latest source.		\
										\
		--stable							\
										\
		--make=package-only	%s will only recreate the project's 	\
					tarball based off of a previous build.	\
					No new files will be checked out	\
			" "`basename '${0}'`" '`' '`' "`basename '${0}'`";
			exit -1;
			breaksw;
		endsw
		shift;
	end
#parse_argv:


configure:
	switch ( "${build_mozilla}" )
		case "thunderbird":
			set mozilla_project="mail";
			set mercurial_repo="comm-central";
			set enable_mozilla="--enable-calendar --enable-static";
			set prefix="${mozilla_top_dir}/Thunderbird3";
			set prefix="${mozilla_top_dir}/thunderbird";
			breaksw;
		
		case "xulrunner":
			set mozilla_project="xulrunner";
			set mercurial_repo="mozilla-central";
			set enable_mozilla="--enable-libxul";
			set prefix="${mozilla_top_dir}/XULRunner-1.9.1";
			set prefix="${mozilla_top_dir}/xul-runner";
			breaksw;
		
		case "firefox":
			set mozilla_project="browser";
			set mercurial_repo="mozilla-central";
			set enable_mozilla="--enable-libxul";
			set prefix="${mozilla_top_dir}/Firefox3";
			set prefix="${mozilla_top_dir}/firefox";
			breaksw;
	
		default:
			printf "%s is an unsupport mozilla build target.\n\tSupported build targets are: xulrunner, firefox, or thunderbird.\n" ${1};
			exit -1;
			breaksw;
	endsw
#configure:


init_make:
	set topdir="${mozilla_top_dir}/src";
	if( ! -d "${topdir}" ) \
		mkdir -p "${topdir}";
	
	set srcdir="${topdir}/${build_mozilla}-srcdir";
	if(! -d "${srcdir}" ) \
		mkdir -p "${srcdir}";
	
	set objdir="${topdir}/${build_mozilla}-objdir";
	if(! -d "${objdir}" ) \
		mkdir -p "${objdir}";
	
	if( -e "${srcdir}/.make.lock" ) then
		printf "Another instance of %s is using the current source.  Please wait a few seconds than try again." "`basename ${0}`";
		exit -2;
	endif
	
	if( ${?goto} ) then
		printf "Skipping a head to %s's [%s] step.\n" "`basename '${0}'`" "${goto}";
		goto ${goto};
	endif
#init_make:
	

checkout:
	if( !( -d "${srcdir}" && -d "${srcdir}/.hg" ) ) then
		set hg_reaction="checkout";
		printf "Cloning: %s.\n" "${mercurial_repo}";
		hg clone "http://hg.mozilla.org/${mercurial_repo}" "${srcdir}";
	else
		if( "${cwd}" != "${srcdir}" ) \
			cd "${srcdir}";
		set hg_reaction="update";
		printf "Checking out: %s.\n" "${mercurial_repo}";
		hg pull -u;
	endif
	if( "${cwd}" != "${srcdir}" ) \
		cd "${srcdir}";
	if( "${build_mozilla}" == "thunderbird" && -e client.py ) then
		python client.py checkout;
	endif
	
	if( ${status} != 0 ) \
		goto status_failed;
	unset hg_reaction;
#checkout:


make_nss:
	goto make;
	if( "${cwd}" != "${srcdir}" ) \
		cd "${srcdir}";
	
	if( "${MACHTYPE}" == "x86_64" ) then
		setenv	USE_64	1;
		set arch_path="Linux2.6_x86_64_glibc_PTH_64_DBG.OBJ";
	else
		setenv	USE_64	0;
		set arch_path="Linux2.6_x86_glibc_PTH_DBG.OBJ";
	endif
	
	set nsinstall_path="${srcdir}/security/coreconf/nsinstall/${arch_path}";
	set nss_path="${srcdir}/dist/${arch_path}";
	
	if(! -d  "${objdir}/nss/ssl" ) \
		mkdir -p  "${objdir}/nss/ssl";;
	
	if( "${cwd}" != "${srcdir}/security/coreconf/nsinstall" ) \
		cd "${srcdir}/security/coreconf/nsinstall";
	make USE_64=${USE_64};
	make USE_64=${USE_64} install;
	setenv PATH "${PATH}:${cwd}/${${arch_path}}";
	
	if( "${cwd}" != "${srcdir}/security/nss" ) \
		cd "${srcdir}/security/nss";
	make USE_64=${USE_64};
	make USE_64=${USE_64} install;
	
	setenv PATH "${PATH}:${nss_path}/bin";
	
	setenv LD_RUN_PATH "${LD_RUN_PATH}:${nss_path}/lib";
	setenv LD_LIBRARY_PATH "${LD_LIBRARY_PATH}:${nss_path}/lib";
	
	unset arch_path;
	
	#cp "${srcdir}/security/nss/lib/ssl/${arch_path}/"* "${objdir}/nss/ssl";
	
	if( "${cwd}" != "${srcdir}" ) \
		cd "${srcdir}";
	
	if( ${?run_distclean} ) then
		make -f client.mk distclean;
		unset run_distclean;
	endif
#make_nss:


make:
	if( "${cwd}" != "${srcdir}" ) \
		cd "${srcdir}";
	setenv	MOZCONFIG	"${srcdir}/.mozconfig";
	
	printf "Creating: [%s]\n" "${MOZCONFIG}";
	printf "ac_add_options --enable-application=%s %s --enable-optimize --enable-installer --disable-freetypetest --disable-updater --disable-pedantic --disable-tests --disable-mochitest --disable-shared --enable-cpp-rtti\nmk_add_options MOZ_OBJDIR=%s MOZ_CO_PROJECT=%s AUTOCONF=autoconf-2.13\n" >! "${MOZCONFIG}" "${mozilla_project}" "${enable_mozilla}" "${objdir}" "${mozilla_project}";
	#" --enable-default-toolkit=gtk2"
	
	make -f client.mk;
	if( ${status} != 0 ) \
		goto status_failed;
#make:


make_package:
	if( "${cwd}" != "${objdir}" ) \
		cd "${objdir}";
	make package;
#make_package:


backup:
	if( "${cwd}" != "${objdir}" ) \
		cd "${objdir}";
	set today=`date '+%Y-%m-%d'`;
	if( "${build_mozilla}" == "thunderbird" ) cd mozilla;
	foreach tarball ( dist/*.tar.bz2 )
		set backup_tarball="`basename ${tarball} | sed 's/\(.*\)\(\.tar\.bz2\)/\1\.${today}\2/g'`";
		cp ${tarball} "${tarball_backup_dir}/${backup_tarball}";
		if( ${status} != "0" ) then
			printf "\n\n********************* WARNING: BACKUP ************************\n\t\t\ttarball back-up failed; error: %s\n\n" ${status};
			continue;
		endif
		
		#if( ${?mozilla_exec} ) \
		#	rm "${tarball_backup_dir}"/${build_mozilla}-*.tar.bz2;
		rm "${tarball_backup_dir}"/${build_mozilla}-*.tar.bz2;
		cp ${tarball} "${tarball_backup_dir}/${backup_tarball}";
		set tarball="${tarball_backup_dir}/${backup_tarball}";
	end
	#if( ${?mozilla_exec} ) \
	#	goto finish_exec;
#backup:



install:
	if( "${cwd}" != "${objdir}" ) \
		cd "${objdir}";
	printf "Installing %s to %s\n" "${tarball}" "${prefix}";
	tar -C "${prefix}" -xjf "${tarball}";
	if( "${build_mozilla}" == "xulrunner" ) exit 0;
#install:


install_plugins:
	if( "${build_mozilla}" != "firefox" ) \
		goto prepare_first_run;
	
	printf "Installing plug-ins\n";
	if( "${cwd}" != "${prefix}/${build_mozilla}" ) \
		cd "${prefix}/${build_mozilla}";
	rm -r searchplugins plugins;
	ln -s ../searchplugins .;
	ln -s ../plugins .;
	cd ..;
	#goto make_default;
#install_plugins:


prepare_first_run:
	goto stop_build;
#prepare_first_run:


make_default:
	set second_run;
	goto stop_build;
#make_default:


exec_install:
	printf "Running: [%s/x86_64/%s]\n" "${prefix}" "${build_mozilla}";
	${prefix}/x86_64/${build_mozilla} &
	set ff_binaries=("${build_mozilla}-bin" "${build_mozilla}");
	foreach ff_binary( ${ff_binaries} )
		if(! ${?ff_found} ) then
			printf "Looking for running instance of: %s.\n" ${ff_binary};
			foreach ff_pid(`/bin/pidof ${ff_binary}`)
				printf "Found running instance of: %s; pid: %s\n" ${ff_binary} ${ff_pid};
				if( "${ff_pid}" != "" && $ff_pid > 0 ) then
					renice +2 $ff_pid >& /dev/null;
					printf "Found running instance of: %s; pid: %s\n" ${ff_binary} ${ff_pid};
					if(! ${?ff_found} ) \
						set ff_found;
				endif
			end
		endif
	end
#exec_install:


scripts_main_quit:
	exit ${status};
#scripts_main_quit:


test_exec:
	if(! ${?second_run} ) then
		set mozilla_exec="${prefix}/${build_mozilla}/${build_mozilla}";
	else
		set mozilla_exec="${prefix}/x86_64/${build_mozilla}";
	endif
	
	if(! -e ${mozilla_exec} ) then
		printf "\n\n********************* FATAL ERROR ************************\n\t\t\tInstallation of %s failed\n\t\t\tBinary is not executable: [%s]\n\n" ${build_mozilla} ${mozilla_exec};
		exit -1;
	endif
#test_exec:


finish_exec:
	if(! ${?second_run} ) \
		goto make_default;
	
	rm -rf "${prefix}/x86_64";
	mv "${prefix}/${build_mozilla}" "${prefix}/x86_64";
	goto exec_install;
#finish_exec:


stop_build:
	if( ${?exec_stopped} ) then
		set second_run;
		goto test_exec;
	endif
	
	set ff_binaries=("${build_mozilla}-bin" "${build_mozilla}");
	foreach ff_binary( ${ff_binaries} )
		printf "Looking for running instance of: %s.\n" ${ff_binary};
		foreach pid ( `pidof -x "${ff_binary}"` )
			@ still_running=0;
			while ( ${still_running} < 10 )
				printf "Found running instance of: %s; pid: %s; attempt: #%s\n" ${ff_binary} ${pid} ${still_running};
				kill -QUIT "${pid}";
				sleep 2;
				foreach test ( `pidof -x "${ff_binary}"` )
					if( "${pid}" == "${test}" ) then
						@ still_running++;
					else
						@ still_running=10;
						set exec_stopped;
					break;
					endif
				end
			end
			if(! ${?exec_stopped} ) then
				printf "Failed to quit: %s; pid: %s; sending kill -9\n" ${ff_binary} ${pid};
				kill -9 "${pid}";
			else
				unset exec_stopped;
			endif
		end
	end
	
	set exec_stopped
	
	if(! ${?second_run} ) then
		set second_run;
		goto test_exec;
	endif
	
	goto exec_install;
#stop_build:

exit;

status_failed:
	printf "\n\n********************* FATAL ERROR ************************\n\t\t\tmake failed with error %s\n\n" ${status};
	exit ${status};
#status_failed:

