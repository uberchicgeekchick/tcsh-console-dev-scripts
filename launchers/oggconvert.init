#!/bin/tcsh -f
setenv:
	onintr scripts_main_quit;
	
	set scripts_basename="oggconvert";
	set scripts_tmpdir="`mktemp --tmpdir -d tmpdir.for.${scripts_basename}.XXXXXXXXXX`";
	
	set scripts_supported_extensions="ogg|mp3|m4a|wav";
	set escaped_home_dir=`printf ${HOME} | sed -r 's/([\!\$\"])/"\\\1"/g' | sed -r 's/([\[\/])/\\\1/g'`;
	set escaped_starting_cwd=`printf ${cwd} | sed -r 's/([\!\$\"])/"\\\1"/g' | sed -r 's/([\[\/])/\\\1/g'`;
	set supports_being_sourced;
	#set process_each_filename;
	
	goto debug_check;
#goto setenv;


scripts_main_quit:
	onintr scripts_main_quit;
	if( ${?playlist} ) then
		if(! ${?playlists_new_files} ) then
			if( -e "${playlist}.swp" ) \
				rm "${playlist}.swp";
			if( -e "${playlist}.new" ) \
				rm "${playlist}.new";
		else
			playlist:new:save.tcsh --force "${playlist}";
		endif
		unset playlist;
	endif
	
	if( ${?filename} ) \
		unset filename;
	if( ${?original_extension} ) \
		unset original_extension;
	
	if( ${?ogginfo_file} ) then
		if( -e "${ogginfo_file}" ) \
			rm -f "${ogginfo_file}";
		unset ogginfo_file;
	endif
	
	if( ${?dont_re_encode} ) \
		unset dont_re_encode;
	
	if( ${?save_to_filename} ) \
		unset save_to_filename;
	
	if( ${?extension} ) \
		unset extension;
	
	if( ${?filename_list} ) then
		if( -e "${filename_list}") \
			rm "${filename_list}";
		if( -e "${filename_list}.all") \
			rm "${filename_list}.all";
	endif
	
	if( ${?files_processed} ) \
		unset files_processed;
	if( ${?files_coverted} ) \
		unset files_coverted;
	if( ${?files_combined} ) \
		unset files_combined;
	
	if( ${?use_old_owd} ) then
		cd "${owd}";
		set owd="${use_old_owd}";
		unset use_old_owd;
	endif
	
	if( ${?scripts_tmpdir} ) then
		if( -d "${scripts_tmpdir}" ) \
			rm -rf "${scripts_tmpdir}";
		unset scripts_tmpdir;
	endif
	
	if( ${?nodeps} ) \
		unset nodeps;
	if(! ${?errno} ) \
		@ errno=0;
	
	@ status=$errno;
	exit ${status}
#goto scripts_main_quit;


debug_check:
	@ arg=0;
	@ argc=${#argv};
	while( $arg < $argc )
		@ arg++;
		if( -e "$argv[$arg]" ) \
			continue;
		
		if( "$argv[$arg]" == "--" ) then
			if(! ${?process_each_filename} ) \
				set process_each_filename;
			continue;
		endif
		
		if( "$argv[$arg]" == "--!" ) then
			if( ${?process_each_filename} ) \
				unset process_each_filename;
			continue;
		endif
		
		set argument_file="${scripts_tmpdir}/.escaped.argument.$scripts_basename.argv[$arg].`date '+%s'`.arg";
		printf "%s" "$argv[$arg]" >! "${argument_file}";
		ex -X -n --noplugin -s '+s/\v([\"\!\$\`])/\"\\\1\"/g' '+wq!' "${argument_file}";
		set argument="`cat "\""${argument_file}"\""`";
		rm -f "${argument_file}";
		unset argument_file;
		
		set option="`printf "\""%s"\"" "\""${argument}"\"" | sed -r 's/^([\-]{1,2})([^\=]+)(\=)?(.*)"\$"/\2/'`";
		set value="`printf "\""%s"\"" "\""${argument}"\"" | sed -r 's/^([\-]{1,2})([^\=]+)(\=)?(.*)"\$"/\4/'`";
		if( -e "${value}" ) \
			continue;
		
		if( ${?debug} || ${?debug_arguments} ) \
			printf "**${scripts_basename} [debug_check:]**"\$"option: [${option}]; "\$"value: [${value}].\n";
		
		switch("${option}")
			case "nodeps":
				if( ${?nodeps} ) \
					breaksw;
				
				set nodeps;
				breaksw;
			
			case "diagnosis":
			case "diagnostic-mode":
				if( ${?diagnostic_mode} ) \
					breaksw;
				
				printf "**${scripts_basename} debug:**, via "\$"argv[$arg], diagnostic mode:\t[enabled].\n\n";
				set diagnostic_mode;
				if(! ${?debug} ) \
					set debug;
				breaksw;
			
			case "debug":
				switch("${value}")
					case "length":
						if( ${?debug_length} ) \
							breaksw;
						
						printf "**${scripts_basename} notice:**, via "\$"argv[${arg}], length debugging:\t[enabled]\n\n";
						set debug_length;
						breaksw;
					
					case "encoding":
						if( ${?debug_encoding} ) \
							breaksw;
						
						printf "**${scripts_basename} notice:**, via "\$"argv[${arg}], encoding debugging:\t[enabled]\n\n";
						set debug_encoding;
						breaksw;
					
					case "dependencies":
						if( ${?debug_dependencies} ) \
							breaksw;
						
						printf "**${scripts_basename} notice:**, via "\$"argv[${arg}], debugging dependencies:\t[enabled]\n\n";
						set debug_dependencies;
						breaksw;
					
					case "argv":
					case "parse_argv":
					case "arguments":
						if( ${?debug_arguments} ) \
							breaksw;
						
						printf "**${scripts_basename}**, via "\$"argv[${arg}], debugging arguments:\t[enabled].\n\n";
						set debug_arguments;
						breaksw;
					
					case "filelist":
						if( ${?debug_filelist} ) \
							breaksw;
						
						printf "**${scripts_basename}**, via "\$"argv[${arg}], filelist debugging:\t[enabled].\n\n";
						set debug_filelist;
						breaksw;
					
					case "logged":
						if( ${?logging} ) \
							breaksw;
						
						printf "**${scripts_basename}**, via "\$"argv[${arg}], debug logging:\t[enabled].\n\n";
						set debug_logging;
						breaksw;
					
					default:
						if( ${?debug} ) \
							breaksw;
						
						printf "**${scripts_basename} notice:**, via "\$"argv[${arg}], debug mode:\t[enabled]\n\n";
						set debug;
						breaksw;
				endsw
				breaksw;
			
			default:
				continue;
		endsw
	end
#goto debug_check;


check_dependencies:
	set dependencies=("${scripts_basename}" "ffmpeg" "oggenc" "ogginfo" "playlist:new:create.tcsh" "playlist:new:save.tcsh");# `printf ${scripts_basename} | sed -r 's/(.*)\.(tcsh|cshrc)$/\1/'`");
	@ dependencies_index=0;
	foreach dependency(${dependencies})
		@ dependencies_index++;
		
		if( ${?nodeps} && $dependencies_index > 1 ) \
			break;
		
		if( ${?debug} || ${?debug_dependencies} ) \
			printf "\n**${scripts_basename} debug:** looking for dependency: ${dependency}.\n\n"; 
			
		foreach program("`where '${dependency}'`")
			if( -x "${program}" ) \
				break;
			unset program;
		end
		
		if(! ${?program} ) then
			@ errno=-501;
			printf "One or more required dependencies couldn't be found.\n\t[${dependency}] couldn't be found.\n\t${scripts_basename} requires: ${dependencies}\n";
			goto scripts_main_quit;
		endif
		
		if( ${?debug} || ${?debug_dependencies} ) then
			switch( "`printf "\""%d"\"" "\""${dependencies_index}"\"" | sed -r 's/^[0-9]*[^1]?([0-9])"\$"/\1/'`" )
				case "1":
					set suffix="st";
					breaksw;
				
				case "2":
					set suffix="nd";
					breaksw;
				
				case "3":
					set suffix="rd";
					breaksw;
				
				default:
					set suffix="th";
					breaksw;
			endsw
			
			printf "**${scripts_basename} debug:** found ${dependencies_index}${suffix} dependency: ${dependency}.\n";
			unset suffix;
		endif
		
		switch("${dependency}")
			case "${scripts_basename}":
				if( ${?scripts_dirname} ) \
					breaksw;
				
				set old_owd="${cwd}";
				cd "`dirname '${program}'`";
				set scripts_dirname="${cwd}";
				cd "${owd}";
				set owd="${old_owd}";
				unset old_owd;
				set script="${scripts_dirname}/${scripts_basename}";
				breaksw;
			
			case "ffmpeg":
				set ffmpeg="${program}";
				breaksw;
			
			case "oggenc":
				set oggenc="${program}";
				breaksw;
			
			case "ogginfo":
				set ogginfo="${program}";
				breaksw;
			
		endsw
		
		unset program;
	end
	
	unset dependency dependencies dependencies_index;
	
	goto if_sourced;
#goto check_dependencies;


if_sourced:
	if( ${?0} ) \
		goto main;
	
	if( ${?debug} ) \
		printf "Setting up aliases for: oggconvert, oggcombine, and oggtranscode.\n";
	
	alias oggconvert "${script}";
	alias oggtranscode "${script} --transcode";
	alias oggcombine "${script} --combine";
	
	goto scripts_main_quit;
#goto if_sourced;


main:
	alias ex "ex -E -X -n --noplugin";
	
	if( ! ${?debug} && ! ${?debug_encoding} ) then
		set output="/dev/null";
	else
		set output="/dev/stdout";
	endif
	
	@ files_processed=0;
	@ files_coverted=0;
	
	goto parse_argv;
#goto main;


cancel_convert:
	onintr scripts_main_quit;
	
	if(!( ${?save_to_filename} && ${?original_extension} )) then
		sleep 2;
		goto convert_filename_list;
	endif
	
	printf "\t[cancelled]\n";
	
	if( "${original_extension}" != "wav" && -e "${save_to_filename}.wav" ) \
		rm "${save_to_filename}.wav";
	
	if( "${original_extension}" != "ogg" && -e "${save_to_filename}.ogg" ) \
		rm "${save_to_filename}.ogg";
	
	unset save_to_filename original_extension;
	
	sleep 2;
	goto convert_filenames;
#goto cancel_convert;


convert_filename_list:
	if(! ${?filename_list} ) \
		goto usage;
	
	if( ${?length} ) \
		unset length;
	
	onintr cancel_convert;
	
	cat "${filename_list}" | sort | uniq > "${filename_list}.swp";
	mv -f "${filename_list}.swp" "${filename_list}";
	
	set file_count="`wc -l "\""${filename_list}"\"" | sed -r 's/^([0-9]+)(.*)"\$"/\1/'`";
	if(!( ${file_count} > 0 )) then
		printf "\t**Skipping:** ${dashes}${option}${equals}${value} no convertable files were found.\n\n" > /dev/stderr;
		@ errno=-610;
		if(! ${?process_each_filename} ) then
			goto scripts_main_quit;
		else
			goto parse_arg;
		endif
	endif
	
	if(! -e "${filename_list}.all" ) then
		cp "${filename_list}" "${filename_list}.all";
	else
		foreach filename_prev( "`cat "\""${filename_list}.all"\""`")# | sed -r 's/(["\"\$\!\`"])/"\""\\"\\1""\""/g'`" )# | sed -r 's/(["\""])/"\""\\"\"""\""/g' | sed -r 's/["\$"]/"\""\\"\$""\""/g' | sed -r 's/(['\!'])/\\\1/g' | sed -r 's/["\`"]/"\""\\"\`""\""/g'`" )
			@ line=0;
			foreach filename_next( "`cat "\""${filename_list}"\""`")# | sed -r 's/(["\"\$\!\`"])/"\""\\"\\1""\""/g'`" )# | sed -r 's/(["\""])/"\""\\"\"""\""/g' | sed -r 's/["\$"]/"\""\\"\$""\""/g' | sed -r 's/(['\!'])/\\\1/g' | sed -r 's/["\`"]/"\""\\"\`""\""/g'`" )
				@ line++;
				if( "${filename_prev}" == "${filename_next}" ) then
					printf "\t**Skipping:** <file://%s> its already been converted.\n\n" "${filename_next}";
					ex -s "+${line}d" '+wq!' "${filename_list}";
					@ line--;
				endif
				unset filename_next;
			end
			unset line filename_prev;
		end
		set file_count="`wc -l "\""${filename_list}"\"" | sed -r 's/^([0-9]+)(.*)"\$"/\1/'`";
		if(! ${file_count} > 0 ) then	
			if(! ${?process_each_filename} ) then
				goto scripts_main_quit;
			else
				goto parse_arg;
			endif
		endif
		cat "${filename_list}" >> "${filename_list}.all";
		set file_count="`wc -l "\""${filename_list}.all"\"" | sed -r 's/^([0-9]+)(.*)"\$"/\1/'`";
	endif
	
	if( ${?debug} || ${?debug_filelist} ) \
		cat "${filename_list}";
#goto convert_filename_list;

	
convert_filenames:
	onintr cancel_convert;
	
	foreach filename( "`cat "\""${filename_list}"\"" | sed -r 's/(["\"\$\!\`"])/"\""\\"\\1""\""/g'`" )# | sed -r 's/(["\""])/"\""\\"\"""\""/g' | sed -r 's/["\$"]/"\""\\"\$""\""/g' | sed -r 's/(['\!'])/\\\1/g' | sed -r 's/["\`"]/"\""\\"\`""\""/g'`" )
		if( ${?debug} || ${?debug_filelist} ) \
			printf "\tParsing: ${filename}.\n";
		ex -s '+1d' '+wq!' "${filename_list}";
		@ files_processed++;
		set extension="`printf "\""%s"\"" "\""${filename}"\"" | sed -r 's/^(.*)\.([^.]+)"\$"/\2/g'`";
		set original_extension="${extension}";
		set filename="`printf "\""%s"\"" "\""${filename}"\"" | sed -r 's/^(.*)\.([^.]+)"\$"/\1/g'`";# | sed -r 's/(["\"\$\!\`"])/"\""\\"\\1""\""/g'`";# | sed -r 's/["\""]/"\""\\"\"""\""/g' | sed -r 's/["\$"]/"\""\\"\$""\""/g' | sed -r 's/(['\!'])/\\\1/g' | sed -r 's/["\`"]/"\""\\"\`""\""/g'`";
		set save_to_filename="${filename}";
		if( ${?debug} || ${?debug_filelist} ) \
			printf "\tLooking for: ${filename}.${extension}\n";
		
		if(! -e "${filename}.${extension}" ) then
			printf "\t**%s error:** <file://%s.%s> no longer exists\t[skipping]\n\n" "${scripts_basename}" "${filename}" "${extension}" > /dev/stderr;
			continue;
		endif
		
		if( -e "${save_to_filename}.ogg" ) then
			if( ${?dont_re_encode} ) then
				printf "\t**Skipping:** <file://%s.%s> " "${filename}" "${extension}";
				if( "${original_extension}" != "ogg" ) \
					printf ", <file://%s.ogg> already exists, " "${filename}";
				printf "re-encoding is disabled.\n\n";
				continue;
			endif
			
			if( "${original_extension}" == "ogg" && ! ${?force} && ! ${?ltrim} && ! ${?rtrim} ) then
				printf "\t**Skipping:** <file://%s.%s> " "${filename}" "${extension}";
				if( "${original_extension}" != "ogg" ) \
					printf ", <file://%s.ogg> already exists, " "${filename}";
				printf "and no advanced conversion options specified.\n\n";
				continue;
			endif
			
			if(! ${?force} ) \
				goto confirm_overwrite;
		endif
		
		if( "${extension}" != "ogg" || ${?ltrim} ) \
			goto oggconvert;
		
		if( ${?rtrim} ) \
			goto find_length;
		
		printf "\t**Skipping:** <file://${filename}.${extension}>; no advanced conversion options specified.\n\n";
		continue;
	end
	
	rm "${filename_list}";
	
	if( ${?arg} ) then
		goto parse_arg;
	endif
	
	onintr scripts_main_quit;
	
	if( ${?combine} ) then
		if( ${file_count} <= 1 ) then
			printf "--combine reqires at least two input files.\n";
			@ errno=-5;
			goto scripts_main_quit;
		else
			goto init_combine;
		endif
	endif
	
	if( ${?filename} ) \
		unset filename;
	
	if( ${?save_to_filename} ) \
		unset save_to_filename;
	
	if( ${?extension} ) \
		unset extension;
	
	if( ${?original_extension} ) \
		unset original_extension;
	
	goto scripts_main_quit;
#goto convert_filenames;


confirm_overwrite:
	if(! -e "${save_to_filename}.ogg" ) \
		goto oggconvert;
	
	printf "\n\t**Warning:** <file://%s.ogg> already exists.\n\t\tWould you like to re-convert it? [Yes/Always/Skip all/No(default)]" "${save_to_filename}";
	set confirmation="$<";
	printf "\n";
	
	switch(`printf "${confirmation}" | sed -r 's/^(.).*$/\l\1/'`)
		case "a":
			printf "\tNOTE:\n\t\tYou can run "\`"%s --re-encode=force"\`" to skip this prompt in the future.\n\n" "${save_to_filename}" "${scripts_basename}" "${scripts_basename}";
			if(! ${?force} ) \
				set force;
		case "y":
			if( ${?ltrim} || "${original_extension}" != "ogg" ) \
				goto oggconvert;
			if( ${?rtrim} ) \
				goto find_length;
			
			printf "\t**Skipping: <file://${filename}.${extension}>; no advanced conversion options specified.\n\n";
			goto convert_filenames;
			breaksw;
		
		case "s":
			if(! ${?dont_re_encode} ) \
				set dont_re_encode;
		case "n":
		default:
			printf "\t**Skipping:** <file://%s.ogg>;\n\t\tRun "\`"%s --re-encode=force"\`" to over-write existing files\n\t\t\tor\n\t\t"\`"%s --no-re-encode to skip all existing files w/o prompting"\`".\n\n" "${save_to_filename}" "${scripts_basename}" "${scripts_basename}";
			@ errno=-4;
			goto convert_filenames;
			breaksw;
	endsw
#goto confirm_overwrite;


oggconvert:
	printf "\n\tConverting";
	if( ${file_count} > 1 ) \
		printf " (file ${files_processed} of ${file_count})";
	printf ":\n\t\t[${save_to_filename}.${original_extension}]\n";
	
	if( "${extension}" != "wav" ) then
		set ffmpeg_input_file_options="";
		set ffmpeg_output_file_options="";
		
		if( ${?length} ) then
			printf "\n\t\tRemoving: [%s] from the end of:\n\t\t<%s.%s>\n" "${rtrim}" "${save_to_filename}" "${original_extension}";
			set ffmpeg_input_file_options=" -t ${length}";
		else if( ${?ltrim} ) then
			printf "\n\t\tTrimming: [%s] from the begining of:\n\t\t<%s.%s>\n" "${ltrim}" "${save_to_filename}" "${original_extension}";
			set ffmpeg_input_file_options=" -ss ${ltrim}";
		endif
		
		if( "${extension}" == "" && ${?combine} ) then
			set ffmpeg_output_file_options=" -ac 1";#" -ar 44100 -ab 64000";
		else if( "${extension}" == "ogg" ) then
			set ffmpeg_input_file_options="${ffmpeg_input_file_options} -acodec vorbis";
		else# if( "${extension}" != "" ) then
			set ffmpeg_output_file_options=" -ac 1";#" -ab 64000";
		endif
		
		if( "${original_extension}" != "wav" || "${ffmpeg_input_file_options}" != "" ) then
			printf "\t\t\tCreating temporary WAV file.  This may take several moments...";
			
			if( ${?debug} || ${?debug_encoding} ) then
				printf "\n\nRunning:\n\t";
				printf "( ${ffmpeg} -y${ffmpeg_input_file_options} -i "\""${filename}.${extension}"\""${ffmpeg_output_file_options} "\""${save_to_filename}.wav"\"" > ${output} ) >& /dev/stderr";
				printf "\n\n";
			endif
			
			if( ${?combine} && "${filename}" != "${save_to_filename}" ) then
				printf "#\!/bin/tcsh -f\nset echo;\n${ffmpeg} -y${ffmpeg_input_file_options} ${filename}.${extension}${ffmpeg_output_file_options} "\""${save_to_filename}.wav"\""\n" >! "./ffmpeg-combined.tcsh";
				chmod u+x "./ffmpeg-combined.tcsh";
				"./ffmpeg-combined.tcsh";
				#rm "./ffmpeg-combined.tcsh";
				#${ffmpeg} -y${ffmpeg_input_file_options} ${filename}.${extension}${ffmpeg_output_file_options} "${save_to_filename}.wav" >& ${output};
			else
				${ffmpeg} -y${ffmpeg_input_file_options} -i "${filename}.${extension}"${ffmpeg_output_file_options} "${save_to_filename}.wav" >& ${output};
			endif
			
			unset ffmpeg_input_file_options ffmpeg_output_file_options;
			
			if(!( "${status}" == "0" && -e "${save_to_filename}.wav" )) then
				printf "\t[failed]\n\t\t\tUnable to create temorary WAV  file.\n\t\t\tffmpeg returned: ${status}\n";
				if( "${original_extension}" != "wav" && -e "${save_to_filename}.wav" ) \
					rm "${save_to_filename}.wav";
				
				goto convert_filenames;
			endif
			printf "\t\t[success]\n";
		endif
	endif
	
	if( "${extension}" == "" && ${?combine} ) then
		set oggenc_output_file_options=" -q 10";
	else if( "${extension}" == "ogg" ) then
		set oggenc_output_file_options="";#" -q 5";
	else if( "${extension}" != "" ) then
		set oggenc_output_file_options="";#" -q 5";
	endif
		
	printf "\t\t\tEncoding OGG Vorbis file.  Please wait several moments...";
	
	${oggenc} ${oggenc_output_file_options} "${save_to_filename}.wav" >& ${output};
	if(!( "${status}" == "0" && -e "${save_to_filename}.ogg" )) then
		printf "\t[failed]\n\t\t\tUnable to encode file.  Encoder: [`basename ${oggenc}`]; returned: ${status}\n";
		if( "${original_extension}" != "wav" && -e "${save_to_filename}.wav" ) then
			rm "${save_to_filename}.wav";
		else if( "${original_extension}" == "wav" && -e "${save_to_filename}.wav.bck" ) then
			if( -e "${save_to_filename}.wav" ) \
				rm "${save_to_filename}.wav";
			mv -f "${save_to_filename}.wav.bck" "${save_to_filename}.wav";
		else if( "${original_extension}" != "ogg" && -e "${save_to_filename}.ogg" ) then
			rm "${save_to_filename}.ogg";
		endif
		
		goto convert_filenames;
	endif
	
	printf "\t\t[success]\n";
	if( "${original_extension}" != "wav" ) \
		rm "${save_to_filename}.wav";
	
	if( ${?combine} && "${filename}" != "${save_to_filename}" ) \
		goto scripts_main_quit;
	
	if( ${?rtrim} && ! ${?length} ) \
		goto find_length;
	
	if( ${?debug} || ${?debug_length} || ${?debug_encoding} ) then
		${ogginfo} "${save_to_filename}.ogg";
	endif
	
	if( ${?playlist} ) then
		if(! ${?playlists_new_files} ) then
			@ playlists_new_files=1;
		else
			@ playlists_new_files++;
		endif
		
		if( "`printf "\""%s"\"" "\""${save_to_filename}"\"" | sed -r 's/^(.)(.*)"\$"/\1/'`" != "/" ) \
			printf "${cwd}/" >> "${playlist}.new";
		printf "${save_to_filename}.ogg\n" >> "${playlist}.new";
	endif
	
	printf "\t\t\t\t\t\t\t\tOGG Vorbis conversion:\t\t[completed]\n\n";
	
	if( ${?transcode} && "${original_extension}" != "ogg" ) then
		rm ${transcode} "${filename}.${original_extension}";
	endif
	
	@ files_coverted++;
	goto convert_filenames;
#goto oggconvert;


find_length:
	if( ! ${?debug} && ( ${?debug_length} || ${?debug_encoding} ) ) then
		set debug;
		set debug_set;
	endif
	
	if(! ${?add_length} ) then
		set function="minus";
		set modifier="-";
		set reverse_modifier="+";
	else
		set function="add";
		set modifier="+";
		set reverse_modifier="-";
	endif
	
	set ogginfo_file="${scripts_tmpdir}/.escaped.ogginfo.$scripts_basename.argv[$arg].`date '+%s'`.arg";
	printf "%s" "${filename}" >! "${ogginfo_file}";
	ex -s '+s/\v([\"\!\$\`])/\"\\\1\"/g' '+wq!' "${ogginfo_file}";
	set escaped_filename="`cat "\""${ogginfo_file}"\""`";
	rm -f "${ogginfo_file}";
	unset ogginfo_file;
	set filename="`printf "\""%s"\"" "\""${escaped_filename}"\""`";
		
	set rtrim_hours="`printf "\""%s"\"" "\""${rtrim}"\"" | sed -r 's/([0-9]{2}):([0-9]{2}):([0-9]{2})/\1/'`";
	set rtrim_minutes="`printf "\""%s"\"" "\""${rtrim}"\"" | sed -r 's/([0-9]{2}):([0-9]{2}):([0-9]{2})/\2/'`";
	set rtrim_seconds="`printf "\""%s"\"" "\""${rtrim}"\"" | sed -r 's/([0-9]{2}):([0-9]{2}):([0-9]{2})/\3/'`";
	set oggs_length="`${ogginfo} "\""${escaped_filename}.ogg"\"" | /bin/grep --perl-regexp 'Playback length:'`";
	set oggs_hours="`printf "\""%s"\"" "\""${oggs_length}"\"" | sed -r 's/^[^0-9]*([0-9]+)(h:)([0-9]+)(m:)([0-9]+)\..*"\$"/\1/'`";
	if( "${oggs_hours}" == "${oggs_length}" ) \
		set oggs_hours="00";
	set oggs_minutes="`printf "\""%s"\"" "\""${oggs_length}"\"" | sed -r 's/^[^0-9]*([0-9]*)(m:)([0-9]+)\..*"\$"/\1/'`";
	if( "${oggs_minutes}" == "${oggs_length}" ) \
		set oggs_minutes="00";
	set oggs_seconds="`printf "\""%s"\"" "\""${oggs_length}"\"" | sed -r 's/^[^0-9]*([0-9]*)(m:)([0-9]+)\..*"\$"/\3/'`";
	if( "${oggs_seconds}" == "${oggs_length}" ) \
		set oggs_seconds="00";
	
	if( ${?debug} ) then
		printf "${oggs_length}\n";
		printf "\t${oggs_hours}${modifier}${rtrim_hours}\n";
		printf "\t${oggs_minutes}${modifier}${rtrim_minutes}\n";
		printf "\t${oggs_seconds}${modifier}${rtrim_seconds}\n";
	endif
	unset oggs_length;
	
	set hours="`printf "\""${oggs_hours}${modifier}${rtrim_hours}\n"\"" | bc`";
	set minutes="`printf "\""${oggs_minutes}${modifier}${rtrim_minutes}\n"\"" | bc`";
	set seconds="`printf "\""${oggs_seconds}${modifier}${rtrim_seconds}\n"\"" | bc`";
	if( ${?debug} ) then
		printf "After ${function}ing rtrim length from the ogg file's length:\n";
		printf "\thours: ${hours}\n";
		printf "\tminutes: ${minutes}\n";
		printf "\tseconds: ${seconds}\n";
	endif
#goto find_length;


calculate_length:
	if( "${hours}" == "" ) then
		set hours="00";
	endif
	if( "`printf "\""${minutes}"\"" | sed -r 's/^(\-).*/\1/'`" == "-" ) then
		set hours="`printf "\""${hours}${modifier}1\n"\"" | bc`";
		set minutes="`printf "\""(${oggs_minutes}${reverse_modifier}60)${modifier}${rtrim_minutes}\n"\"" | bc`";
	endif
	if( ${minutes} > 60 ) then
		set hours="`printf "\""${hours}+1\n"\"" | bc`";
		set minutes="`printf "\""${minutes}-60\n"\"" | bc`";
	endif
	if( "${minutes}" == "" ) then
		set minutes="00";
	endif
	
	if( "`printf "\""${seconds}"\"" | sed -r 's/^(\-).*/\1/'`" == "-" ) then
		set minutes="`printf "\""${minutes}${modifier}1\n"\"" | bc`";
		set seconds="`printf "\""(${oggs_seconds}${reverse_modifier}60)${modifier}${rtrim_seconds}\n"\"" | bc`";
	endif
	if( ${seconds} > 60 ) then
		set minutes="`printf "\""${minutes}+1\n"\"" | bc`";
		set seconds="`printf "\""${seconds}-60\n"\"" | bc`";
	endif
	if( "${seconds}" == "" ) then
		set seconds="00";
	endif
	if( ${?debug} ) then
		printf "After calculating correct length:\n";
		printf "\thours: ${hours}\n";
		printf "\tminutes: ${minutes}\n";
		printf "\tseconds: ${seconds}\n";
	endif
	
	if( "${hours}" == "" || "`printf "\""${hours}"\"" | sed -r 's/^(\-).*/\1/'`" == "-" ) then
		set hours="00";
	endif
	if( "`printf "\""${hours}"\"" | sed -r 's/^([0-9]{1})[0-9]{0,1}/\1/'`" == "${hours}" ) then
		set hours="0${hours}";
	endif
	if( "`printf "\""${minutes}"\"" | sed -r 's/^([0-9]{1})[0-9]{0,1}/\1/'`" == "${minutes}" ) then
		set minutes="0${minutes}";
	endif
	if( "`printf "\""${seconds}"\"" | sed -r 's/^([0-9]{1})[0-9]{0,1}/\1/'`" == "${seconds}" ) then
		set seconds="0${seconds}";
	endif
	if( ${?debug} ) then
		printf "After checkingfor any needed '0' padding:\n";
		printf "\thours: ${hours}\n";
		printf "\tminutes: ${minutes}\n";
		printf "\tseconds: ${seconds}\n";
	endif
	
	set length="${hours}:${minutes}:${seconds}";
	if( "`printf "\""${length}"\"" | sed -r 's/^[0-9]{2}:[0-9]{2}:[0-9]{2}"\$"//'`" != "" ) then
		printf "Invalid calculated length: %s, lenth must be formatted as: hh:mm:ss\n" "${length}";
		goto convert_filenames;
	endif
	if( ${?debug} ) then
		printf "Calcucated Length: ${length}\n";
		if( "${extension}" == "ogg" ) \
			goto scripts_main_quit;
	endif
	
	unset oggs_hours rtrim_hours oggs_minutes rtrim_minutes oggs_seconds rtrim_seconds hours minutes seconds;
	if( "${extension}" != "ogg" ) \
		set extension="ogg";
	
	if( ${?debug_set} ) \
		unset debug_set debug;
	
	if( "${filename}" == "${save_to_filename}" ) \
		goto oggconvert;
	goto continue_combine;
#goto calculate_length;


init_combine:
	if(! ${?combine} ) \
		goto scripts_main_quit;
	
	@ files_combined=1;
	set extension="";
	set output="/dev/stdout";
	
	set old_owd="${owd}";
	cd "`dirname '${filename}'`";
	set save_to_filename="${cwd}/`basename '${cwd}'` - Combined";
	cd "${owd}";
	set owd="${old_owd}";
	unset old_owd;
	
	set add_length;
#goto init_combine;


continue_combine:
	if( ${?length} ) then
		set itsoffset="${length}";
		unset length;
	endif
	foreach filename ( "`cat '${filename_list}.all'`" )
		set filename="`printf "\""%s"\"" "\""${filename}"\"" | sed -r 's/^(.*)\.([^.]+)"\$"/\1/g'`";
		ex -s '+1d' '+wq' "${filename_list}.all";
		if(! -e "${filename}.ogg" ) \
			continue;
		
		@ files_combined++;
		if(! ${?all_filenames} ) then
			set all_filenames="-acodec vorbis -i "\""${filename}.ogg"\""";
			if( ${?rtrim} ) \
				unset rtrim;
			set rtrim="00:00:00";
			goto find_length;
		else
			set all_filenames="${all_filenames} -acodec vorbis -itsoffset ${itsoffset} -i "\""${filename}.ogg"\""";
			set rtrim="${itsoffset}";
			goto find_length;
		endif
	end
	set filename="${all_filenames}";
	set extension="";
	goto oggconvert;
#goto continue_combine;


usage:
	if(! ${?usage_displayed} ) then
		printf "Usage:\n\t${scripts_basename} [options] filename\n\tPossible options are:\n\t\t[-h|--help]\tDisplays this screen.\n";
		set usage_displayed;
	endif
	if(! ${?no_exit_on_usage} ) then
		@ errno=-1;
		goto scripts_main_quit;
	endif
	
	goto convert_filenames;
#goto usage;


parse_argv:
	if( ${#argv} == 0 ) \
		goto if_sourced;
	@ argc=${#argv};
	@ arg=0;
	
	if( ${?debug} ) \
		printf "Checking ${scripts_basename}'s argv options.  ${argc} total.\n";
#goto parse_argv;


parse_arg:
	while( $arg < $argc )
		if(! ${?arg_shifted} ) then
			@ arg++;
		else
			if( ${?value_used} ) \
				@ arg++;
			unset arg_shifted;
		endif
		
		if( ${?value_used} ) \
			unset value_used;
		
		if( ${?debug} || ${?debug_arguments} ) \
			printf "**%s debug:** Checking argv #%d (%s).\n" "${scripts_basename}" ${arg} "$argv[$arg]";
		
		if( "$argv[$arg]" == "--" ) then
			if(! ${?process_each_filename} ) \
				set process_each_filename;
			continue;
		endif
		
		if( "$argv[$arg]" == "--!" ) then
			if( ${?process_each_filename} ) \
				unset process_each_filename;
			continue;
		endif
		
		set argument_file="${scripts_tmpdir}/.escaped.argument.$scripts_basename.argv[$arg].`date '+%s'`.arg";
		printf "%s" "$argv[$arg]" >! "${argument_file}";
		ex -X -n --noplugin -s '+s/\v([\"\!\$\`])/\"\\\1\"/g' '+wq!' "${argument_file}";
		set argument="`cat "\""${argument_file}"\""`";
		rm -f "${argument_file}";
		unset argument_file;
		
		set dashes="`printf "\""%s"\"" "\""${argument}"\"" | sed -r 's/^([\-]{1,2})([^\=]+)(\=)?(.*)"\$"/\1/'`";
		if( "${dashes}" == "${argument}" ) \
			set dashes="";
		
		set option="`printf "\""%s"\"" "\""${argument}"\"" | sed -r 's/^([\-]{1,2})([^\=]+)(\=)?(.*)"\$"/\2/'`";
		if( "${option}" == "${argument}" ) \
			set option="";
		
		set equals="`printf "\""%s"\"" "\""${argument}"\"" | sed -r 's/^([\-]{1,2})([^\=]+)(\=)?(.*)"\$"/\3/'`";
		if( "${equals}" == "${argument}" ) \
			set equals="";
		
		set value="`printf "\""%s"\"" "\""${argument}"\"" | sed -r 's/^([\-]{1,2})([^\=]+)(\=)?(.*)"\$"/\4/'`";
		
		
		if( ${?debug} || ${?debug_arguments} ) \
			printf "\tparsed "\$"argument: [${argument}]; "\$"argv[${arg}] ($argv[$arg])\n\t"\$"dashes: [${dashes}];\n\t"\$"option: [${option}];\n\t"\$"equals: [${equals}];\n\t"\$"value: [${value}]\n\n";
		
		if( "${option}" != "" && "${equals}" == "" && ( "${value}" == "" || "${value}" == "${argument}" ) ) then
			@ arg++;
			if( ${arg} > ${argc} ) then
				@ arg--;
			else
				if( ${?debug} || ${?debug_arguments} ) \
					printf "**%s debug:** Looking for replacement value.  Checking argv #%d (%s).\n" "${scripts_basename}" ${arg} "$argv[$arg]";
				
				set argument_file="${scripts_tmpdir}/.escaped.argument.$scripts_basename.argv[$arg].`date '+%s'`.arg";
				printf "%s" "$argv[$arg]" >! "${argument_file}";
				ex -X -n --noplugin -s '+s/\v([\"\!\$\`])/\"\\\1\"/g' '+wq!' "${argument_file}";
				set test_argument="`cat "\""${argument_file}"\""`";
				rm -f "${argument_file}";
				unset argument_file;
				
				set test_dashes="`printf "\""%s"\"" "\""${test_argument}"\"" | sed -r 's/^([\-]{1,2})([^\=]+)(\=)?(.*)"\$"/\1/'`";
				if( "${test_dashes}" == "${test_argument}" ) \
					set test_dashes="";
				
				set test_option="`printf "\""%s"\"" "\""${test_argument}"\"" | sed -r 's/^([\-]{1,2})([^\=]+)(\=)?(.*)"\$"/\2/'`";
				if( "${test_option}" == "${test_argument}" ) \
					set test_option="";
				
				set test_equals="`printf "\""%s"\"" "\""${test_argument}"\"" | sed -r 's/^([\-]{1,2})([^\=]+)(\=)?(.*)"\$"/\3/'`";
				if( "${test_equals}" == "${test_argument}" ) \
					set test_equals="";
				
				set test_value="`printf "\""%s"\"" "\""${test_argument}"\"" | sed -r 's/^([\-]{1,2})([^\=]+)(\=)?(.*)"\$"/\4/'`";
				
				if(!( "${test_dashes}" == "" && "${test_option}" == "" && "${test_equals}" == "" && "${test_value}" == "${test_argument}" )) then
					@ arg--;
				else
					if( ${?debug} || ${?debug_arguments} ) \
						printf "\tparsed "\$"argument: [%s]; "\$"argv[%d] (%s)\n\t"\$"dashes: [%s];\n\t"\$"option: [%s];\n\t"\$"equals: [%s];\n\t"\$"value: [%s]\n\n" "${test_argument}" "${arg}" "$argv[$arg]" "${test_dashes}" "${test_option}" "${test_equals}" "${test_value}";
					set equals="=";
					set value="${test_value}";
					set arg_shifted;
				endif
				unset test_argument test_dashes test_option test_equals test_value;
			endif
		endif
		
		@ parsed_argc++;
		if( "${option}" == "${value}" ) \
			set option="";
		set parsed_arg="${dashes}${option}${equals}${value}";
		if(! ${?parsed_argv} ) then
			set parsed_argv="${parsed_arg}";
		else
			set parsed_argv="${parsed_argv} ${parsed_arg}";
		endif
		
		if( ${?debug} || ${?debug_arguments} ) \
			printf "\tparsed option "\$"parsed_argv[%d]: %s\n\n" ${parsed_argc} "${parsed_arg}";
		
		switch("${option}")
			case "no-rtrim":
				if( ${?rtrim} ) \
					unset rtrim;
				breaksw;
				
			case "no-ltrim":
				if( ${?ltrim} ) \
					unset ltrim;
				breaksw;
				
			case "rtrim":
				if( "${value}" == "" ) then
					if( ${?rtrim} ) \
						unset rtrim;
					breaksw;
				endif
				
				if( "`printf "\""${value}"\"" | sed -r 's/^[0-9]{2}:[0-9]{2}:[0-9]{2}"\$"//'`" != "" ) then
					printf "Invalid ${dashes}${option}: ${value} specified, lenth must be formatted as: hh:mm:ss\n" > /dev/stderr;
					@ errno=-601;
					goto scripts_main_quit;
					breaksw;
				endif
				
				set rtrim="${value}";
				set value_used;
				breaksw;
			
			case "ltrim":
				if( "${value}" == "" ) then
					if( ${?ltrim} ) \
						unset ltrim;
					breaksw;
				endif
				
				if( "`printf "\""${value}"\"" | sed -r 's/^[0-9]{2}:[0-9]{2}:[0-9]{2}"\$"//'`" != "" ) then
					printf "Invalid ${dashes}${option}: ${value} specified, lenth must be formatted as: hh:mm:ss\n" > /dev/stderr;
					@ errno=-602;
					goto scripts_main_quit;
					breaksw;
				endif
				
				set ltrim="${value}";
				set value_used;
				breaksw;
			
			case "no-transcode":
				if( ${?transcode} ) \
					unset transcode;
				breaksw;
			
			case "playlist":
				if( "${value}" != "" ) then
					set playlist_type="`printf "\""%s"\"" "\""${value}"\"" | sed -r 's/^(.*)\.([^.]+)"\$"/\2/'`";
				else
					set playlist_type="m3u";
				endif
				
				switch( "${playlist_type}" )
					case "tox":
					case "pls":
					case "m3u":
						breaksw;
					
					default:
						printf "**${scripts_basename} error:** [${value}] is an unsupported playlist with an an unsupported playlist type: [${playlist_type}].\n\nRun: "\`"${scripts_basename} --help"\`" for more information.\n" > /dev/stderr;
						@ errno=-606;
						goto scripts_main_quit;
						breaksw;
				endsw
				
				if( "${value}" != "${playlist_type}" ) then
					set playlist="${value}";
					set value_used;
				else
					set playlist="${scripts_basename}'s ${playlist_type} playlist @ `date '+%c'`.${playlist_type}";
				endif
				
				playlist:new:create.tcsh "${playlist}";
				unset playlist_type;
				set value_used;
				breaksw;
			
			case "transcode":
				switch( "${value}" )
					case "i":
					case "iv":
					case "ivf":
						set transcode="-${value}";
						set value_used;
						breaksw;
					
					case "force":
					case "verbose":
					case "interactive":
						set transcode="--${value}";
						set value_used;
						breaksw;
					
					default:
						set transcode;
						breaksw;
				endsw
				breaksw;
			
			case "force":
				if(! ${?force} ) \
					set force;
				breaksw;
			
			case "combine":
				if(! ${?combine} ) \
					set combine;
				breaksw;
			
			case "h":
			case "help":
				goto usage;
				breaksw;
			
			case "verbose":
				if(! ${?be_verbose} ) \
					set be_verbose;
				breaksw;
			
			case "nodeps":
			case "debug":
			case "diagnosis":
			case "diagnostic-mode":
				breaksw;
			
			case "do-not-re-encode":
			case "don't-re-encode":
			case "no-re-encode":
				if(! ${?dont_re_encode} ) \
					set dont_re_encode;
				if( ${?re_encode} ) \
					unset re_encode;
				breaksw;
			
			case "re-encode":
				switch("${value}")
					case "force":
						set value_used;
						if(! ${?force} ) \
							set force;
					default:
						if(! ${?re_encode} ) \
							set re_encode;
						if( ${?dont_re_encode} ) \
							unset dont_re_encode;
				endsw
				breaksw;
			
			case "force":
				if(! ${?force} ) \
					set force;
				breaksw;
			
			case "enable":
				switch("${value}")
					case "verbose":
						if(! ${?be_verbose} ) \
							set be_verbose;
						breaksw;
					
					case "reencode":
					case "re-encode":
						if(! ${?re_encode} ) \
							set re_encode;
						if( ${?dont_re_encode} ) \
							unset dont_re_encode;
						breaksw;
					
					
					case "force":
						if(! ${?force} ) \
							set force;
						breaksw;
					
					case "transcode":
						if(! ${?transcode} ) \
							set transcode;
						breaksw;
					
					default:
						printf "`printf ${option} | sed -r 's/^(.*)e$/\1ing/'` ${value} is not supported.  See "\`"${scripts_basename} --help"\`"\n";
						@ errno=-607;
						goto scripts_main_quit;
						breaksw;
				endsw
				breaksw;
			
			case "disable":
				switch("${value}")
					case "verbose":
						if( ${?be_verbose} ) \
							unset be_verbose;
						breaksw;
					
					case "reencode":
					case "re-encode":
						if( ${?re_encode} ) \
							unset re_encode;
						if(! ${?dont_re_encode} ) \
							set dont_re_encode;
						breaksw;
					
					case "force":
						if(! ${?force} ) \
							set force;
						breaksw;
					
					case "transcode":
						if( ${?transcode} ) \
							unset transcode;
						breaksw;
					
					default:
						printf "`printf ${option} | sed -r 's/^(.*)e$/\1ing/'` ${value} is not supported.  See "\`"${scripts_basename} --help"\`"\n";
						@ errno=-608;
						goto scripts_main_quit;
						breaksw;
				endsw
				breaksw;
			
			case "":
				if( -e "${value}" ) then
					set value_used;
					goto filename_list_append_value;
					breaksw;
				endif
			
			default:
				if( -e "${value}") then
					set value="";
				endif
				
				printf "**${scripts_basename} error:** ${dashes}${option}${equals}${value} is an unsupported option.\n\nSee "\`"${scripts_basename} -h|--help"\`" for more information.\n" > /dev/stderr;
				@ errno=-609;
				goto scripts_main_quit;
				breaksw;
		endsw
		
		if( ${?arg_shifted} ) then
			if(! ${?value_used} ) \
				@ arg--;
			unset arg_shifted;
		endif
		
		if( ${?value_used} ) \
			unset value_used;
		
		unset argument dashes option equals value;
	end
#goto parse_arg;


parse_argv_quit:
	unset arg;
	
	if( ${?debug_set} ) \
		unset debug debug_set;
	
	if( ${?debug_arguments} ) \
		goto scripts_main_quit;
	
	if(! ${?process_each_filename} ) \
		goto convert_filename_list;
	
	goto scripts_main_quit;
#goto parse_argv_quit;


filename_list_append_value:
	if(! ${?filename_list} ) \
		set filename_list="${scripts_tmpdir}/.filenames.${scripts_basename}.@`date '+%s'`";
	
	if(! -e "${filename_list}" ) \
		touch "${filename_list}";
	
	if( "${scripts_supported_extensions}" == "ogg|mp3|m4a|wav" && ! ${?ltrim} && ! ${?rtrim} ) then
		set scripts_supported_extensions="mp3|m4a|wav";
	else if( "${scripts_supported_extensions}" == "mp3|m4a|wav" && ( ${?ltrim} || ${?rtrim} ) ) then
		set scripts_supported_extensions="ogg|mp3|m4a|wav";
	endif
	
	if(! ${?scripts_supported_extensions} ) then
		if( ${?debug} || ${?debug_filelist} ) then
			printf "Adding [${value}] to [${filename_list}].\nBy running:\n\tfind -L "\""${value}"\""";
			if(! ${?supports_hidden_files} ) \
				printf  \! -iregex '.*\/\..*';
			printf "| sort >> "\""${filename_list}"\""\n\n";
		endif
		if(! ${?supports_hidden_files} ) then
			find -L "${value}" \! -iregex '.*\/\..*' | sort >> "${filename_list}";
		else
			find -L "${value}" | sort >> "${filename_list}";
		endif
		
		if(! ${?process_each_filename} ) then
			goto parse_arg;
		else
			goto convert_filename_list;
		endif
	endif
	
	if( ${?debug} || ${?debug_filelist} ) then
		if(! -d "${value}" ) then
			printf "Adding [${value}] to [${filename_list}] if its a supported file type.\nSupported extensions are:\n\t`printf "\""${scripts_supported_extensions}"\"" | sed -r 's/\|/,\ /g'`.\n";
		else
			printf "Adding any supported files found under [${value}] to [${filename_list}].\nSupported extensions are:\n\t`printf "\""${scripts_supported_extensions}"\"" | sed -r 's/\|/,\ /g'`.\n";
		endif
		printf "By running:\n\tfind -L "\""${value}"\"" -regextype posix-extended -iregex "\"".*\.(${scripts_supported_extensions})"\"""\$"";
		if(! ${?supports_hidden_files} ) \
			printf " \! -iregex '.*\/\..*'";
		printf " | sort >> "\""${filename_list}"\""\n\n";
	endif
	
	if(! ${?supports_hidden_files} ) then
		find -L "${value}" -regextype posix-extended -iregex ".*\.(${scripts_supported_extensions})"\$ \! -iregex '.*\/\..*'  | sort >> "${filename_list}";
	else
		find -L "${value}" -regextype posix-extended -iregex ".*\.(${scripts_supported_extensions})"\$ | sort >> "${filename_list}";
	endif
	
	if(! ${?process_each_filename} ) then
		goto parse_arg;
	else
		goto convert_filename_list;
	endif
#goto filename_list_append_value;


