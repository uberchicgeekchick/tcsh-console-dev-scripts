#!/bin/tcsh -f
setenv:
	if(! ${?TCSH_RC_SESSION_PATH} ) \
		setenv	TCSH_RC_SESSION_PATH	"/projects/cli/console.pallet/tcshrc";
	
	set script_dirname="${TCSH_RC_SESSION_PATH}/../media";
	set script_basename="oggconvert";
	set script="${script_dirname}/${script_basename}";
	@ status=0;
	
	set script_supported_extensions="ogg|mp3|m4a";
	set escaped_home_dir="`printf "\""%s"\"" "\""${HOME}"\"" | sed -r 's/\//\\\//g' | sed -r 's/(["\""])/"\""\\"\"""\""/g' | sed -r 's/([*])/\\\1/g' | sed -r 's/(\[)/\\\1/g' | sed -r 's/(['\!'])/\\\1/g'`";
	set escaped_starting_cwd="`printf "\""%s"\"" "\""${cwd}"\"" | sed -r 's/\//\\\//g' | sed -r 's/(["\""])/"\""\\"\"""\""/g' | sed -r 's/([*])/\\\1/g' | sed -r 's/(\[)/\\\1/g' | sed -r 's/(['\!'])/\\\1/g'`";
#setenv:


debug_check:
	set current_label="debug_check";
	@ arg=0;
	@ argc=${#argv};
	while( $arg < $argc )
		@ arg++;
		set option="`printf "\""%s"\"" "\""$argv[$arg]"\"" | sed -r 's/(["\""])/"\""\\"\"""\""/g' | sed -r 's/["\$"]/"\""\\"\$""\""/g' | sed -r 's/(['\!'])/\\\1/g' | sed -r 's/([*])/\\\1/g' | sed -r 's/(\[)/\\\1/g' | sed -r 's/^([\-]{1,2})([^\=]+)(\=?)['\''"\""]?(.*)['\''"\""]?"\$"/\2/'`";
		set value="`printf "\""%s"\"" "\""$argv[$arg]"\"" | sed -r 's/(["\""])/"\""\\"\"""\""/g' | sed -r 's/["\$"]/"\""\\"\$""\""/g' | sed -r 's/(['\!'])/\\\1/g' | sed -r 's/([*])/\\\1/g' | sed -r 's/(\[)/\\\1/g' | sed -r 's/^([\-]{1,2})([^\=]+)(\=?)['\''"\""]?(.*)['\''"\""]?"\$"/\4/'`";
		switch("${option}")
			case "diagnosis":
			case "diagnostic-mode":
				printf "**%s notice:**, via "\$"argv[%d], diagnostic mode\t[enabled].\n\n" "${script_basename}" $arg;
				set diagnostic_mode;
				unset argv[$arg];
				if(! ${?debug} ) \
					set debug;
				breaksw;
			
			case "debug":
				switch("${value}")
					case "length":
						if( ${?debug_length} ) \
							breaksw;
						
						printf "**%s notice:**, via "\$"argv[%d], length debugging:\t[enabled]\n\n" "${script_basename}" $arg;
						set debug_length;
						unset argv[$arg];
						breaksw;
					
					case "encoding":
						if( ${?debug_encoding} ) \
							breaksw;
						
						printf "**%s notice:**, via "\$"argv[%d], encoding debugging:\t[enabled]\n\n" "${script_basename}" $arg;
						set debug_encoding;
						unset argv[$arg];
						breaksw;
					
					default:
						if( ${?debug} ) \
							breaksw;
						
						printf "**%s notice:**, via "\$"argv[%d], debug mode:\t[enabled]\n\n" "${script_basename}" $arg;
						set debug;
						unset argv[$arg];
						breaksw;
				endsw
				breaksw;
			
			default:
				continue;
		endsw
	end
#debug_check:


check_dependencies:
	set dependencies=( "${script_basename}" "ffmpeg" "oggenc" "ogginfo" );# "`printf '%s' '${script_basename}' | sed -r 's/(.*)\.(tcsh|cshrc)"\$"/\1/'`");
	@ dependencies_index=0;
	foreach dependency(${dependencies})
		@ dependencies_index++;
		unset dependencies[$dependencies_index];
		if( ${?debug} ) \
			printf "\n**%s debug:** looking for dependency: %s.\n\n" "${script_basename}" "${dependency}"; 
			
		foreach program("`where '${dependency}'`")
			if( -x "${program}" ) \
				break;
			unset program;
		end
		
		if(! ${?program} ) then
			@ errno=-501;
			printf "One or more required dependencies couldn't be found.\n\t[%s] couldn't be found.\n\t%s requires: %s" "${dependency}" "${script_basename}" "${dependencies}";
			goto exit_script;
		endif
		
		if( ${?debug} )	then
			if( "`printf "\""%d"\"" "\""${dependencies_index}"\"" | sed -r 's/^[0-9]*[^1]?([1-3])"\$"/\1/`" )
				case "1":
					set suffix="st";
					breaksw;
				
				case "2":
					set suffix="nd";
					breaksw;
				
				case "3":
					set suffix="rd";
					breaksw;
				
				default:
					set suffix="th";
					breaksw;
			endsw
			
			printf "**%s debug:** found %d%s dependency: %s.\n" "${script_basename}" $dependencies_index "${suffix}" "${dependency}";
			unset suffix;
		endif
		
		switch("${dependency}")
			case "${script_basename}":
				if( ${?scripts_dirname} ) \
					breaksw;
				
				set old_owd="${cwd}";
				cd "`dirname '${program}'`";
				set scripts_dirname="${cwd}";
				cd "${owd}";
				set owd="${old_owd}";
				unset old_owd;
				set script="${scripts_dirname}/${script_basename}";
				if(! ${?TCSH_RC_SESSION_PATH} ) \
					setenv TCSH_RC_SESSION_PATH "${scripts_dirname}/../tcshrc";
				
				if(! ${?TCSH_LAUNCHER_PATH} ) \
					setenv TCSH_LAUNCHER_PATH \$"{TCSH_RC_SESSION_PATH}/../launchers";
				breaksw;
			
			case "ffmpeg":
				set ffmpeg="${program}";
				breaksw;
			
			case "oggenc":
				set oggenc="${program}";
				breaksw;
			
			case "ogginfo":
				set ogginfo="${program}";
				breaksw;
			
		endsw
		
		unset program;
	end
	
	unset dependency dependencies;
	
	goto parse_argv;
#check_dependencies:


if_sourced:
	if( ${?0} ) \
		goto main;
	
	source "${TCSH_RC_SESSION_PATH}/argv:check" "oggconvert" ${argv};
	if( $args_handled > 0 ) then
		@ args_shifted=0;
		while( $args_shifted < $args_handled )
			@ args_shifted++;
			shift;
		end
		unset args_shifted;
	endif
	unset args_handled;
	
	if( ${?TCSH_RC_DEBUG} ) \
		printf "Setting up aliases for: oggconvert, oggcombine, and oggtranscode.\n";
	
	alias	oggconvert	"${script}";
	alias	oggtranscode	"${script} --transcode";
	alias	oggcombine	"${script} --combine";
	
	source "${TCSH_RC_SESSION_PATH}/argv:clean-up" "oggconvert";
	exit ${status};
#if_sourced:


main:
	@ status=0;
	
	alias	ex	"ex -E -X -n --noplugin -s";
	
	if(! ${?filename_list} ) \
		goto usage;
	set file_count="`cat '${filename_list}'`";
	if(! ${#file_count} > 0 ) \
		goto usage;
	
	if( ! ${?debug} && ! ${?debug_encoding} ) then
		set output="/dev/null";
	else
		set output="/dev/stdout";
	endif
	
	@ files_coverted=0;
	@ files_processed=1;
	cp "${filename_list}" "${filename_list}.all";
	
	if( ${?combine} && ${#file_count} <= 1 ) then
		printf "--combine reqires at least two input files";
		@ status=-5;
		goto exit_script;
	endif
	
	goto convert_filenames;
#main


convert_filenames:
	if( ${?length} ) \
		unset length;
	if( ${?save_to_filename} ) \
		unset save_to_filename;
	foreach filename ( "`cat '${filename_list}' | sed -r 's/^\ //' | sed -r 's/(["\""])/"\""\\"\"""\""/g' | sed -r 's/["\$"]/"\""\\"\$""\""/g' | sed -r 's/(['\!'])/\\\1/g' | sed -r 's/([*])/\\\1/g' | sed -r 's/(\[)/\\\1/g'`" )
		set extension="`printf "\""${filename}"\"" | sed -r 's/^(.*)\.([^\.]+)"\$"/\2/g'`";
		set original_extension="${extension}";
		set filename="`printf "\""${filename}"\"" | sed -r 's/^(.*)\.([^\.]+)"\$"/\1/g' | sed -r 's/^\ //' | sed -r 's/(["\""])/"\""\\"\"""\""/g' | sed -r 's/["\$"]/"\""\\"\$""\""/g' | sed -r 's/(['\!'])/\\\1/g' | sed -r 's/([*])/\\\1/g' | sed -r 's/(\[)/\\\1/g'`";
		set filename="`printf "\""${filename}"\"" | sed -r 's/\\([*])/\1/g' | sed -r 's/\\\[/\[/g'`";
		ex '+1d' '+wq!' "${filename_list}";
		if(! -e "${filename}.${extension}" ) then
			if( ! ${?no_exit_on_usage} && ${#file_count} > 1 ) \
				set no_exit_on_usage;
			goto usage;
		endif
		if( "${filename}.${extension}" != "${filename}.ogg" ) then
			if( -e "${filename}.ogg" ) then
				if(!( ${?force} || ${?re_encode} )) then
					printf "\n%s.ogg: already exists\n\tRun %s%s --re-encode%s or %s%s --force%s to over-write existing files.\n\n" \` "${filename}" \` \` "${filename}" \`;
					if( ! ${?no_exit_on_usage} && ${#file_count} > 1 ) \
						set no_exit_on_usage;
					goto usage;
				endif
				
				if( ${?force} ) \
					goto oggconvert;
				
				if( ${?re_encode} ) \
					goto confirm_over_write;
			endif
		endif
		if( "${extension}" != "ogg" ) then
			goto oggconvert;
		else
			if( ${?ltrim} )	then
				goto oggconvert;
			else if( ${?rtrim} ) then
				set save_to_filename="${filename}";
				goto find_length;
			endif
			if(! ${?combine} ) \
				printf "Skipping %s.%s: no advanced conversion options specified.\n\n" "${filename}" "${extension}";
			@ files_processed++;
			goto convert_filenames;
		endif
	end
	if( ${?combine} ) \
		goto init_combine;
	goto exit_script;
#convert_filenames

confirm_over_write:
	if( -e "${filename}.ogg" ) then
		printf "\n%s.ogg already exists.\nWould you like to remove it and re-encode a new ogg vorbis file?\n" "${filename}";
		rm -iv "${filename}.ogg";
	endif
	if( -e "${filename}.ogg" ) then
		printf "\n%s.ogg will be perserved %s will exit." "${filename}" "${script_basename}";
		@ status=-4;
		@ files_processed++;
		goto convert_filenames;
	endif
#confirm_over_write:


oggconvert:
	if(! ${?save_to_filename} ) \
		set save_to_filename="${filename}";
	printf "\n\tConverting";
	if( ${#file_count} > 1 ) \
		printf " (file %d of %d)" ${files_processed} ${#file_count};
	printf ":\n\t\t[%s.%s]\n" "${filename}" "${extension}";
	
	if( "${extension}" != "wav" ) then
		set ffmpeg_input_file_options="";
		set ffmpeg_output_file_options="";
		if( ${?length} ) then
			set ffmpeg_input_file_options=" -t ${length}";
		else if( ${?ltrim} ) then
			set ffmpeg_input_file_options=" -ss ${ltrim}";
		endif
		if( "${extension}" == "ogg" ) then
			set ffmpeg_input_file_options="${ffmpeg_input_file_options} -acodec vorbis";
			set oggenc_output_file_options="";
		else if( "${extension}" != "" ) then
			set ffmpeg_output_file_options=" -ac 1 -ab 64000";
			set oggenc_output_file_options="";
		else if( "${extension}" == "" && ${?combine} ) then
			set ffmpeg_output_file_options=" -ac 1 -ar 44100 -ab 64000";
			set oggenc_output_file_options=" --min-bitrate 44 --max-bitrate 64";
		endif
		
		if( ${?debug} || ${?debug_encoding} ) then
			printf "\n\nRunning:\n\t";
			printf "( ${ffmpeg} -y${ffmpeg_input_file_options} -i "\""${filename}.${extension}"\""${ffmpeg_output_file_options} "\""${save_to_filename}.wav"\"" > ${output} ) >& /dev/stderr";
			printf "\n\n";
		endif
		
		printf "\t\t\tCreating temporary WAV file.  This may take several moments...";
		if( "${filename}" != "${save_to_filename}" ) then
			printf "#\!/bin/tcsh -f\nset echo;\n${ffmpeg} -y${ffmpeg_input_file_options} ${filename}.${extension}${ffmpeg_output_file_options} "\""${save_to_filename}.wav"\"" -newaudio\n" >! "./ffmpeg-combined.tcsh";
			chmod u+x "./ffmpeg-combined.tcsh";
			"./ffmpeg-combined.tcsh";
			#rm "./ffmpeg-combined.tcsh";
			#${ffmpeg} -y${ffmpeg_input_file_options} ${filename}.${extension}${ffmpeg_output_file_options} "${save_to_filename}.wav" >& ${output};
		else
			${ffmpeg} -y${ffmpeg_input_file_options} -i "${filename}.${extension}"${ffmpeg_output_file_options} "${save_to_filename}.wav" >& ${output};
		endif
		
		unset ffmpeg_input_file_options ffmpeg_output_file_options;
		
		if(!("${status}" == "0" && -e "${save_to_filename}.wav")) then
			printf "\t[failed]\n\t\t\tUnable to create temorary WAV  file.\n\t\t\tffmpeg returned: %d.\n" ${status};
			if( -e "${save_to_filename}.wav" ) \
				rm "${save_to_filename}.wav";
			
			@ files_processed++;
			goto convert_filenames;
		endif
		printf "\t\t[success]\n";
	endif
	
	printf "\t\t\tEncoding OGG Vorbis file.  Please wait several moments...";
	
	${oggenc} ${oggenc_output_file_options} "${save_to_filename}.wav" >& ${output};
	if(!("${status}" == "0" && -e "${save_to_filename}.ogg")) then
		printf "\t[failed]\n\t\t\tUnable to encode file.  Encoder: %s; returned: %d.\n" `basename ${oggenc}` ${status};
		if( -e "${save_to_filename}.wav" ) \
			rm "${save_to_filename}.wav";
		if( "${original_extension}" != "ogg" && -e "${save_to_filename}.ogg" ) \
			rm "${save_to_filename}.ogg";
		
		@ files_processed++;
		goto convert_filenames;
	endif
	
	printf "\t\t[success]\n";
	rm "${save_to_filename}.wav";
	if( "${filename}" != "${save_to_filename}" ) \
		goto exit_script;
	
	if( ! ${?rtrim} || ${?length} ) then
		if( ${?debug} ) then
			${ogginfo} "${save_to_filename}.ogg";
		endif
		
		printf "\t\t\t\t\t\t\t\tOGG Vorbis conversion:\t\t[completed]\n\n";
		
		if( ${?transcode} && "${original_extension}" != "ogg") then
			rm ${transcode} "${filename}.${original_extension}";
		endif
		
		@ files_coverted++;
		@ files_processed++;
		goto convert_filenames;
	endif
#oggconvert


find_length:
	if( ! ${?debug} && ( ${?debug_length} || ${?debug_encoding} ) ) then
		set debug;
		set debug_set;
	endif
	
	if(! ${?add_length} ) then
		set function="minus";
		set modifier="-";
		set reverse_modifier="+";
	else
		set function="add";
		set modifier="+";
		set reverse_modifier="-";
	endif
	
	set rtrim_hours="`printf '%s' '${rtrim}' | sed -r 's/([0-9]{2}):([0-9]{2}):([0-9]{2})/\1/'`";
	set rtrim_minutes="`printf '%s' '${rtrim}' | sed -r 's/([0-9]{2}):([0-9]{2}):([0-9]{2})/\2/'`";
	set rtrim_seconds="`printf '%s' '${rtrim}' | sed -r 's/([0-9]{2}):([0-9]{2}):([0-9]{2})/\3/'`";
	set oggs_length="`${ogginfo} "\""${filename}.ogg"\"" | /bin/grep --perl-regexp 'Playback length:'`";
	set oggs_hours="`printf '%s' '${oggs_length}' | sed -r 's/^[^0-9]*([0-9]+)(h:)([0-9]+)(m:)([0-9]+)\..*"\$"/\1/'`";
	if( "${oggs_hours}" == "${oggs_length}" ) \
		set oggs_hours="00";
	set oggs_minutes="`printf '%s' '${oggs_length}' | sed -r 's/^[^0-9]*([0-9]*)(m:)([0-9]+)\..*"\$"/\1/'`";
	if( "${oggs_minutes}" == "${oggs_length}" ) \
		set oggs_minutes="00";
	set oggs_seconds="`printf '%s' '${oggs_length}' | sed -r 's/^[^0-9]*([0-9]*)(m:)([0-9]+)\..*"\$"/\3/'`";
	if( "${oggs_seconds}" == "${oggs_length}" ) \
		set oggs_seconds="00";
	
	if( ${?debug} ) then
		printf "%s\n" "${oggs_length}";
		printf "\t%s%s%s\n" "${oggs_hours}" "${modifier}" "${rtrim_hours}";
		printf "\t%s%s%s\n" "${oggs_minutes}" "${modifier}" "${rtrim_minutes}";
		printf "\t%s%s%s\n" "${oggs_seconds}" "${modifier}" "${rtrim_seconds}";
	endif
	unset oggs_length;
	
	set hours="`printf '%s%s%s\n' '${oggs_hours}' '${modifier}' '${rtrim_hours}' | bc`";
	set minutes="`printf '%s%s%s\n' '${oggs_minutes}' '${modifier}' '${rtrim_minutes}' | bc`";
	set seconds="`printf '%s%s%s\n' '${oggs_seconds}' '${modifier}' '${rtrim_seconds}' | bc`";
	if( ${?debug} ) then
		printf "After %sing rtrim length from the ogg file's length:\n" "${function}";
		printf "\thours: %s\n" "${hours}";
		printf "\tminutes: %s\n" "${minutes}";
		printf "\tseconds: %s\n" "${seconds}";
	endif
#find_length


calculate_length:
	if( "${hours}" == "" ) then
		set hours="00";
	endif
	if( "`printf '%s' '${minutes}' | sed -r 's/^(\-).*/\1/'`" == "-" ) then
		set hours="`printf '%s%s1\n' '${hours}' '${modifier}' | bc`";
		set minutes="`printf '(%s%s60)%s%s\n' '${oggs_minutes}' '${reverse_modifier}' '${modifier}' '${rtrim_minutes}' | bc`";
	endif
	if( ${minutes} > 60 ) then
		set hours="`printf '%s+1\n' '${hours}' | bc`";
		set minutes="`printf '%s-60\n' '${minutes}' | bc`";
	endif
	if( "${minutes}" == "" ) then
		set minutes="00";
	endif
	
	if( "`printf '%s' '${seconds}' | sed -r 's/^(\-).*/\1/'`" == "-" ) then
		set minutes="`printf '%s%s1\n' '${minutes}' '${modifier}' | bc`";
		set seconds="`printf '(%s%s60)%s%s\n' '${oggs_seconds}' '${reverse_modifier}' '${modifier}' '${rtrim_seconds}' | bc`";
	endif
	if( ${seconds} > 60 ) then
		set minutes="`printf '%s+1\n' '${minutes}' | bc`";
		set seconds="`printf '%s-60\n' '${seconds}' | bc`";
	endif
	if( "${seconds}" == "" ) then
		set seconds="00";
	endif
	if( ${?debug} ) then
		printf "After calculating correct length:\n";
		printf "\thours: %s\n" "${hours}";
		printf "\tminutes: %s\n" "${minutes}";
		printf "\tseconds: %s\n" "${seconds}";
	endif
	
	if( "${hours}" == "" || "`printf '%s' '${hours}' | sed -r 's/^(\-).*/\1/'`" == "-" ) then
		set hours="00";
	endif
	if( "`printf '%s' '${hours}' | sed -r 's/^([0-9]{1})[0-9]{0,1}/\1/'`" == "${hours}" ) then
		set hours="0${hours}";
	endif
	if( "`printf '%s' '${minutes}' | sed -r 's/^([0-9]{1})[0-9]{0,1}/\1/'`" == "${minutes}" ) then
		set minutes="0${minutes}";
	endif
	if( "`printf '%s' '${seconds}' | sed -r 's/^([0-9]{1})[0-9]{0,1}/\1/'`" == "${seconds}" ) then
		set seconds="0${seconds}";
	endif
	if( ${?debug} ) then
		printf "After checking for any needed '0' padding:\n";
		printf "\thours: %s\n" "${hours}";
		printf "\tminutes: %s\n" "${minutes}";
		printf "\tseconds: %s\n" "${seconds}";
	endif
	set length="${hours}:${minutes}:${seconds}";
	if( "`printf '%s' '${length}' | sed -r 's/^[0-9]{2}:[0-9]{2}:[0-9]{2}"\$"//'`" != "" ) then
		printf "Invalid length: %s specified, lenth must be formatted as: hh:mm:ss\n" "${length}";
		@ files_processed++;
		goto convert_filenames;
	endif
	if( ${?debug} ) then
		printf "Calcucated Length: %s\n" "${length}";
		if( "${extension}" == "ogg" ) \
			goto exit_script;
	endif
	
	unset oggs_hours rtrim_hours oggs_minutes rtrim_minutes oggs_seconds rtrim_seconds hours minutes seconds;
	if( "${extension}" != "ogg" ) \
		set extension="ogg";
	
	if( ${?debug_set} ) \
		unset debug_set debug;
	
	if( "${filename}" == "${save_to_filename}" ) \
		goto oggconvert;
	goto continue_combine;
#calculate_length


init_combine:
	@ files_coverted=1;
	set extension="";
	set output="/dev/stdout";
	
	set old_owd="${owd}";
	cd "`dirname '${filename}'`";
	set save_to_filename="${cwd}/`basename '${cwd}'` - Combined";
	cd "${owd}";
	set owd="${old_owd}";
	unset old_owd;
	
	set add_length;
#init_combine

continue_combine:
	if( ${?length} ) then
		set itsoffset="${length}";
		unset length;
	endif
	foreach filename ( "`cat '${filename_list}.all'`" )
		set filename="`printf "\""%s"\"" "\""${filename}"\"" | sed -r 's/^(.*)\.([^\.]+)"\$"/\1/g'`";
		ex '+1d' '+wq' "${filename_list}.all";
		if(! -e "${filename}.ogg" ) \
			continue;
		@ files_coverted++;
		if(! ${?all_filenames} ) then
			set all_filenames="-acodec vorbis -i "\""${filename}.ogg"\""";
			if( ${?rtrim} ) \
				unset rtrim;
			set rtrim="00:00:00";
			goto find_length;
		else
			set all_filenames="${all_filenames} -acodec vorbis -itsoffset ${itsoffset} -i "\""${filename}.ogg"\""";
			set rtrim="${itsoffset}";
			goto find_length;
		endif
	end
	set filename="${all_filenames}";
	set extension="";
	goto oggconvert;
#continue_combine


exit_script:
	if( ${?filename_list} ) then
		if( -e "${filename_list}") \
			rm "${filename_list}";
		if( -e "${filename_list}.all") \
			rm "${filename_list}.all";
	endif
	if( ${?use_old_owd} ) then
		cd "${owd}";
		set owd="${use_old_owd}";
		unset use_old_owd;
	endif
	exit ${status}
#exit_script


usage:
	if(! ${?usage_displayed} ) then
		printf "Usage:\n\t%s [options] filename\n\tPossible options are:\n\t\t[-h|--help]\tDisplays this screen.\n" "${script_basename}";
		set usage_displayed;
	endif
	if(! ${?no_exit_on_usage} ) then
		@ status=-1;
		goto exit_script;
	endif
	
	@ files_processed++;
	goto convert_filenames;
#usage


parse_argv:
	if( ${#argv} == 0 ) \
		goto if_sourced;
	@ argc=${#argv};
	@ arg=0;
	if( ${?debug} ) printf "Checking %s's argv options.  %d total.\n" "${script_basename}" "${argc}";

	while( $arg < $argc )
		if(! ${?arg_shifted} ) \
			@ arg++;
		
		if( ${?debug} || ${?diagnostic_mode} )	 \
			printf "**%s debug:** Checking argv #%d (%s).\n" "${script_basename}" "${arg}" "$argv[$arg]";
		
		if( -e "$argv[$arg]" ) then
			if(! ${?filename_list} ) then
				set filename_list="./.${script_basename}.filenames@`date '+%s'`";
				touch "${filename_list}";
			endif
			if(! -d "$argv[$arg]" ) then
				if( ${?debug} ) \
					printf "Handling %sargv[%d] adding file:\n\t<%s>\n\t\tto\n\t<%s>.\n" \$ $arg "$argv[$arg]" "${filename_list}";
				printf "%s\n" "$argv[$arg]" >> "${filename_list}";
			else
				if(! ${?script_supported_extensions} ) then
					if( ${?debug} ) \
						printf "Adding the contents of [%s] to [%s].\n" "$argv[$arg]" "${filename_list}";
					find "$argv[$arg]" -type f | sort >> "${filename_list}";
				else
					if( "${script_supported_extensions}" == "ogg|mp3|m4a" && ! ${?ltrim} && ! ${?rtrim} ) \
						set script_supported_extensions="mp3|m4a";
					if( ${?debug} ) \
						printf "Adding any (%s) files found under [%s] to [%s].\n" "${script_supported_extensions}" "$argv[$arg]" "${filename_list}";
					find "$argv[$arg]" -regextype posix-extended -iregex ".*\.(${script_supported_extensions})"\$ -type f | sort >> "${filename_list}";
				endif
			endif
			continue;
		endif
		
		set dashes="`printf "\""$argv[$arg]"\"" | sed -r 's/^\ //' | sed -r 's/(["\""])/"\""\\"\"""\""/g' | sed -r 's/["\$"]/"\""\\"\$""\""/g' | sed -r 's/(['\!'])/\\\1/g' | sed -r 's/([*])/\\\1/g' | sed -r 's/(\[)/\\\1/g' | sed -r 's/^([\-]{1,2})([^\=]+)(=?)['\''"\""]?(.*)['\''"\""]?"\$"/\1/'`";
		if( "${dashes}" == "$argv[$arg]" ) \
			set dashes="";
		
		set option="`printf "\""$argv[$arg]"\"" | sed -r 's/^\ //' | sed -r 's/(["\""])/"\""\\"\"""\""/g' | sed -r 's/["\$"]/"\""\\"\$""\""/g' | sed -r 's/(['\!'])/\\\1/g' | sed -r 's/([*])/\\\1/g' | sed -r 's/(\[)/\\\1/g' | sed -r 's/^([\-]{1,2})([^\=]+)(=?)['\''"\""]?(.*)['\''"\""]?"\$"/\2/'`";
		if( "${option}" == "$argv[$arg]" ) \
			set option="";
		
		set equals="`printf "\""$argv[$arg]"\"" | sed -r 's/^\ //' | sed -r 's/(["\""])/"\""\\"\"""\""/g' | sed -r 's/["\$"]/"\""\\"\$""\""/g' | sed -r 's/(['\!'])/\\\1/g' | sed -r 's/([*])/\\\1/g' | sed -r 's/(\[)/\\\1/g' | sed -r 's/^([\-]{1,2})([^\=]+)(=?)['\''"\""]?(.*)['\''"\""]?"\$"/\3/'`";
		if( "${equals}" == "$argv[$arg]" ) \
			set equals="";
		
		#set equals="";
		set value="`printf "\""$argv[$arg]"\"" | sed -r 's/^\ //' | sed -r 's/(["\""])/"\""\\"\"""\""/g' | sed -r 's/["\$"]/"\""\\"\$""\""/g' | sed -r 's/(['\!'])/\\\1/g' | sed -r 's/([*])/\\\1/g' | sed -r 's/(\[)/\\\1/g' | sed -r 's/^([\-]{1,2})([^\=]+)(=?)['\''"\""]?(.*)['\''"\""]?"\$"/\4/'`";
		#if( "${value}" != "" && "${value}" != "$argv[$arg]" ) then
		#	set equals="=";
		#else if( "${option}" != "" ) then
		if( ( "${option}" != "$argv[$arg]" && "${option}" != "" ) && "${equals}" == "" && ( "${value}" == "" || "${value}" == "$argv[$arg]" ) ) then
			@ arg++;
			if( ${arg} > ${argc} ) then
				@ arg--;
			else if( -e "$argv[$arg]" ) then
				@ arg--;
			else
				set test_dashes="`printf "\""$argv[$arg]"\"" | sed -r 's/^\ //' | sed -r 's/(["\""])/"\""\\"\"""\""/g' | sed -r 's/["\$"]/"\""\\"\$""\""/g' | sed -r 's/(['\!'])/\\\1/g' | sed -r 's/([*])/\\\1/g' | sed -r 's/(\[)/\\\1/g' | sed -r 's/^([\-]{1,2})([^\=]+)(=?)['\''"\""]?(.*)['\''"\""]?"\$"/\1/'`";
				set test_option="`printf "\""$argv[$arg]"\"" | sed -r 's/^\ //' | sed -r 's/(["\""])/"\""\\"\"""\""/g' | sed -r 's/["\$"]/"\""\\"\$""\""/g' | sed -r 's/(['\!'])/\\\1/g' | sed -r 's/([*])/\\\1/g' | sed -r 's/(\[)/\\\1/g' | sed -r 's/^([\-]{1,2})([^\=]+)(=?)['\''"\""]?(.*)['\''"\""]?"\$"/\2/'`";
				set test_equals="`printf "\""$argv[$arg]"\"" | sed -r 's/^\ //' | sed -r 's/(["\""])/"\""\\"\"""\""/g' | sed -r 's/["\$"]/"\""\\"\$""\""/g' | sed -r 's/(['\!'])/\\\1/g' | sed -r 's/([*])/\\\1/g' | sed -r 's/(\[)/\\\1/g' | sed -r 's/^([\-]{1,2})([^\=]+)(=?)['\''"\""]?(.*)['\''"\""]?"\$"/\3/'`";
				set test_value="`printf "\""$argv[$arg]"\"" | sed -r 's/^\ //' | sed -r 's/(["\""])/"\""\\"\"""\""/g' | sed -r 's/["\$"]/"\""\\"\$""\""/g' | sed -r 's/(['\!'])/\\\1/g' | sed -r 's/([*])/\\\1/g' | sed -r 's/(\[)/\\\1/g' | sed -r 's/^([\-]{1,2})([^\=]+)(=?)['\''"\""]?(.*)['\''"\""]?"\$"/\4/'`";
				
				if( ${?debug} || ${?diagnostic_mode} ) \
					printf "\tparsed %sargv[%d] (%s) to test for replacement value.\n\tparsed %stest_dashes: [%s]; %stest_option: [%s]; %stest_equals: [%s]; %stest_value: [%s]\n" \$ "${arg}" "$argv[$arg]" \$ "${test_dashes}" \$ "${test_option}" \$ "${test_equals}" \$ "${test_value}";
				
				if(!("${test_dashes}" == "$argv[$arg]" && "${test_option}" == "$argv[$arg]" && "${test_equals}" == "$argv[$arg]" && "${test_value}" == "$argv[$arg]")) then
					@ arg--;
				else
					set equals="=";
					set value="$argv[$arg]";
					set arg_shifted;
				endif
				unset test_dashes test_option test_equals test_value;
			endif
		endif
		
		if( "`printf "\""${value}"\"" | sed -r "\""s/^(~)(.*)/\1/"\""`" == "~" ) then
			set value="`printf "\""${value}"\"" | sed -r "\""s/^(~)(.*)/${escaped_home_dir}\2/"\""`";
		endif
		
		if( "`printf "\""${value}"\"" | sed -r "\""s/^(\.)(.*)/\1/"\""`" == "." ) then
			set value="`printf "\""${value}"\"" | sed -r "\""s/^(\.)(.*)/${escaped_starting_cwd}\2/"\""`";
		endif
		
		@ parsed_argc++;
		set parsed_arg="${dashes}${option}${equals}${value}";
		if(! ${?parsed_argv} ) then
			set parsed_argv="${parsed_arg}";
		else
			set parsed_argv="${parsed_argv} ${parsed_arg}";
		endif
		
		if( ${?debug} || ${?diagnostic_mode} ) \
			printf "\tparsed option %sparsed_argv[%d]: %s\n" \$ "$parsed_argc" "${parsed_arg}";
		
		switch("${option}")
			case "rtrim":
				if( "`printf '%s' '${value}' | sed -r 's/^[0-9]{2}:[0-9]{2}:[0-9]{2}"\$"//'`" != "" ) then
					printf "Invalid %s%s: %s specified, lenth must be formatted as: hh:mm:ss" "${dashes}" "${option}" "${value}";
					breaksw;
				endif
			
				set rtrim="${value}";
				breaksw;
			
			case "ltrim":
				if( "`printf '%s' '${value}' | sed -r 's/^[0-9]{2}:[0-9]{2}:[0-9]{2}"\$"//'`" != "" ) then
					printf "Invalid %s%s: %s specified, lenth must be formatted as: hh:mm:ss" "${dashes}" "${option}" "${value}";
					breaksw;
				endif
			
				set ltrim="${value}";
				breaksw;
			
			case "no-transcode":
				if( ${?transcode} ) \
					unset transcode;
				breaksw;
			
			case "playlist":
				if( "${value}" != "" ) then
					set playlist="${value}";
				else
					set playlist="${scripts_basename}.playlist.from.`date '+%I:%M:%S%P'`.m3u";
				endif
				
				if(! -e "${playlist}" ) then
					set playlist_new;
					touch "${playlist}";
				endif
				breaksw;
			
			case "transcode":
				switch( "${value}" )
					case "i":
					case "iv":
					case "ivf":
					case "force":
					case "verbose":
					case "interactive":
						set transcode="${value}";
						breaksw;
					
					default:
						set transcode;
						breaksw;
				endsw
				breaksw;
			
			case "force":
				if(! ${?force} ) \
					set force;
				breaksw;
			
			case "combine":
				if(! ${?combine} ) \
					set combine;
				breaksw;
			
			case "h":
			case "help":
				goto usage;
				breaksw;
			
			case "verbose":
				if(! ${?be_verbose} ) \
					set be_verbose;
				breaksw;
			
			case "debug":
				switch("${value}")
					case "length":
						if( ${?debug_length} ) \
							breaksw;
						
						printf "**%s notice:**, via "\$"argv[%d], length debugging:\t[enabled]\n\n" "${script_basename}" $arg;
						set debug_length;
						breaksw;
					
					case "encoding":
						if( ${?debug_encoding} ) \
							breaksw;
						
						printf "**%s notice:**, via "\$"argv[%d], encoding debugging:\t[enabled]\n\n" "${script_basename}" $arg;
						set debug_encoding;
						breaksw;
					
					default:
						if( ${?debug} ) \
							breaksw;
						
						printf "**%s notice:**, via "\$"argv[%d], debug mode:\t[enabled]\n\n" "${script_basename}" $arg;
						set debug;
						breaksw;
				endsw
				breaksw;
			
			case "no-re-encode":
				if( ${?re_encode} ) \
					unset re_encode;
				breaksw;
			
			case "re-encode":
				if(! ${?re_encode} ) \
					set re_encode;
				breaksw;
			
			case "enable":
				switch("${value}")
					case "verbose":
						if(! ${?be_verbose} ) \
							set be_verbose;
						breaksw;
					
					case "reencode":
					case "re-encode":
						if(! ${?re_encode} ) \
							set re_encode;
						breaksw;
					
					case "force":
						if(! ${?force} ) \
							set force;
						breaksw;
					
					case "transcode":
						if(! ${?transcode} ) \
							set transcode;
						breaksw;
					
					default:
						printf "enabling %s is not supported by %s.  See %s --help\n" "${value}" "${script_basename}" "${script_basename}";
						breaksw;
					endsw
				
				breaksw;
			
			case "disable":
				switch("${value}")
					case "verbose":
						if( ${?be_verbose} ) \
							unset be_verbose;
						breaksw;
					
					case "reencode":
					case "re-encode":
						if( ${?re_encode} ) \
							unset re_encode;
						breaksw;
					
					case "force":
						if(! ${?force} ) \
							set force;
						breaksw;
					
					case "transcode":
						if( ${?transcode} ) \
							unset transcode;
						breaksw;
					
					default:
						printf "disabling %s is not supported by %s.  See %s --help\n" "${value}" "${script_basename}" "${script_basename}";
						breaksw;
					endsw
				breaksw;
			
			default:
				if(! ${?strict} ) \
					breaksw;
				
				printf "%s%s is an unsupported option.  See %s -h|--help for more information.\n" "${dashes}" "${option}" "${script_basename}";
				goto usage;
				breaksw;
		endsw
		
		if( ${?arg_shifted} ) then
			unset arg_shifted;
			@ arg--;
		endif
		
		unset dashes option value;
	end
	goto if_sourced;
#parse_argv

