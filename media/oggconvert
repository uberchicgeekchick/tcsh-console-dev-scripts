#!/bin/tcsh -f
setenv:
	if(! ${?eol} ) set eol '$';
	set status=0;
#setenv:

check_source:
	if(! ${?TCSH_RC_SESSION_PATH} )	\
		setenv	TCSH_RC_SESSION_PATH	"/projects/cli/console.pallet/tcshrc";
	
	if( `printf '%s' "${0}" | sed -r 's/^[^\.]*(csh)$/\1/'` == "csh" ) then
		source "${TCSH_RC_SESSION_PATH}/argv:check" "oggconvert" ${argv};
		if( $args_handled > 0 ) then
			@ args_shifted=0;
			while( $args_shifted < $args_handled )
				@ args_shifted++;
				shift;
			end
			unset args_shifted;
		endif
		unset args_handled;
		
		printf "Setting up aliases for: oggconvert and oggcombine.\n";
		alias	oggconvert	"${TCSH_RC_SESSION_PATH}/../media/offconvert";
		alias	oggcombine	"${TCSH_RC_SESSION_PATH}/../media/offconvert --combine";

		source "${TCSH_RC_SESSION_PATH}/argv:clean-up" "art:grep-and-find.cshrc.tcsh";
		exit ${status};
	endif
#check_source


init:
	set scripts_path="${TCSH_RC_SESSION_PATH}/../media/";
	set scripts_name="`basename '${0}'`";
	
	goto parse_argv;
#init


main:
	set status=0;
	if(! ${?filename_list} ) goto usage;
	
	foreach ffmpeg( `where ffmpeg` )
		if( -x "${ffmpeg}" ) break;
		unset ffmpeg;
	end
	
	if(! ${?ffmpeg} ) set ffmpeg="";
	if(! -x "${ffmpeg}" ) then
		printf "\nUnable to find executable ffmpeg.  Found: %s.\n" ${ffmpeg};
		set status=-1;
		goto exit_script;
	endif
	
	
	foreach encoder( `where oggenc` )
		if( -x "${encoder}" ) break;
		unset encoder;
	end
	if(! ${?encoder} ) set encoder="";
	if(! -x "${encoder}" ) then
		printf "\nUnable to find executable oggenc.  Found: %s.\n" ${encoder};
		set status=-2;
		goto exit_script;
	endif
	
	
	foreach ogginfo( `where ogginfo` )
		if( -x "${ogginfo}" ) break;
		unset ogginfo;
	end
	
	if(! ${?ogginfo} ) set ogginfo="";
	if(! -x "${ogginfo}" ) then
		printf "\nUnable to find executable ogginfo.  Found: %s.\n" ${ogginfo};
		set status=-3;
		goto exit_script;
	endif
	
	alias	ex	"ex -E -X -n --noplugin -s";
	
	if(! ${?debug} ) then
		set output="/dev/null";
	else
		set output="/dev/stdout";
	endif
	
	@ files_coverted=1;
	set filenames="`cat '${filename_list}'`";
	cp "${filename_list}" "${filename_list}.all";
	set files_to_convert=${#filenames};
	
	if( ${?combine} && ${files_to_convert} <= 1 ) then
		printf "--combine reqires at least two input files";
		set status=-5;
		goto exit_script;
	endif
	
	goto convert_filenames;
#main


convert_filenames:
	if( ${?filename} && ${?extension} ) then
		if( -e "${filename}.ogg" ) @ files_coverted++;
	endif
	if( ${?length} ) unset length;
	if( ${?save_to_filename} ) unset save_to_filename;
	foreach filename ( "`cat '${filename_list}'`" )
		set extension="`printf '%s' "\""${filename}"\"" | sed -r 's/^(.*)(\.[^\.]+)${eol}/\2/g'`";
		set original_extension="${extension}";
		set filename="`printf '%s' "\""${filename}"\"" | sed -r 's/^(.*)\.([^\.]+)${eol}/\1/g'`";
		ex '+1d' '+wq!' "${filename_list}";
		if(! -e "${filename}${extension}" ) then
			if( ! ${?no_exit_on_usage} && ${files_to_convert} > 1 )	\
				set no_exit_on_usage;
			goto usage;
		endif
		if( -e "${filename}.ogg" ) then
			if( ! ${?re_encode} && ! ${?force} ) then
				printf "\n%s.ogg: already exists\n\tRun '%s --re-encode' or '%s --force' to over-write existing files.\n\n" "${filename}";
				if( ! ${?no_exit_on_usage} && ${files_to_convert} > 1 )	\
					set no_exit_on_usage;
				goto usage;
			endif
			if(! ${?force} ) then
				goto confirm_rencode;
			endif
		endif
		if( "${extension}" != ".ogg" ) then
			goto oggconvert;
		else
			if( ! ${?ltrim} && ${?rtrim} ) goto find_length;
			if( ${?ltrim} ) goto oggconvert;
			printf "Skipping %s%s: no advanced conversion options specified.\n\n" "${filename}" "${extension}";
			goto convert_filenames;
		endif
	end
	if( ${?combine} ) goto init_combine;
	goto exit_script;
#convert_filenames

confirm_rencode:
	if( -e "${filename}.ogg" ) then
		printf "\n%s.ogg already exists.\nWould you like to remove it and re-encode a new ogg vorbis file?\n" "${filename}";
		rm -iv "${filename}.ogg";
	endif
	if( -e "${filename}.ogg" ) then
		printf "\n%s.ogg will be perserved %s will exit." "${filename}" "${scripts_name}";
		set status=-4;
		goto convert_filenames;
	endif
#confirm_rencode:


oggconvert:
	if(! ${?save_to_filename} ) set save_to_filename="${filename}";
	printf "\n\tConverting file #%d(out of %d files):\n\t\t[%s%s]\n\t\t\tto:\n\t\t[%s" ${files_coverted} ${files_to_convert} "${filename}" "${extension}" "${save_to_filename}";
	if( "${extension}" != "" ) printf ".ogg";
	printf "]";
	if( "${extension}" != ".wav" ) then
		set ffmpeg_input_file_options="";
		set ffmpeg_output_file_options="";
		if( ${?length} ) then
			set ffmpeg_input_file_options="-t ${length}";
		else if( ${?ltrim} ) then
			set ffmpeg_input_file_options="-ss ${ltrim}";
		endif
		if( "${extension}" == ".ogg" ) then
			set ffmpeg_input_file_options="${ffmpeg_input_file_options} -acodec vorbis";
		else if( "${extension}" != "" ) then
			set ffmpeg_output_file_options="-ac 1 -ab 64000";
		endif
		
		if( ${?debug} ) then
			printf "\n\nRunning:\n\t";
			printf "${ffmpeg} -y ${ffmpeg_input_file_options} -i "\""${filename}${extension}"\"" ${ffmpeg_output_file_options} "\""${save_to_filename}.wav"\"" >& ${output}";
			printf "\n\n";
		endif
		
		printf "\n\tCreating temporary WAV file.  This may take several moments...";
		if( "${filename}" != "${save_to_filename}" ) then
			printf "#\!/bin/tcsh -f\n${ffmpeg} -y ${ffmpeg_input_file_options} ${filename}${extension} ${ffmpeg_output_file_options} "\""${save_to_filename}.wav"\""\n" >! "./ffmpeg-combined.tcsh";
			chmod u+x "./ffmpeg-combined.tcsh";
			${ffmpeg} -y ${ffmpeg_input_file_options} ${filename}${extension} ${ffmpeg_output_file_options} "${save_to_filename}.wav" >& ${output};
		else
			${ffmpeg} -y ${ffmpeg_input_file_options} -i "${filename}${extension}" ${ffmpeg_output_file_options} "${save_to_filename}.wav" >& ${output};
		endif
		
		unset ffmpeg_input_file_options ffmpeg_output_file_options;
		
		if(!("${status}" == "0" && -e "${save_to_filename}.wav")) then
			printf "\t[failed]\n\tUnable to create temorary WAV  file.\n\tffmpeg returned: %d.\n" ${status};
			if( -e "${save_to_filename}.wav" ) rm "${save_to_filename}.wav";
			if( ${?exit_on_error} ) goto exit_script;
			goto convert_filenames;
		endif
		printf "\t[success]\n";
	endif
	
	printf "\n\tEncoding WAV file to OGG Vorbis file.  Please wait a moment...";
	
	${encoder} "${save_to_filename}.wav" >& ${output};
	if(!("${status}" == "0" && -e "${save_to_filename}.ogg")) then
		printf "\t[failed]\n\tUnable to encode file.  Encoder: %s; returned: %d.\n" `basename ${encoder}` ${status};
		if( -e "${save_to_filename}.wav" ) rm "${save_to_filename}.wav";
		if( -e "${save_to_filename}.ogg" ) rm "${save_to_filename}.ogg";
		if( ${?exit_on_error} ) goto exit_script;
		goto convert_filenames;
	endif
	
	printf "\t[success]\n";
	rm "${save_to_filename}.wav";
	if( ! ${?rtrim} || ${?length} ) then
		if( ${?debug} ) then
			${ogginfo} "${save_to_filename}.ogg";
		endif
		printf "\n\n\t\t\tOGG Vorbis conversion complete.\n\n";
		if( ${?transcode} ) then
			rm ${transcode} "${filename}.${original_extension}";
		endif
		goto convert_filenames;
	endif
#oggconvert


find_length:
	if( ! ${?debug} && ${?debug_length} ) then
		set debug;
		set debug_set;
	endif
	
	if(! ${?add_length} ) then
		set function="minus";
		set modifier="-";
		set reverse_modifier="+";
	else
		set function="add";
		set modifier="+";
		set reverse_modifier="-";
	endif
	
	set rtrim_hours="`printf '%s' '${rtrim}' | sed -r 's/([0-9]{2}):([0-9]{2}):([0-9]{2})/\1/'`";
	set rtrim_minutes="`printf '%s' '${rtrim}' | sed -r 's/([0-9]{2}):([0-9]{2}):([0-9]{2})/\2/'`";
	set rtrim_seconds="`printf '%s' '${rtrim}' | sed -r 's/([0-9]{2}):([0-9]{2}):([0-9]{2})/\3/'`";
	set oggs_length="`${ogginfo} '${filename}.ogg'  | /bin/grep --perl-regexp 'Playback length:'`";
	set oggs_hours="`printf '%s' '${oggs_length}' | sed -r 's/^[^0-9]*([0-9]+)(h:)([0-9]+)(m:)([0-9]+)\..*${eol}/\1/'`";
	if( "${oggs_hours}" == "${oggs_length}" ) set oggs_hours="00";
	set oggs_minutes="`printf '%s' '${oggs_length}' | sed -r 's/^[^0-9]*([0-9]*)(m:)([0-9]+)\..*${eol}/\1/'`";
	if( "${oggs_minutes}" == "${oggs_length}" ) set oggs_minutes="00";
	set oggs_seconds="`printf '%s' '${oggs_length}' | sed -r 's/^[^0-9]*([0-9]*)(m:)([0-9]+)\..*${eol}/\3/'`";
	if( "${oggs_seconds}" == "${oggs_length}" ) set oggs_seconds="00";
	
	if( ${?debug} ) then
		printf "%s\n" "${oggs_length}";
		printf "\t%s%s%s\n" "${oggs_hours}" "${modifier}" "${rtrim_hours}";
		printf "\t%s%s%s\n" "${oggs_minutes}" "${modifier}" "${rtrim_minutes}";
		printf "\t%s%s%s\n" "${oggs_seconds}" "${modifier}" "${rtrim_seconds}";
	endif
	unset oggs_length;
	
	set hours="`printf '%s%s%s\n' '${oggs_hours}' '${modifier}' '${rtrim_hours}' | bc`";
	set minutes="`printf '%s%s%s\n' '${oggs_minutes}' '${modifier}' '${rtrim_minutes}' | bc`";
	set seconds="`printf '%s%s%s\n' '${oggs_seconds}' '${modifier}' '${rtrim_seconds}' | bc`";
	if( ${?debug} ) then
		printf "After %sing rtrim length from the ogg file's length:\n" "${function}";
		printf "\thours: %s\n" "${hours}";
		printf "\tminutes: %s\n" "${minutes}";
		printf "\tseconds: %s\n" "${seconds}";
	endif
#find_length


calculate_length:
	if( "${hours}" == "" ) then
		set hours="00";
	endif
	if( "`printf '%s' '${minutes}' | sed -r 's/^(\-).*/\1/'`" == "-" ) then
		set hours="`printf '%s%s1\n' '${hours}' '${modifier}' | bc`";
		set minutes="`printf '(%s%s60)%s%s\n' '${oggs_minutes}' '${reverse_modifier}' '${modifier}' '${rtrim_minutes}' | bc`";
	endif
	if( ${minutes} > 60 ) then
		set hours="`printf '%s+1\n' '${hours}' | bc`";
		set minutes="`printf '%s-60\n' '${minutes}' | bc`";
	endif
	if( "${minutes}" == "" ) then
		set minutes="00";
	endif
	
	if( "`printf '%s' '${seconds}' | sed -r 's/^(\-).*/\1/'`" == "-" ) then
		set minutes="`printf '%s%s1\n' '${minutes}' '${modifier}' | bc`";
		set seconds="`printf '(%s%s60)%s%s\n' '${oggs_seconds}' '${reverse_modifier}' '${modifier}' '${rtrim_seconds}' | bc`";
	endif
	if( ${seconds} > 60 ) then
		set minutes="`printf '%s+1\n' '${minutes}' | bc`";
		set seconds="`printf '%s-60\n' '${seconds}' | bc`";
	endif
	if( "${seconds}" == "" ) then
		set seconds="00";
	endif
	if( ${?debug} ) then
		printf "After calculating correct length:\n";
		printf "\thours: %s\n" "${hours}";
		printf "\tminutes: %s\n" "${minutes}";
		printf "\tseconds: %s\n" "${seconds}";
	endif
	
	if( "${hours}" == "" || "`printf '%s' '${hours}' | sed -r 's/^(\-).*/\1/'`" == "-" ) then
		set hours="00";
	endif
	if( "`printf '%s' '${hours}' | sed -r 's/^([0-9]{1})[0-9]{0,1}/\1/'`" == "${hours}" ) then
		set hours="0${hours}";
	endif
	if( "`printf '%s' '${minutes}' | sed -r 's/^([0-9]{1})[0-9]{0,1}/\1/'`" == "${minutes}" ) then
		set minutes="0${minutes}";
	endif
	if( "`printf '%s' '${seconds}' | sed -r 's/^([0-9]{1})[0-9]{0,1}/\1/'`" == "${seconds}" ) then
		set seconds="0${seconds}";
	endif
	if( ${?debug} ) then
		printf "After checking for any needed '0' padding:\n";
		printf "\thours: %s\n" "${hours}";
		printf "\tminutes: %s\n" "${minutes}";
		printf "\tseconds: %s\n" "${seconds}";
	endif
	set length="${hours}:${minutes}:${seconds}";
	if( "`printf '%s' '${length}' | sed -r 's/^[0-9]{2}:[0-9]{2}:[0-9]{2}${eol}//'`" != "" ) then
		printf "Invalid length: %s specified, lenth must be formatted as: hh:mm:ss\n" "${length}";
		if( ${?exit_on_error} ) goto exit_script;
		goto convert_filenames;
	endif
	if( ${?debug} ) then
		printf "-->%s\n" "${length}";
		if( "${extension}" == ".ogg" ) goto exit_script;
	endif
	
	unset oggs_hours rtrim_hours oggs_minutes rtrim_minutes oggs_seconds rtrim_seconds hours minutes seconds;
	if( "${extension}" != ".ogg" ) set extension=".ogg";
	
	if( ${?debug_set} ) unset debug_set debug;
	
	if( "${filename}" == "${save_to_filename}" ) goto oggconvert;
	goto continue_combine;
#calculate_length


init_combine:
	@ files_coverted=1;
	set extension="";
	set output="/dev/stdout";
	
	set old_owd="${owd}";
	cd "`dirname '${filename}'`";
	set save_to_filename="${cwd}/`basename '${cwd}'` - Combined";
	cd "${owd}";
	set owd="${old_owd}";
	unset old_owd;
	
	set add_length;
#init_combine

continue_combine:
	if( ${?length} ) then
		set itsoffset="${length}";
		unset length;
	endif
	foreach filename ( "`cat '${filename_list}.all'`" )
		set filename="`printf '%s' "\""${filename}"\"" | sed -r 's/^(.*)\.([^\.]+)${eol}/\1/g'`";
		ex '+1d' '+wq' "${filename_list}.all";
		if(! -e "${filename}.ogg" ) continue;
		@ files_coverted++;
		if(! ${?all_filenames} ) then
			set all_filenames="-acodec vorbis -i "\""${filename}.ogg"\";
			if( ${?rtrim} ) unset rtrim;
			set rtrim="00:00:00";
			goto find_length;
		else
			set all_filenames="${all_filenames} -acodec vorbis -itsoffset ${itsoffset} -i "\""${filename}.ogg"\";
			set rtrim="${itsoffset}";
			goto find_length;
		endif
	end
	set filename="${all_filenames}"
	set exit_on_error;
	set extension="";
	goto oggconvert;
#continue_combine


exit_script:
	if( ${?filename_list} ) then
		rm -v "${filename_list}" "${filename_list}.all";
	endif
	if( ${?use_old_owd} ) then
		cd "${owd}";
		set owd="${use_old_owd}";
		unset use_old_owd;
	endif
	exit ${status}
#exit_script


usage:
	if(! ${?usage_displayed} ) then
		printf "Usage:\n\t%s [options] filename\n\tPossible options are:\n\t\t[-h|--help]\tDisplays this screen.\n" "${scripts_name}";
		set usage_displayed;
	endif
	if(! ${?no_exit_on_usage} ) then
		set status=-1;
		goto exit_script;
	endif
	goto convert_filenames;
#usage


parse_argv:
	if( ${#argv} == 0 ) goto main;
	@ argc=${#argv};
	@ arg=0;
	while( $arg < $argc )
		@ arg++;
		if( "$argv[$arg]" != "--debug" ) continue;
		printf "Enabling debug mode (via "\$"argv[%d]\n" $arg;
		set debug;
		break;
	end
	@ arg=0;
	if( ${?debug} ) printf "Checking %s's argv options.  %d total.\n" "${scripts_name}" "${argc}";

	while( $arg < $argc )
		@ arg++;
		
		set dashes="`printf "\""$argv[$arg]"\"" | sed -r 's/([\-]{1,2})([^\=]+)=?['\''"\""]?(.*)['\''"\""]?/\1/'`";
		if( "${dashes}" == "$argv[$arg]" ) set dashes="";
		
		set option="`printf "\""$argv[$arg]"\"" | sed -r 's/([\-]{1,2})([^\=]+)=?['\''"\""]?(.*)['\''"\""]?/\2/'`";
		if( "${option}" == "$argv[$arg]" ) set option="";
		
		set value="`printf "\""$argv[$arg]"\"" | sed -r 's/([\-]{1,2})([^\=]+)=?['\''"\""]?(.*)['\''"\""]?/\3/'`";
		set has_value="";
		if( "${value}" != "$argv[$arg]" ) then
			set has_value="=";
		else
			set value="";
		endif
		
		if( ${?debug} ) printf "Checking argv #%d (%s).\nParsed option: %s%s%s%s" "${arg}" "$argv[$arg]" "${dashes}" "${option}" "${has_value}" "${value}";
		
		if( "${has_value}" == "=" ) then
			unset has_value;
			set has_value;
		else
			unset has_value;
		endif
		
		switch("${option}")
			case "rtrim":
				if( "`printf '%s' '${value}' | sed -r 's/^[0-9]{2}:[0-9]{2}:[0-9]{2}${eol}//'`" != "" ) then
					printf "Invalid %s%s: %s specified, lenth must be formatted as: hh:mm:ss" "${dashes}" "${option}" "${value}";
					breaksw;
				endif
			
				set rtrim="${value}";
				breaksw;
			
			case "ltrim":
				if( "`printf '%s' '${value}' | sed -r 's/^[0-9]{2}:[0-9]{2}:[0-9]{2}${eol}//'`" != "" ) then
					printf "Invalid %s%s: %s specified, lenth must be formatted as: hh:mm:ss" "${dashes}" "${option}" "${value}";
					breaksw;
				endif
			
				set ltrim="${value}";
				breaksw;
			
			case "transcode":
				set transcode;
				breaksw;
			
			case "force":
				set force;
				breaksw;
			
			case "combine":
				set combine;
				breaksw;
			
			case "h":
			case "help":
				goto usage;
				breaksw;
			
			case "verbose":
				if(! ${?be_verbose} ) set be_verbose;
				breaksw;
			
			case "debug":
				if(! ${?debug} ) set debug;
				breaksw;
			
			case "no-re-encode":
				if( ${?re_encode} ) unset re_encode;
				breaksw;
			
			case "re-encode":
				if(! ${?re_encode} ) set re_encode;
				breaksw;
			
			case "enable":
				switch("${value}")
					case "verbose":
						if(! ${?be_verbose} ) set be_verbose;
						breaksw;
					
					case "debug":
						if(! ${?debug} ) set debug;
						breaksw;
					
					case "re-encode":
						if(! ${?re_encode} ) unset re_encode;
						breaksw;
					
					default:
						printf "enabling %s is not supported by %s.  See %s --help\n" "${value}" "${scripts_name}" "${scripts_name}";
						breaksw;
					endsw
				
				breaksw;
			
			case "disable":
				switch("${value}")
					case "verbose":
						if( ${?be_verbose} ) unset be_verbose;
						breaksw;
					
					case "debug":
						if( ${?debug} ) unset debug;
						breaksw;
					
					case "re-encode":
						if( ${?re_encode} ) set re_encode;
						breaksw;
					
					default:
						printf "disabling %s is not supported by %s.  See %s --help\n" "${value}" "${scripts_name}" "${scripts_name}";
						breaksw;
					endsw
				breaksw;
			
			case "":
				breaksw;
			
			default:
				if( -e "$argv[$arg]" ) then
					if(! ${?filename_list} ) then
						set filename_list="./.${scripts_name}.filenames@`date '+%s'`";
						touch "${filename_list}";
					endif
					printf '%s\n' "$argv[$arg]" >> "${filename_list}";
					continue;
				endif
				
				printf "%s%s is an unsupported option.  See %s -h|--help for more information.\n" "${dashes}" "${option}" "${scripts_name}";
				breaksw;
		endsw
		if( ${?has_value} ) unset has_value;
		unset dashes option value;
	end
	goto main;
#parse_argv

