<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>Glossary (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Glossary">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>
</div>
<style type="text/css">
  #fixunixgb { position: absolute; right: 0px; bottom: 0px; }
  div > div#fixunixgb { position: fixed; }
  pre.fixit { overflow:auto;border-left:1px dashed #000;border-right:1px dashed #000;padding-left:2px; }
</style><!--[if gte IE 5.5]><![if lt IE 7]>
<style type="text/css">
  div#fixunixgb {
  right: auto; bottom: auto;
  left: expression( ( 0 - fixunixgb.offsetWidth + ( document.documentElement.clientWidth ? document.documentElement.clientWidth : document.body.clientWidth ) + ( ignoreMe2 = document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body.scrollLeft ) ) + 'px' );
  top: expression( ( 0 - fixunixgb.offsetHeight + ( document.documentElement.clientHeight ? document.documentElement.clientHeight : document.body.clientHeight ) + ( ignoreMe = document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop ) ) + 'px' );
}
</style>
<![endif]><![endif]-->
<div id="fixunixgb" align=right style="position:fixed; bottom: 5; right: 5; color:black; background-color: white; width: 170px; height: 120px; padding: 5px; z-index:3">
<script language="javascript">
<!--
var state = 'visible';

function gushowhide(layer_ref) {

if (state == 'visible') {
state = 'hidden';
}
else {
state = 'visible';
}
if (document.all) { //IS IE 4 or 5 (or 6 beta)
eval( "document.all." + layer_ref + ".style.visibility = state");
}
if (document.layers) { //IS NETSCAPE 4 or below
document.layers[layer_ref].visibility = state;
}
if (document.getElementById && !document.all) {
maxwell_smart = document.getElementById(layer_ref);
maxwell_smart.style.visibility = state;
}
}
//-->
</script>
<script type="text/javascript"><!--
google_ad_client = "pub-0321943928525350";
/* 160x90, bottomleft fixed */
google_ad_slot = "2032737097";
google_ad_width = 160;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<font size=-1><a href="javascript://" onclick="gushowhide('fixunixgb');">close (x)</a></font>
</div>
</div>
<br>
<center>

<script type="text/javascript"><!--
google_ad_client = "pub-0321943928525350";
//728x90, создано 30.01.08 (main top)
google_ad_slot = "2783893649";
google_ad_width = 728;
google_ad_height = 90;
//--></script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>

&nbsp; &nbsp; &nbsp; &nbsp;

<a href="http://www.internetmap.info/cgi-bin/go.cgi?site_id=49589" target=_blank><img src="http://www.internetmap.info/images/im_88x85.gif" border=0 alt="Internet Map"></a>
<br>

<b><a href="http://www.unix.org.ua/forum/">Do not forget register in our new UNIX and CISCO forum</a></b>

</center>
<p>


<html>
<head>
<title>Glossary (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Glossary">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch33_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part5.htm">Part 5: Reference Material</a></td><td align="right" valign="top" width="172"></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h2>Glossary</h2>

<dl>
<a name="INDEX-5960"></a>
<dt>accessor methods</dt>
<dd>
<p>
A <em class="emphasis">method</em> used to indirectly inspect or update an
<em class="emphasis">object</em>'s state (its <em class="emphasis">instance
variables</em>).
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>actual arguments</dt>
<dd>
<p>
The <em class="emphasis">scalar values</em> that you supply to a
<em class="emphasis">function</em> or <em class="emphasis">subroutine</em> when
you call it.  For instance, when you call
<tt class="literal">power("puff")</tt>, the string
<tt class="literal">"puff"</tt> is the actual argument.  See also
<em class="emphasis">argument</em> and <em class="emphasis">formal
arguments</em>.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>address operator</dt>
<dd>
<p>
Some languages work directly with the memory addresses of values, but
this can be like playing with fire.  Perl provides a set of asbestos
gloves for handling all memory management.  The closest to an address
operator in Perl is the backslash operator, but it gives you a
<em class="emphasis">hard reference</em>, which is much safer than a memory
address.
</p>
</dd>
</dl>


<dl>
<a name="INDEX-5963"></a>
<dt>algorithm</dt>
<dd>
<p>
A well-defined sequence of steps, clearly enough explained that
even a computer could do them.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-5964"></a>
<dt>alias</dt>
<dd>
<p>
A nickname for something, which behaves in all ways as though you'd
used the original name instead of the nickname.  Temporary aliases are
implicitly created in the loop variable for
<tt class="literal">foreach</tt>
loops, in the <tt class="literal">$_</tt> variable for
<tt class="literal">map</tt> or <tt class="literal">grep</tt>
operators, in
<tt class="literal">$a</tt> and <tt class="literal">$b</tt> during
<tt class="literal">sort</tt>'s comparison function, and in each element of
<tt class="literal">@_</tt> for the <em class="emphasis">actual arguments</em> of
a subroutine call.  Permanent aliases are explicitly created in
<em class="emphasis">packages</em> by <em class="emphasis">importing</em>
symbols or by assignment to <em class="emphasis">typeglobs</em>.  Lexically
scoped aliases for package variables are explicitly created by the
<tt class="literal">our</tt> declaration.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>alternatives</dt>
<dd>
<p>
A list of possible choices from which you may select only one, as in
"Would you like door A, B, or C?"  Alternatives in regular expressions
are separated with a single vertical bar: <tt class="literal">|</tt>.
Alternatives in normal Perl expressions are separated with a double
vertical bar: <tt class="literal">||</tt>.  Logical alternatives in
<em class="emphasis">Boolean</em> expressions are separated with either
<tt class="literal">||</tt> or <tt class="literal">or</tt>.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-5966"></a>
<dt>anonymous</dt>
<dd>
<p>
Used to describe a <em class="emphasis">referent</em> that is not directly
accessible through a named <em class="emphasis">variable</em>.  Such a
referent must be indirectly accessible through at least one
<em class="emphasis">hard reference</em>.  When the last hard reference
goes away, the anonymous referent is destroyed without pity.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-5967"></a>
<dt>architecture</dt>
<dd>
<p>
The kind of compluter you're working on, where one "kind" of computer
means all those computers sharing a compatible machine language.  Since
Perl programs are (typically) simple text files, not executable
images, a Perl program is much less sensitive to the architecture it's
running on than programs in other languages, such as C, that are
compiled into machine code.  See also <em class="emphasis">platform</em>
and <em class="emphasis">operating system</em>.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-5968"></a><a name="INDEX-5969"></a>
<dt>argument</dt>
<dd>
<p>
A piece of data supplied to a <em class="emphasis">program</em>,
<em class="emphasis">subroutine</em>, <em class="emphasis">function</em>, or
<em class="emphasis">method</em> to tell it what it's supposed to do.  Also
called a "parameter".
</p>
</dd>
</dl>

<dl>
<a name="INDEX-6047"></a>
<dt>ARGV</dt>
<dd>
<p>
The name of the array containing the <em class="emphasis">argument</em><em class="emphasis">vector</em> from the command line.  If you use the
empty <tt class="literal">&lt;&gt;</tt> operator, <tt class="literal">ARGV</tt> is
the name of both the <em class="emphasis">filehandle</em> used to traverse
the arguments and the <em class="emphasis">scalar</em> containing the
name of the current input file.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-5971"></a>
<dt>arithmetical operator</dt>
<dd>
<p>
A <em class="emphasis">symbol</em> such as <tt class="literal">+</tt> or
<tt class="literal">/</tt> that tells Perl to do the arithmetic you were
supposed to learn in grade school.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-5972"></a>
<dt>array</dt>
<dd>
<p>
An ordered sequence of <em class="emphasis">values</em>, stored such that
you can easily access any of the values using an <em class="emphasis">integer
subscript</em> that specifies the value's
<em class="emphasis">offset</em> in the sequence.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a><a name="INDEX-"></a>
<dt>array context</dt>
<dd>
<p>
An archaic expression for what is more correctly referred to as <em class="emphasis">list
context</em>.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-5976"></A><a name="INDEX-"></a>
<dt>ASCII</dt>
<dd>
<p>
The American Standard Code for Information Interchange (a 7-bit
character set adequate only for poorly representing English text).
Often used loosely to describe the lowest 128 values of the various
ISO-8859-X character sets, a bunch of mutually incompatible 8-bit
codes best described as half ASCII.  See also <em class="emphasis">Unicode</em>.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-5978"></a>
<dt>assertion</dt>
<dd>
<p>
A component of a <em class="emphasis">regular expression</em> that must be
true for the pattern to match but does not necessarily match any
characters itself.  Often used specifically to mean a
<em class="emphasis">zero-width</em> assertion.
</p>
</dd>
</dl>

<dl>
<dt>assignment</dt>
<dd>
<p>
An <em class="emphasis">operator</em> whose assigned mission in life is to
change the value of a <em class="emphasis">variable</em>.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-5979"></a>
<dt>assignment operator</dt>
<dd>
<p>
Either a regular <em class="emphasis">assignment</em>, or a compound
<em class="emphasis">operator</em> composed of an ordinary assignment and
some other operator, that changes the value of a variable in place,
that is, relative to&nbsp;its old value.  For example, <tt class="literal">$a +=
2</tt> adds <tt class="literal">2</tt> to&nbsp;<tt class="literal">$a</tt>.
</p>
</dd>
</dl>

<dl>
<dt>associative array</dt>
<dd>
<p>
See <em class="emphasis">hash</em>.  Please.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-5980"></a>
<dt>associativity</dt>
<dd>
<p>
Determines whether you do the left <em class="emphasis">operator</em> first
or the right <em class="emphasis">operator</em> first when you have "A
<em class="emphasis">operator</em> B <em class="emphasis">operator</em> C" and
the two operators are of the same precedence.  Operators like
<tt class="literal">+</tt> are left associative, while operators like
<tt class="literal">**</tt> are right associative.  See <a href="ch03_01.htm">Chapter 3, "Unary and Binary Operators"</a>, for a list of
operators and their associativity.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-5981"></a>
<dt>asynchronous</dt>
<dd>
<p>
Said of events or activities whose relative temporal ordering is
indeterminate because too many things are going on at once.  Hence,
an asynchronous event is one you didn't know when to expect.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>atom</dt>
<dd>
<p>
A <em class="emphasis">regular expression</em> component potentially
matching a <em class="emphasis">substring</em> containing one or more
characters and treated as an indivisible syntactic unit by any
following <em class="emphasis">quantifier</em>.  (Contrast with an
<em class="emphasis">assertion</em> that matches something of
<em class="emphasis">zero width</em> and may not be quantified.)
</p>
</dd>
</dl>

<dl>
<dt>atomic operation</dt>
<dd>
<p>
When Democritus gave the word "atom" to the indivisible bits of
matter, he meant literally something that could not be cut:
<em class="emphasis">a-</em> (not) + <em class="emphasis">tomos</em> (cuttable).
An atomic operation is an action that can't be interrupted, not one
forbidden in a nuclear-free zone.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>attribute</dt>
<dd>
<p>
A new feature that allows the declaration of
<em class="emphasis">variables</em> and <em class="emphasis">subroutines</em>
with modifiers as in <tt class="literal">sub foo : locked method</tt>.
Also, another name for an <em class="emphasis">instance variable</em> of an
<em class="emphasis">object</em>.
</p>
</dd>
</dl>

<a name="INDEX-5984"></a>
<dl>
<dt>autogeneration</dt>
<dd>
<p>
A feature of <em class="emphasis">operator overloading</em> of
<em class="emphasis">objects</em>, whereby the behavior of certain
<em class="emphasis">operators</em> can be reasonably deduced using more
fundamental operators.  This assumes that the overloaded operators
will often have the same relationships as the regular operators.  See
<a href="ch13_01.htm">Chapter 13, "Overloading"</a>.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-5985"></a>
<dt>autoincrement</dt>
<dd>
<p>
To add one to something automatically, hence the name of the the
<tt class="literal">++</tt> operator.  To instead subtract one from
something automatically is known as an "autodecrement".
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>autoload</dt>
<dd>
<p>
To load on demand.  (Also called "lazy" loading.)  Specifically, to
call an <tt class="literal">AUTOLOAD</tt> subroutine on behalf of an
undefined subroutine.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-5987"></a>
<dt>autosplit</dt>
<dd>
<p>
To split a string automatically, as the <span class="option">-a</span>
<em class="emphasis">switch</em> does when running under <span class="option">-p</span>
or <span class="option">-n</span> in order to emulate <em class="emphasis">awk</em>.  (See
also the <tt class="literal">AutoSplit</tt> module, which has nothing to do
with the <span class="option">-a</span> switch, but a lot to do with autoloading.)
</p>
</dd>
</dl>

<dl>
<a name="INDEX-5988"></a>
<dt>autovivification</dt>
<dd>
<p>
A Greco-Roman word meaning "to bring oneself to life".  In Perl,
storage locations (<em class="emphasis">lvalues</em>) spontaneously
generate themselves as needed, including the creation of any
<em class="emphasis">hard reference</em> values to point to the next level
of storage.  The assignment <tt class="literal">$a[5][5][5][5][5] =
"quintet"</tt> potentially creates five scalar storage
locations, plus four references (in the first four scalar locations)
pointing to four new anonymous arrays (to hold the last four scalar
locations).  But the point of autovivification is that you don't have
to worry about it.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-5989"></a>
<dt>AV</dt>
<dd>
<p>
Short for "array value", which refers to one of Perl's internal data
types that holds an <em class="emphasis">array</em>.  The
<tt class="literal">AV</tt> type is a subclass of <em class="emphasis">SV</em>.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-5990"></a>
<dt>awk</dt>
<dd>
<p>
Descriptive editing term--short for "awkward".  Also coincidentally
refers to a venerable text-processing language from which Perl
derived some of its high-level ideas.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>backreference</dt>
<dd>
<p>
A substring <em class="emphasis">captured</em> by a subpattern within
unadorned parentheses in a <em class="emphasis">regex</em>.  Backslashed
decimal numbers (<tt class="literal">\1</tt>, <tt class="literal">\2</tt>, etc.)
later in the same pattern refer back to the corresponding subpattern
in the current match.  Outside the pattern, the numbered variables
(<tt class="literal">$1</tt>, <tt class="literal">$2</tt>, etc.) continue to refer
to these same values, as long as the pattern was the last successful
match of the current dynamic scope.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>backtracking</dt>
<dd>
<p>
The practice of saying, "If I had to do it all over, I'd do it
differently," and then actually going back and doing it all over
differently.  Mathematically speaking, it's returning from an
unsuccessful recursion on a tree of possibilities.  Perl backtracks
when it attempts to match patterns with a <em class="emphasis">regular
expression</em>, and its earlier attempts don't pan out.
See "The Little Engine That /Could(n't)?/" in
<a href="ch05_01.htm">Chapter 5, "Pattern Matching"</a>.
</p>
</dd>
</dl>


<dl>
<a name="INDEX-"></a>
<dt>backward compatibility</dt>
<dd>
<p>
Means you can still run your old program because we didn't break
any of the features or bugs it was relying on.
</p>
</dd>
</dl>

<a name="INDEX-"></a>

<dl>
<a name="INDEX-"></a>
<dt>bareword</dt>
<dd>
<p>
A word sufficiently ambiguous to be deemed illegal under <tt class="literal">use
strict 'subs'</tt>.  In the absence of that stricture, a bareword
is treated as if quotes were around it.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>base class</dt>
<dd>
<p>
A generic <em class="emphasis">object</em> type; that is, a
<em class="emphasis">class</em> from which other, more specific classes are
derived genetically by <em class="emphasis">inheritance</em>.  Also called
a "superclass" by people who respect their ancestors.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>big-endian</dt>
<dd>
<p>
From Swift: someone who eats eggs big end first.  Also used of
computers that store the most significant <em class="emphasis">byte</em> of
a word at a lower byte address than the least significant byte.  Often
considered superior to little-endian machines.  See also
<em class="emphasis">little-endian</em>.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>binary</dt>
<dd>
<p>
Having to do with numbers represented in base 2.  That means there's
basically two numbers, 0 and 1.  Also used to describe a "non-text
file", presumably because such a file makes full use of all the binary
bits in its bytes.  With the advent of <em class="emphasis">Unicode</em>,
this distinction, already suspect, loses even more of its meaning.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>binary operator</dt>
<dd>
<p>
An <em class="emphasis">operator</em> that takes two <em class="emphasis">operands</em>.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>bind</dt>
<dd>
<p>
To assign a specific <em class="emphasis">network address</em> to a
<em class="emphasis">socket</em>.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>bit</dt>
<dd>
<p>
An integer in the range from 0 to 1, inclusive.  The smallest possible
unit of information storage.  An eighth of a
<em class="emphasis">byte</em> or of a dollar.  (The term
"Pieces of Eight" comes from being able to split the old Spanish
dollar into 8 bits, each of which still counted for money.  That's why
a 25-cent piece today is still "two bits".)
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>bit shift</dt>
<dd>
<p>
The movement of bits left or right in a computer word, which has the
effect of multiplying or dividing by a power of 2.
</p>
</dd>
</dl>

<dl>
<dt>bit string</dt>
<dd>
<p>
A sequence of <em class="emphasis">bits</em> that is actually being
thought of as a sequence of bits, for once.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>bless</dt>
<dd>
<p>
In corporate life, to grant official approval to a thing, as in, "The
VP of Engineering has blessed our WebCruncher project." Similarly in
Perl, to grant official approval to a <em class="emphasis">referent</em> so
that it can function as an <em class="emphasis">object</em>, such as a
WebCruncher object.  See the <tt class="literal">bless</tt> function in
<a href="ch29_01.htm">Chapter 29, "Functions"</a>.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<a name="INDEX-"></a>
<dt>block</dt>
<dd>
<p>
What a <em class="emphasis">process</em> does when it has to wait for something:
"My process blocked waiting for the disk."  As an unrelated noun, it
refers to a large chunk of data, of a size that the <em class="emphasis">operating
system</em> likes to deal with (normally a power of two such as
512 or 8192).  Typically refers to a chunk of data
that's coming from or going to a disk file.
</p>
</dd>
</dl>

<dl>
<dt>BLOCK</dt>
<dd>
<p>
A syntactic construct consisting of a sequence of Perl
<em class="emphasis">statements</em> that is delimited by braces.  The
<tt class="literal">if</tt> and <tt class="literal">while</tt> statements are
defined in terms of <em class="replaceable">BLOCK</em>s, for
instance.  Sometimes we also say "block" to mean a lexical scope; that
is, a sequence of statements that act like a
<em class="replaceable">BLOCK</em>, such as within an <tt class="literal">eval</tt>
or a file, even though the statements aren't delimited by braces.
</p>
</dd>
</dl>

<a name="INDEX-"></a>
<dl>
<dt>block buffering</dt>
<dd>
<p>
A method of making input and output efficient by passing one
<em class="emphasis">block</em> at a time.  By default, Perl does block
buffering to disk files.  See <em class="emphasis">buffer</em> and
<em class="emphasis">command buffering</em>.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>Boolean</dt>
<dd>
<p>
A value that is either <em class="emphasis">true</em> or <em class="emphasis">false</em>.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>Boolean context</dt>
<dd>
<p>
A special kind of <em class="emphasis">scalar context</em> used in
conditionals to decide whether the <em class="emphasis">scalar value</em>
returned by an expression is <em class="emphasis">true</em> or
<em class="emphasis">false</em>.  Does not evaluate as either a string or a
number.  See <em class="emphasis">context</em>.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>breakpoint</dt>
<dd>
<p>
A spot in your program where you've told the debugger to stop
<em class="emphasis">execution</em> so you can poke around and see whether
anything is wrong yet.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>broadcast</dt>
<dd>
<p>
To send a <em class="emphasis">datagram</em> to multiple destinations
simultaneously.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>BSD</dt>
<dd>
<p>
A psychoactive drug, popular in the 80s, probably developed at
U. C. Berkeley or thereabouts.  Similar in many ways to the
prescription-only medication called "System V", but infinitely more
useful.  (Or, at least, more fun.)  The full chemical name is "Berkeley
Standard Distribution".
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a><a name="INDEX-"></a>
<dt>bucket</dt>
<dd>
<p>
A location in a <em class="emphasis">hash table</em> containing
(potentially) multiple entries whose keys "hash" to the same hash
value according to its hash function.  (As internal policy, you don't
have to worry about it, unless you're into internals, or policy.)
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>buffer</dt>
<dd>
<p>
A temporary holding location for data.  <em class="emphasis">Block
buffering</em> means that the data is passed on to its
destination whenever the buffer is full.  <em class="emphasis">Line
buffering</em> means that it's passed on whenever a complete
line is received.  <em class="emphasis">Command buffering</em> means that
it's passed every time you do a <tt class="literal">print</tt> command (or
equivalent).  If your output is unbuffered, the system processes it
one byte at a time without the use of a holding area.  This can be
rather inefficient.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>built-in</dt>
<dd>
<p>
A <em class="emphasis">function</em> that is predefined in the language.
Even when hidden by <em class="emphasis">overriding</em>, you can always
get at a built-in function by <em class="emphasis">qualifying</em> its name
with the <tt class="literal">CORE::</tt> pseudo-package.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>bundle</dt>
<dd>
<p>
A group of related modules on <em class="emphasis">CPAN</em>.  (Also,
sometimes refers to a group of command-line switches grouped into
one <em class="emphasis">switch cluster</em>.)
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>byte</dt>
<dd>
<p>
A piece of data worth eight <em class="emphasis">bits</em> in most places.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>bytecode</dt>
<dd>
<p>
A pidgin-like language spoken among 'droids when they don't wish to
reveal their orientation (see <em class="emphasis">endian</em>).  Named
after some similar languages spoken (for similar reasons) between
compilers and interpreters in the late 20th century.  These languages
are characterized by representing everything as a
non-architecture-dependent sequence of bytes.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>C</dt>
<dd>
<p>
A language beloved by many for its inside-out
<em class="emphasis">type</em> definitions, inscrutable
<em class="emphasis">precedence</em> rules, and heavy
<em class="emphasis">overloading</em> of the function-call mechanism.
(Well, actually, people first switched to C because they found
lowercase identifiers easier to read than upper.)  Perl is written in
C, so it's not surprising that Perl borrowed a few ideas from it.
</p>
</dd>
</dl>

<dl>
<dt>C preprocessor</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
The typical C compiler's first pass, which processes lines beginning
with <tt class="literal">#</tt> for conditional compilation and macro definition
and does various manipulations of the program text based on the current
definitions.  Also known as <em class="emphasis">cpp</em>(1).
</p>
</dd>
</dl>

<dl>
<dt>call by reference</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
An <em class="emphasis">argument</em>-passing mechanism in which
the <em class="emphasis">formal arguments</em> refer directly to the
<em class="emphasis">actual arguments</em>, and the
<em class="emphasis">subroutine</em> can change the actual arguments by
changing the formal arguments.  That is, the formal argument is an
<em class="emphasis">alias</em> for the actual argument.  See also
<em class="emphasis">call by value</em>.
</p>
</dd>
</dl>

<dl>
<dt>call by value</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
An <em class="emphasis">argument</em>-passing mechanism in which
the <em class="emphasis">formal arguments</em> refer to a copy of the
<em class="emphasis">actual arguments</em>, and the
<em class="emphasis">subroutine</em> cannot change the actual arguments by
changing the formal arguments.  See also <em class="emphasis">call by
reference</em>.
</p>
</dd>
</dl>

<dl>
<dt>callback</dt>
<dd>
<p>
<a name="INDEX-"></a>
A <em class="emphasis">handler</em> that you register with some other part
of your program in the hope that the other part of your program will
<em class="emphasis">trigger</em> your handler when some event of interest
transpires.
</p>
</dd>
</dl>

<dl>
<dt>canonical</dt>
<dd>
<p>
<a name="INDEX-"></a>
Reduced to a standard form to facilitate comparison.
</p>
</dd>
</dl>

<dl>
<dt>capturing</dt>
<dd>
<p>
<a name="INDEX-"></a>
The use of parentheses around a <em class="emphasis">subpattern</em> in a
<em class="emphasis">regular expression</em> to store the matched
<em class="emphasis">substring</em> as a
<em class="emphasis">backreference</em>.  (Captured strings are also
returned as a list in <em class="emphasis">list context</em>.)
</p>
</dd>
</dl>

<dl>
<dt>character</dt>
<dd>
<p>
<a name="INDEX-"></a>
A small integer representative of a unit of orthography.  Historically,
characters were usually stored as fixed-width integers (typically in a
byte, or maybe two, depending on the character set), but with the advent
of UTF-8, characters are often stored in a variable number of bytes
depending on the size of the integer that represents the character.  Perl
manages this transparently for you, for the most part.
</p>
</dd>
</dl>

<dl>
<dt>character class</dt>
<dd>
<p>
<a name="INDEX-"></a>
A square-bracketed list of characters used in a <em class="emphasis">regular
expression</em> to indicate that any character of the set may
occur at a given point.  Loosely, any predefined set of characters so
used.
</p>
</dd>
</dl>

<dl>
<dt>character property</dt>
<dd>
<p>
<a name="INDEX-"></a>
A predefined <em class="emphasis">character class</em> matchable by the
<tt class="literal">\p</tt><em class="emphasis">metasymbol</em>.  Many standard
properties are defined for <em class="emphasis">Unicode</em>.
</p>
</dd>
</dl>

<dl>
<dt>circumfix operator</dt>
<dd>
<p>
<a name="INDEX-"></a>
An <em class="emphasis">operator</em> that surrounds its
<em class="emphasis">operand</em>, like the angle operator, or parentheses,
or a hug.
</p>
</dd>
</dl>

<dl>
<dt>class</dt>
<dd>
<p>
<a name="INDEX-"></a>
A user-defined <em class="emphasis">type</em>, implemented in Perl via a
<em class="emphasis">package</em> that provides (either directly or by
inheritance) <em class="emphasis">methods</em> (that is,
<em class="emphasis">subroutines</em>) to handle
<em class="emphasis">instances</em> of the class (its
<em class="emphasis">objects</em>).  See also
<em class="emphasis">inheritance</em>.
</p>
</dd>
</dl>

<dl>
<dt>class method</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
A <em class="emphasis">method</em> whose <em class="emphasis">invocant</em> is a
<em class="emphasis">package</em> name, not an <em class="emphasis">object</em>
reference.  A method associated with the class as a whole.
</p>
</dd>
</dl>

<dl>
<dt>client</dt>
<dd>
<p>
<a name="INDEX-"></a>
In networking, a <em class="emphasis">process</em> that initiates contact
with a <em class="emphasis">server</em> process in order to exchange data
and perhaps receive a service.
</p>
</dd>
</dl>

<dl>
<dt>cloister</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
A <em class="emphasis">cluster</em> used to restrict the scope of a
<em class="emphasis">regular expression modifier</em>.
</p>
</dd>
</dl>

<dl>
<dt>closure</dt>
<dd>
<p>
<a name="INDEX-"></a>
An <em class="emphasis">anonymous</em> subroutine that, when a reference
to it is generated at run time, keeps track of the identities of
externally visible <em class="emphasis">lexical variables</em> even after
those lexical variables have supposedly gone out of
<em class="emphasis">scope</em>.  They're called "closures" because this
sort of behavior gives mathematicians a sense of closure.
</p>
</dd>
</dl>

<dl>
<dt>cluster</dt>
<dd>
<p>
A parenthesized <em class="emphasis">subpattern</em> used to group parts
of a <em class="emphasis">regular expression</em>
into a single <em class="emphasis">atom</em>.
</p>
</dd>
</dl>

<dl>
<dt>CODE</dt>
<dd>
<p>
The word returned by the <tt class="literal">ref</tt> function when you apply it to
a reference to a subroutine.  See also <em class="emphasis">CV</em>.
</p>
</dd>
</dl>

<dl>
<dt>code generator</dt>
<dd>
<p>
<a name="INDEX-"></a>
A system that writes code for you in a low-level language, such as code
to implement the&nbsp;backend of a compiler.  See <em class="emphasis">program
generator</em>.
</p>
</dd>
</dl>

<dl>
<dt>code subpattern</dt>
<dd>
<p>
<a name="INDEX-"></a>
A <em class="emphasis">regular expression</em> subpattern whose real
purpose is to execute some Perl code, for example, the
<tt class="literal">(?{...})</tt> and <tt class="literal">(??{...})</tt>
subpatterns.
</p>
</dd>
</dl>

<dl>
<dt>collating sequence</dt>
<dd>
<p>
<a name="INDEX-"></a>
The order into which <em class="emphasis">characters</em> sort.  This is
used by <em class="emphasis">string</em> comparison routines to decide, for
example, where in this glossary to put "collating sequence".
</p>
</dd>
</dl>

<dl>
<dt>command</dt>
<dd>
<p>
<a name="INDEX-"></a>
In <em class="emphasis">shell</em> programming, the syntactic combination
of a program name and its arguments.  More loosely, anything you type
to a shell (a command interpreter) that starts it doing something.
Even more loosely, a Perl <em class="emphasis">statement</em>, which might
start with a <em class="emphasis">label</em> and typically ends with a
semicolon.
</p>
</dd>
</dl>

<a name="INDEX-"></a>
<dl>
<dt>command buffering</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
A mechanism in Perl that lets you store up the output of each Perl
<em class="emphasis">command</em> and then flush it out as a single request
to the <em class="emphasis">operating system</em>.  It's enabled by setting
the <tt class="literal">$|</tt> (<tt class="literal">$AUTOFLUSH</tt>) variable to
a true value.  It's used when you don't want data sitting around not
going where it's supposed to, which may happen because the default on
a <em class="emphasis">file</em> or <em class="emphasis">pipe</em> is to use
<em class="emphasis">block buffering</em>.
</p>
</dd>
</dl>

<dl>
<dt>command name</dt>
<dd>
<p>
T<a name="INDEX-"></a>
he name of the program currently executing, as typed on the command
line.  In C, the <em class="emphasis">command</em> name is passed to the
program as the first command-line argument.  In Perl, it comes in
separately as <tt class="literal">$0</tt>.
</p>
</dd>
</dl>

<dl>
<dt>command-line arguments</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
The <em class="emphasis">values</em> you supply along with a program name
when you tell a <em class="emphasis">shell</em> to execute a
<em class="emphasis">command</em>.  These values are passed to a Perl
program through <tt class="literal">@ARGV</tt>.
</p>
</dd>
</dl>

<dl>
<dt>comment</dt>
<dd>
<p>
<a name="INDEX-"></a>
A remark that doesn't affect the meaning of the program.  In Perl, a
comment is introduced by a <tt class="literal">#</tt> character and
continues to the end of the line.
</p>
</dd>
</dl>

<dl>
<dt>compilation unit</dt>
<dd>
<p>
<a name="INDEX-"></a>
The <em class="emphasis">file</em> (or <em class="emphasis">string</em>, in the case of <tt class="literal">eval</tt>) that is currently being
compiled.
</p>
</dd>
</dl>

<dl>
<dt>compile phase</dt>
<dd>
<p>
<a name="INDEX-"></a>
Any time before Perl starts running your main program.  See also
<em class="emphasis">run phase</em>.  Compile phase is mostly spent in
<em class="emphasis">compile time</em>, but may also be spent in
<em class="emphasis">run time</em> when <tt class="literal">BEGIN</tt> blocks,
<tt class="literal">use</tt> declarations, or constant subexpressions are
being evaluated.  The startup and import code of any
<tt class="literal">use</tt> declaration is also run during compile phase.
</p>
</dd>
</dl>

<dl>
<dt>compile time</dt>
<dd>
<p>
<a name="INDEX-"></a>
The time when Perl is trying to make sense of your code, as opposed
to when it thinks it knows what your code means and is merely trying
to do what it thinks your code says to do, which is <em class="emphasis">run
time</em>.
</p>
</dd>
</dl>

<dl>
<dt>compiler</dt>
<dd>
<p>
<a name="INDEX-"></a>
Strictly speaking, a program that munches up another program and spits
out yet another file containing the program in a "more executable"
form, typically containing native machine instructions.  The
<em class="emphasis">perl</em> program is not a compiler by this
definition, but it does contain a kind of compiler that takes a
program and turns it into a more executable form (<em class="emphasis">syntax
trees</em>) within the <em class="emphasis">perl</em> process itself,
which the <em class="emphasis">interpreter</em> then interprets.  There
are, however, extension <em class="emphasis">modules</em> to get Perl to
act more like a "real" compiler.  See <a href="ch18_01.htm">Chapter 18, "Compiling"</a>.
</p>
</dd>
</dl>

<dl>
<dt>composer</dt>
<dd>
<p>
<a name="INDEX-"></a>
A "constructor" for a <em class="emphasis">referent</em> that isn't really
an <em class="emphasis">object</em>, like an anonymous array or a hash
(or a sonata, for that matter).  For example, a pair of braces
acts as a composer for a hash, and a pair of brackets acts as a
composer for an array.  See the section "Creating References" in
<a href="ch08_01.htm">Chapter 8, "References"</a>.
</p>
</dd>
</dl>

<dl>
<dt>concatenation</dt>
<dd>
<p>
<a name="INDEX-"></a>
The process of gluing one cat's nose to another cat's tail.
Also, a similar operation on two <em class="emphasis">strings</em>.
</p>
</dd>
</dl>

<dl>
<dt>conditional</dt>
<dd>
<p>
Something "iffy".  See <em class="emphasis">Boolean context</em>.
</p>
</dd>
</dl>

<dl>
<dt>connection</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
In telephony, the temporary electrical circuit between the caller's
and the callee's phone.  In networking, the same kind of temporary
circuit between a <em class="emphasis">client</em> and a <em class="emphasis">server</em>.
</p>
</dd>
</dl>

<dl>
<dt>construct</dt>
<dd>
<p>
As a noun, a piece of syntax made up of smaller pieces.  As a transitive
verb, to create an <em class="emphasis">object</em> using a <em class="emphasis">constructor</em>.
</p>
</dd>
</dl>

<dl>
<dt>constructor</dt>
<dd>
<p>
<a name="INDEX-"></a>
Any <em class="emphasis">class method</em>, <em class="emphasis">instance method</em>, or <em class="emphasis">subroutine</em> that
composes, initializes, blesses, and returns an <em class="emphasis">object</em>.  Sometimes
we use the term loosely to mean a <em class="emphasis">composer</em>.
</p>
</dd>
</dl>

<dl>
<dt>context</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a><a name="INDEX-"></a><a name="INDEX-"></a><a name="INDEX-"></a><a name="INDEX-"></a>
The surroundings, or environment.  The context given by the
surrounding code determines what kind of data a particular
<em class="emphasis">expression</em> is expected to return.  The three
primary contexts are <em class="emphasis">list context</em>,
<em class="emphasis">scalar context</em>, and <em class="emphasis">void
context</em>.  Scalar context is sometimes subdivided into
<em class="emphasis">Boolean context</em>, <em class="emphasis">numeric
context</em>, <em class="emphasis">string context</em>, and
<em class="emphasis">void context</em>.  There's
also a "don't care" context (which is dealt with in <a href="ch02_01.htm">Chapter 2, "Bits and Pieces"</a>, if you care).
</p>
</dd>
</dl>

<dl>
<dt>continuation</dt>
<dd>
<p>
<a name="INDEX-"></a>
The treatment of more than one physical <em class="emphasis">line</em> as a
single logical line.  <em class="emphasis">Makefile</em> lines are
continued by putting a backslash before the
<em class="emphasis">newline</em>.  Mail headers as defined by RFC 822 are
continued by putting a space or tab <em class="emphasis">after</em> the
newline.  In general, lines in Perl do not need any form of
continuation mark, because <em class="emphasis">whitespace</em> (including
newlines) is gleefully ignored.  Usually.
</p>
</dd>
</dl>

<dl>
<dt>core dump</dt>
<dd>
<p>
<a name="INDEX-"></a>
The corpse of a <em class="emphasis">process</em>, in the form of a file
left in the <em class="emphasis">working directory</em> of the process,
usually as a result of certain kinds of fatal error.
</p>
</dd>
</dl>

<dl>
<dt>CPAN</dt>
<dd>
<p>
<a name="INDEX-"></a>
The Comprehensive Perl Archive Network.  (See the Preface and
<a href="ch22_01.htm">Chapter 22, "CPAN"</a>, for details.)
</p>
</dd>
</dl>

<dl>
<dt>cracker</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
Someone who breaks security on computer systems.  A cracker may be a true
<em class="emphasis">hacker</em> or only a <em class="emphasis">script kiddie</em>.
</p>
</dd>
</dl>

<dl>
<dt>current package</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
The <em class="emphasis">package</em> in which the current statement is
compiled.  Scan backwards in the text of your program through the current
<em class="emphasis">lexical scope</em> or any enclosing lexical scopes
till you find a package declaration.  That's your current package
name.
</p>
</dd>
</dl>

<dl>
<dt>current working directory</dt>
<dd>
<p>
See <em class="emphasis">working directory</em>.
</p>
</dd>
</dl>

<dl>
<dt>currently selected output channel</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
The last <em class="emphasis">filehandle</em> that was designated with <tt class="literal">select(FILEHANDLE)</tt>;
<tt class="literal">STDOUT</tt>, if no filehandle has been selected.
</p>
</dd>
</dl>

<dl>
<dt>CV</dt>
<dd>
<p>
<a name="INDEX-"></a>
An internal "code value" typedef, holding a <em class="emphasis">subroutine</em>.  The <tt class="literal">CV</tt> type is a subclass of <em class="emphasis">SV</em>.
</p>
</dd>
</dl>

<dl>
<dt>dangling statement</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
A bare, single <em class="emphasis">statement</em>, without any braces, hanging off an
<tt class="literal">if</tt> or <tt class="literal">while</tt> conditional.  C allows them.  Perl doesn't.
</p>
</dd>
</dl>

<dl>
<dt>data structure</dt>
<dd>
<p>
<a name="INDEX-"></a>
How your various pieces of data relate to each other and what shape
they make when you put them all together, as in a rectangular table
or a triangular-shaped tree.
</p>
</dd>
</dl>

<dl>
<dt>data type</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
A set of possible values, together with all the operations that
know how to deal with those values.  For example, a numeric data
type has a certain set of numbers that you can work with and various
mathematical operations that you can do on the numbers but would
make little sense on, say, a string such as
<tt class="literal">"Kilroy"</tt>.  Strings have their own operations,
such as <em class="emphasis">concatenation</em>.  Compound
types made of a number of smaller pieces generally have operations
to compose and decompose them, and perhaps to rearrange them.
<em class="emphasis">Objects</em> that model things in the real world
often have operations that correspond to real activities.  For
instance, if you model an elevator, your elevator object might
have an <tt class="literal">open_door()</tt><em class="emphasis">method</em>.
</p>
</dd>
</dl>

<dl>
<dt>datagram</dt>
<dd>
<p>
<a name="INDEX-"></a>
A packet of data, such as a <em class="emphasis">UDP</em> message, that
(from the viewpoint of the programs involved) can be sent
independently over the network.  (In fact, all packets are sent
independently at the <em class="emphasis">IP</em> level, but
<em class="emphasis">stream</em> protocols such as <em class="emphasis">TCP</em>
hide this from your program.)
</p>
</dd>
</dl>

<dl>
<dt>DBM</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
Stands for "Data Base Management" routines, a set of routines that
emulate an <em class="emphasis">associative array</em> using disk files.
The routines use a dynamic hashing scheme to locate any entry with
only two disk accesses.  DBM files allow a Perl program to keep a
persistent <em class="emphasis">hash</em> across multiple invocations.  You
can <tt class="literal">tie</tt> your hash variables to various DBM
implementations--see <em class="emphasis">AnyDBM_File</em>(3) and
the entry on <tt class="literal">DB_File</tt> in <a href="ch32_01.htm">Chapter 32, "Standard Modules"</a>.
</p>
</dd>
</dl>

<dl>
<dt>declaration</dt>
<dd>
<p>
<a name="INDEX-"></a>
An <em class="emphasis">assertion</em> that states something exists and
perhaps describes what it's like, without giving any commitment as
to how or where you'll use it.  A declaration is like the part of
your recipe that says, "two cups flour, one large egg, four or
five tadpoles..."  See <em class="emphasis">statement</em>
for its opposite.  Note that some declarations also function as
statements.  Subroutine declarations also act as definitions if
a body is supplied.
</p>
</dd>
</dl>

<dl>
<dt>decrement</dt>
<dd>
<p>
<a name="INDEX-"></a>
To subtract a value from a variable, as in "decrement <tt class="literal">$x</tt>"
(meaning to remove 1 from its value) or "decrement <tt class="literal">$x</tt> by 3".
</p>
</dd>
</dl>

<dl>
<dt>default</dt>
<dd>
<p>
<a name="INDEX-"></a>
A <em class="emphasis">value</em> chosen for you if you don't supply a
value of your own.
</p>
</dd>
</dl>

<dl>
<dt>defined</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
Having a meaning.  Perl thinks that some of the things people try to
do are devoid of meaning, in particular, making use of variables that
have never been given a <em class="emphasis">value</em> and performing
certain operations on data that isn't there.  For example, if you try
to read data past the end of a file, Perl will hand you back an
undefined value.  See also <em class="emphasis">false</em>, and the
<tt class="literal">defined</tt> operator in <a href="ch29_01.htm">Chapter 29, "Functions"</a>.
</p>
</dd>
</dl>

<dl>
<dt>delimiter</dt>
<dd>
<p>
<a name="INDEX-"></a>
A <em class="emphasis">character</em> or <em class="emphasis">string</em> that
sets bounds to an arbitrarily-sized textual object, not to be confused
with a <em class="emphasis">separator</em> or
<em class="emphasis">terminator</em>.  "To delimit" really just means "to
surround" or "to enclose" (like these parentheses are doing).
</p>
</dd>
</dl>

<dl>
<dt>dereference</dt>
<dd>
<p>
<a name="INDEX-"></a>
A fancy computer science term meaning "to follow a
<em class="emphasis">reference</em> to what it
points to".  The "de" part of it refers to the fact that you're
taking away one level of <em class="emphasis">indirection</em>.
</p>
</dd>
</dl>

<dl>
<dt>derived class</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
A <em class="emphasis">class</em> that defines some of its
<em class="emphasis">methods</em> in terms of a more generic
class, called a <em class="emphasis">base class</em>.  Note that classes
aren't classified
exclusively into base classes or derived classes: a class can function
as both a derived class and a base class simultaneously, which is kind
of classy.
</p>
</dd>
</dl>

<dl>
<dt>descriptor</dt>
<dd>
<p>
See <em class="emphasis">file descriptor</em>.
<a name="INDEX-"></a>
</p>
</dd>
</dl>

<dl>
<dt>destroy</dt>
<dd>
<p>
<a name="INDEX-"></a>
To deallocate the memory of a <em class="emphasis">referent</em>
(first triggering its <tt class="literal">DESTROY</tt>
method, if it has one).
</p>
</dd>
</dl>

<dl>
<dt>destructor</dt>
<dd>
<p>
<a name="INDEX-"></a>
A special <em class="emphasis">method</em> that is called when an
<em class="emphasis">object</em> is thinking about
<em class="emphasis">destroying</em> itself.  A Perl program's
<tt class="literal">DESTROY</tt> method doesn't do the actual destruction;
Perl just <em class="emphasis">triggers</em> the method in case the
<em class="emphasis">class</em> wants to do any associated cleanup.
</p>
</dd>
</dl>

<dl>
<dt>device</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
A whiz-bang hardware gizmo (like a disk or tape drive or a modem or a
joystick or a mouse) attached to your computer, that the
<em class="emphasis">operating system</em> tries to make look like a
<em class="emphasis">file</em> (or a bunch of files).  Under Unix, these
fake files tend to live in the <em class="emphasis">/dev</em> directory.
</p>
</dd>
</dl>

<dl>
<dt>directive</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
A <em class="emphasis">pod</em> directive.  See
<a href="ch26_01.htm">Chapter 26, "Plain Old Documentation"</a>.
</p>
</dd>
</dl>

<dl>
<dt>directory</dt>
<dd>
<p>
A special file that contains other files.  Some <em class="emphasis">operating systems</em> call
these "folders", "drawers", or "catalogs".
</p>
</dd>
</dl>

<dl>
<dt>directory handle</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
A name that represents a particular instance of opening a directory
to read it, until you close it.  See the <tt class="literal">opendir</tt> function.
</p>
</dd>
</dl>

<dl>
<dt>dispatch</dt>
<dd>
<p>
To send something to its correct destination.  Often used
metaphorically to indicate a transfer of programmatic control to a
destination selected algorithmically, often by lookup in a table of
function <em class="emphasis">references</em> or, in the case of object <em class="emphasis">methods</em>, by traversing
the inheritance tree looking for the most specific definition for
the method.
</p>
</dd>
</dl>

<dl>
<dt>distribution</dt>
<dd>
<p>
A standard, bundled release of a system of software.  The default usage
implies source code is included.  If that is not the case, it will
be called a "binary-only" distribution.
</p>
</dd>
</dl>

<dl>
<dt>dweomer</dt>
<dd>
<p>
<a name="INDEX-"></a>
An enchantment, illusion, phantasm, or jugglery.  Said when Perl's
magical <em class="emphasis">dwimmer</em> effects don't do what you expect,
but rather seem to be the product of arcane dweomercraft, sorcery, or
wonder working.  [From Old English]
</p>
</dd>
</dl>

<dl>
<dt>dwimmer</dt>
<dd>
<p>
<a name="INDEX-"></a>
DWIM is an acronym for "Do What I Mean", the principle that something
should just do what you want it to do without an undue amount of fuss.
A bit of code that does "dwimming" is a "dwimmer".  Dwimming can
require a great deal of behind-the-scenes magic, which (if it doesn't
stay properly behind the scenes) is called a <em class="emphasis">dweomer</em>
instead.
</p>
</dd>
</dl>

<dl>
<dt>dynamic scoping</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
Dynamic scoping works over a dynamic scope, making variables visible
throughout the rest of the <em class="emphasis">block</em> in which they
are first used and in any <em class="emphasis">subroutines</em> that are
called by the rest of the block.  Dynamically scoped variables can
have their values temporarily changed (and implicitly restored later)
by a <tt class="literal">local</tt> operator.  (Compare <em class="emphasis">lexical
scoping</em>.)  Used more loosely to mean how a subroutine that
is in the middle of calling another subroutine "contains" that
subroutine at <em class="emphasis">run time</em>.
</p>
</dd>
</dl>

<dl>
<dt>eclectic</dt>
<dd>
<p>
Derived from many sources.  Some would say <em class="emphasis">too</em> many.
</p>
</dd>
</dl>

<dl>
<dt>element</dt>
<dd>
<p>
<a name="INDEX-"></a>
A basic building block.  When you're talking about an <em class="emphasis">array</em>, it's one
of the items that make up the array.
</p>
</dd>
</dl>

<dl>
<dt>embedding</dt>
<dd>
<p>
<a name="INDEX-"></a>
When something is contained in something else, particularly when that
might be considered surprising: "I've embedded a complete Perl
interpreter in my editor!"
</p>
</dd>
</dl>

<dl>
<dt>empty subclass test</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
The notion that an empty <em class="emphasis">derived class</em> should behave exactly like its
<em class="emphasis">base class</em>.
</p>
</dd>
</dl>

<dl>
<dt>en passant</dt>
<dd>
<p>
<a name="INDEX-"></a>
When you change a <em class="emphasis">value</em> as it is being 
copied.  [From French, "in passing",
as in the exotic pawn-capturing maneuver in chess.]
</p>
</dd>
</dl>

<dl>
<dt>encapsulation</dt>
<dd>
<p>
<a name="INDEX-"></a>
The veil of abstraction separating the <em class="emphasis">interface</em>
from the <em class="emphasis">implementation</em> (whether enforced or
not), which mandates that all access to an
<em class="emphasis">object</em>'s state be through
<em class="emphasis">methods</em> alone.
</p>
</dd>
</dl>

<dl>
<dt>endian</dt>
<dd>
<p>
See <em class="emphasis">little-endian</em> and <em class="emphasis">big-endian</em>.
</p>
</dd>
</dl>

<dl>
<dt>environment</dt>
<dd>
<p>
<a name="INDEX-"></a>
The collective set of <em class="emphasis">environment variables</em> your <em class="emphasis">process</em> inherits
from its parent.  Accessed via <tt class="literal">%ENV</tt>.
</p>
</dd>
</dl>

<dl>
<dt>environment variable</dt>
<dd>
<p>
<a name="INDEX-"></a>
A mechanism by which some high-level agent such as a user can pass
its preferences down to its future offspring (child <em class="emphasis">processes</em>,
grandchild processes, great-grandchild processes, and so on).  Each
environment variable is a
<em class="emphasis">key</em>/<em class="emphasis">value</em> pair, like one entry
in a <em class="emphasis">hash</em>.
</p>
</dd>
</dl>

<dl>
<dt>EOF</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a><a name="INDEX-"></a>
End of File.  Sometimes used metaphorically as the terminating
string of a <em class="emphasis">here document</em>.
</p>
</dd>
</dl>

<dl>
<dt>errno</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a><a name="INDEX-"></a>
The error number returned by a <em class="emphasis">syscall</em> when it fails.  Perl
refers to the error by the name <tt class="literal">$!</tt> (or <tt class="literal">$OS_ERROR</tt> if you
use the English module).
</p>
</dd>
</dl>

<dl>
<dt>error</dt>
<dd>
<p>
See <em class="emphasis">exception</em> or <em class="emphasis">fatal error</em>.
</p>
</dd>
</dl>

<dl>
<dt>escape sequence</dt>
<dd>
<p>
See <em class="emphasis">metasymbol</em>.
</p>
</dd>
</dl>

<dl>
<dt>exception</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
A fancy term for an error.  See <em class="emphasis">fatal error</em>.
</p>
</dd>
</dl>

<dl>
<dt>exception handling</dt>
<dd>
<p>
The way a program responds to an error.
The exception handling mechanism in Perl is the <tt class="literal">eval</tt> operator.
</p>
</dd>
</dl>

<dl>
<dt>exec</dt>
<dd>
<p>
<a name="INDEX-"></a>
To throw away the current <em class="emphasis">process</em>'s program
and replace it with another without exiting the process or relinquishing
any resources held (apart from the old memory image).
</p>
</dd>
</dl>

<dl>
<dt>executable file</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
A <em class="emphasis">file</em> that is specially marked to tell the <em class="emphasis">operating system</em>
that it's okay to run this file as a program.  Usually shortened to
"executable".
</p>
</dd>
</dl>

<dl>
<dt>execute</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
To run a <em class="emphasis">program</em> or
<em class="emphasis">subroutine</em>.  (Has nothing to do with the
<tt class="literal">kill</tt> built-in, unless you're trying to run
a <em class="emphasis">signal handler</em>.)
</p>
</dd>
</dl>

<dl>
<dt>execute bit</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
The special mark that tells the operating system it can run this
program.  There are actually three execute bits under Unix, and which
bit gets used depends on whether you own the file singularly,
collectively, or not at all.
</p>
</dd>
</dl>

<dl>
<dt>exit status</dt>
<dd>
<p>
See <em class="emphasis">status</em>.
</p>
</dd>
</dl>

<dl>
<dt>export</dt>
<dd>
<p>
<a name="INDEX-"></a>
To make symbols from a <em class="emphasis">module</em> available for <em class="emphasis">import</em> by other modules.
</p>
</dd>
</dl>

<dl>
<dt>expression</dt>
<dd>
<p>
<a name="INDEX-"></a>
Anything you can legally say in a spot where a <em class="emphasis">value</em> is required.
Typically composed of <em class="emphasis">literals</em>, <em class="emphasis">variables</em>, <em class="emphasis">operators</em>,
<em class="emphasis">functions</em>, and <em class="emphasis">subroutine</em> calls, not necessarily in that order.
</p>
</dd>
</dl>

<dl>
<dt>extension</dt>
<dd>
<p>
<a name="INDEX-"></a>
A Perl module that also pulls in compiled C or C++ code.  More
generally, any experimental option that can be compiled into Perl, such
as multithreading.
</p>
</dd>
</dl>

<dl>
<dt>false</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
In Perl, any value that would look like <tt class="literal">""</tt> or <tt class="literal">"0"</tt> if
evaluated in a string context.  Since undefined values evaluate to
<tt class="literal">""</tt>, all undefined values are false, but not all false values
are undefined.
</p>
</dd>
</dl>

<dl>
<dt>FAQ</dt>
<dd>
<p>
Frequently Asked Question (although not necessarily frequently
answered, especially if the answer appears in the Perl FAQ
shipped standard with Perl).
</p>
</dd>
</dl>

<dl>
<dt>fatal error</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a><a name="INDEX-"></a>
An uncaught <em class="emphasis">exception</em>, which causes termination
of the <em class="emphasis">process</em> after printing a message on your
<em class="emphasis">standard error</em> stream.  Errors that happen inside
an <tt class="literal">eval</tt> are not fatal.  Instead, the
<tt class="literal">eval</tt> terminates after placing the exception message
in the <tt class="literal">$@</tt> (<tt class="literal">$EVAL_ERROR</tt>)
variable.  You can try to provoke a fatal error with the
<tt class="literal">die</tt>
operator (known as throwing or raising an exception), but this may be
caught by a dynamically enclosing <tt class="literal">eval</tt>.  If not
caught, the <tt class="literal">die</tt> becomes a fatal error.
</p>
</dd>
</dl>

<dl>
<dt>field</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a><a name="INDEX-"></a>
A single piece of numeric or string data that is part of a longer
<em class="emphasis">string</em>, <em class="emphasis">record</em>, or <em class="emphasis">line</em>.  Variable-width fields are usually
split up by <em class="emphasis">separators</em> (so use <tt class="literal">split</tt> to extract the fields),
while fixed-width fields are usually at fixed positions (so use
<tt class="literal">unpack</tt>).  <em class="emphasis">Instance variables</em> are also known as "fields".
</p>
</dd>
</dl>

<dl>
<dt>FIFO</dt>
<dd>
<p>
<a name="INDEX-"></a>
First In, First Out.  See also <em class="emphasis">LIFO</em>.  Also,
a nickname for a <em class="emphasis">named pipe</em>.
</p>
</dd>
</dl>

<dl>
<dt>file</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
A named collection of data, usually stored on disk in a
<em class="emphasis">directory</em> in a <em class="emphasis">filesystem</em>.
Roughly like a document, if you're into office metaphors.  In modern
filesystems, you can actually give a file more than one name.  Some
files have special properties, like directories and devices.
</p>
</dd>
</dl>

<dl>
<dt>file descriptor</dt>
<dd>
<p>
<a name="INDEX-"></a>
The little number the <em class="emphasis">operating system</em> uses to
keep track of which opened <em class="emphasis">file</em> you're talking
about.  Perl hides the file descriptor inside a <em class="emphasis">standard
I/O</em> stream and then attaches the stream to a
<em class="emphasis">filehandle</em>.
</p>
</dd>
</dl>

<dl>
<dt>file test operator</dt>
<dd>
<p>
<a name="INDEX-"></a>
A built-in unary operator that you use to determine whether something
is <em class="emphasis">true</em> about a file, such as <tt class="literal">-o $filename</tt> to test whether
you're the owner of the file.
</p>
</dd>
</dl>

<dl>
<dt>fileglob</dt>
<dd>
<p>
A "wildcard" match on <em class="emphasis">filenames</em>.  See the <tt class="literal">glob</tt> function.
</p>
</dd>
</dl>

<dl>
<dt>filehandle</dt>
<dd>
<p>
<a name="INDEX-"></a>
An identifier (not necessarily related to the real name of a file)
that represents a particular instance of opening a file until you
close it.  If you're going to open and close several different
files in succession, it's fine to open each of them with the
same filehandle, so you don't have to write out separate code to
process each file.
</p>
</dd>
</dl>

<dl>
<dt>filename</dt>
<dd>
<p>
<a name="INDEX-"></a>
One name for a file.  This name is listed in a <em class="emphasis">directory</em>, and
you can use it in an <tt class="literal">open</tt> to tell the <em class="emphasis">operating
system</em> exactly which file you want to open, and associate the
file with a <em class="emphasis">filehandle</em> which will carry the subsequent identity of
that file in your program, until you close it.
</p>
</dd>
</dl>

<dl>
<dt>filesystem</dt>
<dd>
<p>
<a name="INDEX-"></a>
A set of <em class="emphasis">directories</em> and <em class="emphasis">files</em> residing on a partition of the
disk.  Sometimes known as a "partition".  You can change the file's
name or even move a file around from directory to directory within
a filesystem without actually moving the file itself, at least under
Unix.
</p>
</dd>
</dl>

<dl>
<dt>filter</dt>
<dd>
<p>
<a name="INDEX-"></a>
A program designed to take a <em class="emphasis">stream</em> of input
and transform it into a stream of output.
</p>
</dd>
</dl>

<dl>
<dt>flag</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
We tend to avoid this term because it means so many things.  It may
mean a command-line <em class="emphasis">switch</em> that takes no argument
itself (such as Perl's <span class="option">-n</span> and <span class="option">-p</span>
flags) or, less frequently, a single-bit indicator (such as the
<tt class="literal">O_CREAT</tt> and <tt class="literal">O_EXCL</tt> flags used in
<tt class="literal">sysopen</tt>).
</p>
</dd>
</dl>

<dl>
<dt>floating point</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
A method of storing numbers in "scientific notation", such that the
precision of the number is independent of its magnitude (the decimal
point "floats").  Perl does its numeric work with floating-point
numbers (sometimes called "floats"), when it can't get away with
using <em class="emphasis">integers</em>.  Floating-point numbers are mere
approximations of real numbers.
</p>
</dd>
</dl>

<dl>
<dt>flush</dt>
<dd>
<p>
<a name="INDEX-"></a>
The act of emptying a <em class="emphasis">buffer</em>, often before it's full.
</p>
</dd>
</dl>

<dl>
<dt>FMTEYEWTK</dt>
<dd>
<p>
<a name="INDEX-"></a>
Far More Than Everything You Ever Wanted To Know.  An exhaustive
treatise on one narrow topic, something of a
super-<em class="emphasis">FAQ</em>.  See Tom for far more.
</p>
</dd>
</dl>

<dl>
<dt>fork</dt>
<dd>
<p>
<a name="INDEX-"></a>
To create a child <em class="emphasis">process</em> identical to the parent
process at its
moment of conception, at least until it gets ideas of its own.
A thread with protected memory.
</p>
</dd>
</dl>

<dl>
<dt>formal arguments</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a><a name="INDEX-"></a>
The generic names by which a <em class="emphasis">subroutine</em> knows its
<em class="emphasis">arguments</em>.  In many languages, formal
arguments are always given individual names, but in Perl, the formal
arguments are just the elements of an array.  The formal arguments to
a Perl program are <tt class="literal">$ARGV[0]</tt>,
<tt class="literal">$ARGV[1]</tt>, and so on.  Similarly, the formal
arguments to a Perl subroutine are <tt class="literal">$_[0]</tt>,
<tt class="literal">$_[1]</tt>, and so on.  You may give the arguments
individual names by assigning the values to a 
<tt class="literal">my</tt> list.  See also <em class="emphasis">actual
arguments</em>.
</p>
</dd>
</dl>

<dl>
<dt>format</dt>
<dd>
<p>
<a name="INDEX-"></a>
A specification of how many spaces and digits and things to put somewhere
so that whatever you're printing comes out nice and pretty.
</p>
</dd>
</dl>

<dl>
<dt>freely available</dt>
<dd>
<p>
Means you don't have to pay money to get it, but the copyright on it may
still belong to someone else (like Larry).
</p>
</dd>
</dl>

<dl>
<dt>freely redistributable</dt>
<dd>
<p>
Means you're not in legal trouble if you give a bootleg copy of it to
your friends and we find out about it.  In fact, we'd rather you gave
a copy to all your friends.
</p>
</dd>
</dl>

<dl>
<dt>freeware</dt>
<dd>
<p>
<a name="INDEX-"></a>
Historically, any software that you give away, particularly if you make
the source code available as well.  Now often called <em class="emphasis">open source
software</em>.  Recently there has been a trend to use the term
in contradistinction to <em class="emphasis">open source software</em>, to refer only to free
software released under the Free Software Foundation's GPL (General
Public License), but this is difficult to justify etymologically.
</p>
</dd>
</dl>

<dl>
<dt>function</dt>
<dd>
<p>
<a name="INDEX-"></a>
Mathematically, a mapping of each of a set of input values to a particular
output value.  In computers, refers to a <em class="emphasis">subroutine</em> or
<em class="emphasis">operator</em> that returns a <em class="emphasis">value</em>.  It may or may not have
input values (called <em class="emphasis">arguments</em>).
</p>
</dd>
</dl>

<dl>
<dt>funny character</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
Someone like Larry, or one of his peculiar friends.  Also refers to the
strange prefixes that Perl requires as noun markers on its variables.
</p>
</dd>
</dl>

<dl>
<dt>garbage collection</dt>
<dd>
<p>
<a name="INDEX-"></a>
A misnamed feature--it should be called, "expecting your mother to pick
up after you".  Strictly speaking, Perl doesn't do this, but it relies on
a reference-counting mechanism to keep things tidy.  However, we rarely
speak strictly and will often refer to the reference-counting scheme
as a form of garbage collection.  (If it's any comfort, when your
interpreter exits, a "real" garbage collector runs to make sure
everything is cleaned up if you've been messy with circular references
and such.)
</p>
</dd>
</dl>

<dl>
<dt>GID</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
Group ID--in Unix, the numeric group ID that the <em class="emphasis">operating
system</em> uses to identify you and members of your <em class="emphasis">group</em>.
</p>
</dd>
</dl>

<dl>
<dt>glob</dt>
<dd>
<p>
<a name="INDEX-"></a>
Strictly, the shell's <tt class="literal">*</tt> character,
which will match a "glob" of
characters when you're trying to generate a list of filenames.  Loosely,
the act of using globs and similar symbols to do pattern matching.
See also <em class="emphasis">fileglob</em> and <em class="emphasis">typeglob</em>.
</p>
</dd>
</dl>

<dl>
<dt>global</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
Something you can see from anywhere, usually used of
<em class="emphasis">variables</em> and
<em class="emphasis">subroutines</em> that are visible everywhere
in your program.  In Perl, only
certain special variables are truly global--most variables (and all
subroutines) exist only in the current
<em class="emphasis">package</em>.  Global variables
can be declared with <tt class="literal">our</tt>.  See 
"Global Declarations" in
<a href="ch04_01.htm">Chapter 4, "Statements and Declarations"</a>.
</p>
</dd>
</dl>

<dl>
<dt>global destruction</dt>
<dd>
<p>
The <em class="emphasis">garbage collection</em> of globals (and the running of any associated
object destructors) that takes place when a Perl <em class="emphasis">interpreter</em> is
being shut down.  Global destruction should not be confused with the
Apocalypse, except perhaps when it should.
</p>
</dd>
</dl>


<dl>
<dt>glue language</dt>
<dd>
<p>
<a name="INDEX-"></a>
A language such as Perl that is good at hooking things together
that weren't intended to be hooked together.
</p>
</dd>
</dl>


<dl>
<dt>granularity</dt>
<dd>
<p>
The size of the pieces you're dealing with, mentally speaking.
</p>
</dd>
</dl>


<dl>
<dt>greedy</dt>
<dd>
<p>
<a name="INDEX-"></a>
A <em class="emphasis">subpattern</em> whose <em class="emphasis">quantifier</em>
wants to match as many things as possible.
</p>
</dd>
</dl>

<dl>
<dt>grep</dt>
<dd>
<p>
<a name="INDEX-"></a>
Originally from the old Unix editor command for "Globally search for
a Regular Expression and Print it", now used in the general
sense of any kind of search, especially text searches.  Perl has a
built-in <tt class="literal">grep</tt> function that searches a list for
elements matching any given criterion, whereas the 
<em class="emphasis">grep</em>(1) program searches for lines
matching a <em class="emphasis">regular expression</em> in one or more files.
</p>
</dd>
</dl>

<dl>
<dt>group</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a><a name="INDEX-"></a>
A set of users of which you are a member.  In some operating
systems (like Unix), you can give certain file access permissions
to other members of your group.
</p>
</dd>
</dl>

<dl>
<dt>GV</dt>
<dd>
<p>
<a name="INDEX-"></a>
An internal "glob value" typedef, holding a <em class="emphasis">typeglob</em>.  The <tt class="literal">GV</tt>
type is a subclass of <em class="emphasis">SV</em>.
</p>
</dd>
</dl>

<dl>
<dt>hacker</dt>
<dd>
<p>
<a name="INDEX-"></a>
Someone who is brilliantly persistent in solving technical problems,
whether these involve golfing, fighting orcs, or programming.  Hacker
is a
neutral term, morally speaking.  Good hackers are not to be
confused with evil <em class="emphasis">crackers</em> or clueless
<em class="emphasis">script kiddies</em>.  If you confuse them, we will
presume that you are either evil or clueless.
</p>
</dd>
</dl>

<dl>
<dt>handler</dt>
<dd>
<p>
<a name="INDEX-"></a>
A <em class="emphasis">subroutine</em> or <em class="emphasis">method</em> that is called by Perl when your program
needs to respond to some internal event, such as a <em class="emphasis">signal</em>, or an
encounter with an operator subject to <em class="emphasis">operator overloading</em>.  See
also <em class="emphasis">callback</em>.
</p>
</dd>
</dl>

<dl>
<dt>hard reference</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a><a name="INDEX-"></a>
A <em class="emphasis">scalar</em><em class="emphasis">value</em> containing
the actual address of a <em class="emphasis">referent</em>,
such that the referent's <em class="emphasis">reference</em> count
accounts for it.  (Some
hard references are held internally, such as the implicit reference
from one of a <em class="emphasis">typeglob</em>'s variable slots to its corresponding
referent.)  A hard reference is different from a <em class="emphasis">symbolic reference</em>.
</p>
</dd>
</dl>

<dl>
<dt>hash</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
An unordered association of <em class="emphasis">key</em>/<em class="emphasis">value</em> pairs, stored such
that you can easily use a string <em class="emphasis">key</em> to look up its associated
data <em class="emphasis">value</em>.  This glossary is like a hash, where the word to be
defined is the key, and the definition is the value.  A hash is
also sometimes septisyllabically called an "associative array",
which is a pretty good reason for simply calling it a "hash" instead.
</p>
</dd>
</dl>

<dl>
<dt>hash table</dt>
<dd>
<p>
A data structure used internally by Perl for implementing associative
arrays (hashes) efficiently.  See also <em class="emphasis">bucket</em>.
</p>
</dd>
</dl>

<dl>
<dt>header file</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a><a name="INDEX-"></a>
A file containing certain required definitions that you must include
"ahead" of the rest of your program to do certain obscure operations.
A C header file has a <em class="emphasis">.h</em> extension.  Perl doesn't
really have header files, though historically Perl has sometimes used
translated <em class="emphasis">.h</em> files with a
<em class="emphasis">.ph</em> extension.  See
<tt class="literal">require</tt> in 
<a href="ch29_01.htm">Chapter 29, "Functions"</a>.  (Header files have been superseded
by the <em class="emphasis">module</em> mechanism.)
</p>
</dd>
</dl>

<dl>
<dt>here document</dt>
<dd>
<p>
<a name="INDEX-"></a>
So called because of a similar construct in
<em class="emphasis">shells</em> that pretends that the
<em class="emphasis">lines</em> following the&nbsp;<em class="emphasis">command</em>
are a separate <em class="emphasis">file</em> to be fed to the command, up
to some terminating string.  In Perl, however, it's just a fancy form
of quoting.
</p>
</dd>
</dl>

<dl>
<dt>hexadecimal</dt>
<dd>
<p>
<a name="INDEX-"></a>
A number in base 16, "hex" for short.  The digits for 10 through 16
are customarily represented by the letters <tt class="literal">a</tt>
through <tt class="literal">f</tt>.  Hexadecimal constants in Perl start
with <tt class="literal">0x</tt>.  See also the <tt class="literal">hex</tt>
function in <a href="ch29_01.htm">Chapter 29, "Functions"</a>.
</p>
</dd>
</dl>

<dl>
<dt>home directory</dt>
<dd>
<p>
<a name="INDEX-"></a>
The directory you are put into when you log in.  On a Unix system, the
name is often placed into <tt class="literal">$ENV{HOME}</tt> or
<tt class="literal">$ENV{LOGDIR}</tt> by <em class="emphasis">login</em>, but you
can also find it with
<tt class="literal">(getpwuid($&lt;))[7]</tt>.  (Some
platforms do not have a concept of a home directory.)
</p>
</dd>
</dl>

<dl>
<dt>host</dt>
<dd>
<p>
<a name="INDEX-"></a>
The computer on which a program or other data resides.
</p>
</dd>
</dl>

<dl>
<dt>hubris</dt>
<dd>
<p>
<a name="INDEX-"></a>
Excessive pride, the sort of thing Zeus zaps you for.  Also the quality
that makes you write (and maintain) programs that other people won't
want to say bad things about.  Hence, the third great virtue of a
programmer.  See also <em class="emphasis">laziness</em> and <em class="emphasis">impatience</em>.
</p>
</dd>
</dl>

<dl>
<dt>HV</dt>
<dd>
<p>
<a name="INDEX-"></a>
Short for a "hash value" typedef, which holds Perl's internal
representation of a hash.  The <tt class="literal">HV</tt> type is a subclass of <em class="emphasis">SV</em>.
</p>
</dd>
</dl>

<dl>
<dt>identifier</dt>
<dd>
<p>
<a name="INDEX-"></a>
A legally formed name for most anything in which a computer program
might be interested.  Many languages (including Perl) allow identifiers
that start with a letter and contain letters and digits.  Perl also
counts the underscore character as a valid letter.  (Perl also has
more complicated names, such as <em class="emphasis">qualified</em> names.)
</p>
</dd>
</dl>

<dl>
<dt>impatience</dt>
<dd>
<p>
<a name="INDEX-"></a>
The anger you feel when the computer is being lazy.  This makes you
write programs that don't just react to your needs, but actually
anticipate them.  Or at least that pretend to.  Hence, the second great
virtue of a programmer.  See also <em class="emphasis">laziness</em> and <em class="emphasis">hubris</em>.
</p>
</dd>
</dl>

<dl>
<dt>implementation</dt>
<dd>
<p>
How a piece of code actually goes about doing its job.  Users of the
code should not count on implementation details staying the same unless
they are part of the published <em class="emphasis">interface</em>.
</p>
</dd>
</dl>

<dl>
<dt>import</dt>
<dd>
<p>
<a name="INDEX-"></a>
To gain access to symbols that are exported from another module.
See <tt class="literal">use</tt> in <a href="ch29_01.htm">Chapter 29, "Functions"</a>.
</p>
</dd>
</dl>

<dl>
<dt>increment</dt>
<dd>
<p>
To increase the value of something by 1 (or by some other number, if
so specified).
</p>
</dd>
</dl>

<dl>
<dt>indexing</dt>
<dd>
<p>
<a name="INDEX-"></a>
In olden days, the act of looking up a <em class="emphasis">key</em> in an actual index (such
as a phone book), but now merely the act of using any kind of key or
position to find the corresponding <em class="emphasis">value</em>, even if no index is
involved.  Things have degenerated to the point that Perl's <tt class="literal">index</tt>
function merely locates the position (index) of one string in another.
</p>
</dd>
</dl>

<dl>
<dt>indirect filehandle</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
An <em class="emphasis">expression</em> that evaluates to something that can be used as a
<em class="emphasis">filehandle</em>: a <em class="emphasis">string</em> (filehandle name), a <em class="emphasis">typeglob</em>, a typeglob
<em class="emphasis">reference</em>, or a low-level <em class="emphasis">IO</em> object.
</p>
</dd>
</dl>

<dl>
<dt>indirect object</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
In English grammar, a short noun phrase between a verb and its direct
object indicating the beneficiary or recipient of the action.  In
Perl, <tt class="literal">print STDOUT "$foo\n";</tt> can be
understood as "verb indirect-object object" where
<tt class="literal">STDOUT</tt> is the recipient of the
<tt class="literal">print</tt> action, and <tt class="literal">"$foo"</tt> is the
object being printed.  Similarly, when invoking a
<em class="emphasis">method</em>, you might place the invocant between the
method and its arguments:
<blockquote>
<pre class="programlisting">
$gollum=newPathetic::Creature"Smeagol";
give $gollum "Fisssssh!";
give $gollum "Precious!";
</pre>
</blockquote>
</p>
</dd>
</dl>

<dl>
<dt>indirect object slot</dt>
<dd>
<p>
The syntactic position falling between a method call and its arguments
when using the indirect object invocation syntax.  (The slot is
distinguished by the absence of a comma between it and the next
argument.) <tt class="literal">STDERR</tt> is in the indirect object slot here:
<blockquote>
<pre class="programlisting">
print STDERR "Awake!  Awake!  Fear, Fire,
    Foes!  Awake!\n";
</pre>
</blockquote>
</p>
</dd>
</dl>

<dl>
<dt>indirection</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
If something in a program isn't the value you're looking for but
indicates where the value is, that's indirection.  This can be done
with either <em class="emphasis">symbolic references</em> or
<em class="emphasis">hard references</em>.
</p>
</dd>
</dl>

<dl>
<dt>infix</dt>
<dd>
<p>
<a name="INDEX-"></a>
An <em class="emphasis">operator</em> that comes in between its <em class="emphasis">operands</em>, such as
multiplication in <tt class="literal">24 * 7</tt>.
</p>
</dd>
</dl>

<dl>
<dt>inheritance</dt>
<dd>
<p>
<a name="INDEX-"></a>
What you get from your ancestors, genetically or otherwise.  If you
happen to be a <em class="emphasis">class</em>, your ancestors are called <em class="emphasis">base classes</em>
and your descendants are called <em class="emphasis">derived classes</em>.  See <em class="emphasis">single
inheritance</em> and <em class="emphasis">multiple inheritance</em>.
</p>
</dd>
</dl>

<dl>
<dt>instance</dt>
<dd>
<p>
<a name="INDEX-"></a>
Short for "an instance of a class", meaning an <em class="emphasis">object</em> of that <em class="emphasis">class</em>.
</p>
</dd>
</dl>

<dl>
<dt>instance variable</dt>
<dd>
<p>
<a name="INDEX-"></a>
An <em class="emphasis">attribute</em> of an
<em class="emphasis">object</em>; data stored with the particular object
rather than with the class as a whole.
</p>
</dd>
</dl>

<dl>
<dt>integer</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
A number with no fractional (decimal) part.  A counting number,
like 1, 2, 3, and so on, but including 0 and the negatives.
</p>
</dd>
</dl>

<dl>
<dt>interface</dt>
<dd>
<p>
<a name="INDEX-"></a>
The services a piece of code promises to provide forever, in contrast to
its <em class="emphasis">implementation</em>, which it should feel free to change whenever it
likes.
</p>
</dd>
</dl>

<dl>
<dt>interpolation</dt>
<dd>
<p>
<a name="INDEX-"></a>
The insertion of a scalar or list value somewhere in the middle of
another value, such that it appears to have been there all along.  In
Perl, variable interpolation happens in double-quoted strings and
patterns, and list interpolation occurs when constructing the list of
values to pass to a list operator or other such construct that takes a
<em class="replaceable">LIST</em>.
</p>
</dd>
</dl>

<dl>
<dt>interpreter</dt>
<dd>
<p>
<a name="INDEX-"></a>
Strictly speaking, a program that reads a second program and does
what the second program says directly without turning the program
into a different form first, which is what <em class="emphasis">compilers</em> do.  Perl
is not an interpreter by this definition, because it contains a
kind of compiler that takes a program and turns it into a more
executable form (<em class="emphasis">syntax trees</em>) within the
<em class="emphasis">perl</em> process itself,
which the Perl <em class="emphasis">run-time</em> system then interprets.
</p>
</dd>
</dl>

<dl>
<dt>invocant</dt>
<dd>
<p>
<a name="INDEX-"></a>
The agent on whose behalf a <em class="emphasis">method</em> is
invoked.  In a <em class="emphasis">class</em> method, the invocant is
a package name.  In an <em class="emphasis">instance</em> method, the
invocant is an object reference.
</p>
</dd>
</dl>

<dl>
<dt>invocation</dt>
<dd>
<p>
The act of calling up a deity, daemon, program, method, subroutine,
or function to get it do what you think it's supposed to do.  We
usually "call" subroutines but "invoke" methods, since it sounds cooler.
</p>
</dd>
</dl>

<dl>
<dt>I/O</dt>
<dd>
<p>
<a name="INDEX-"></a>
Input from, or output to, a <em class="emphasis">file</em> or <em class="emphasis">device</em>.
</p>
</dd>
</dl>

<dl>
<dt>IO</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
An internal I/O object.  Can also mean <em class="emphasis">indirect object</em>.
</p>
</dd>
</dl>

<dl>
<dt>IP</dt>
<dd>
<p>
<a name="INDEX-"></a>
Internet Protocol, or Intellectual Property.
</p>
</dd>
</dl>

<dl>
<dt>IPC</dt>
<dd>
<p>
Interprocess Communication.
</p>
</dd>
</dl>

<dl>
<dt>is-a</dt>
<dd>
<p>
<a name="INDEX-"></a>
A relationship between two <em class="emphasis">objects</em> in which one
object is considered to be a more specific version of the other,
generic object: "A camel is a mammal."  Since the generic object
really only exists in a Platonic sense, we usually add a little
abstraction to the notion of objects and think of the relationship as
being between a generic <em class="emphasis">base class</em> and a specific
<em class="emphasis">derived class</em>.  Oddly enough, Platonic classes
don't always have Platonic relationships--see
<em class="emphasis">inheritance</em>.
</p>
</dd>
</dl>

<dl>
<dt>iteration</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
Doing something repeatedly.
</p>
</dd>
</dl>

<dl>
<dt>iterator</dt>
<dd>
<p>
<a name="INDEX-"></a>
A special programming gizmo that keeps track of where you
are in something that you're trying to iterate over.  The
<tt class="literal">foreach</tt>
loop in Perl contains an iterator; so does a hash, allowing you to
<tt class="literal">each</tt> through it.
</p>
</dd>
</dl>

<dl>
<dt>IV</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
The integer four, not to be confused with six, Tom's favorite editor.
IV also means an internal Integer Value of the type a <em class="emphasis">scalar</em> can
hold, not to be confused with an <em class="emphasis">NV</em>.
</p>
</dd>
</dl>

<dl>
<dt>JAPH</dt>
<dd>
<p>
<a name="INDEX-"></a>
"Just Another Perl Hacker," a clever but cryptic bit of Perl code
that when executed, evaluates to that string.  Often used to
illustrate a particular Perl feature, and something of an ungoing
Obfuscated Perl Contest seen in Usenix signatures.
</p>
</dd>
</dl>

<dl>
<dt>key</dt>
<dd>
<p>
<a name="INDEX-"></a>
The string index to a <em class="emphasis">hash</em>, used to look up the <em class="emphasis">value</em> associated
with that key.
</p>
</dd>
</dl>

<dl>
<dt>keyword</dt>
<dd>
<p>
<a name="INDEX-"></a>
See <em class="emphasis">reserved words</em>.
</p>
</dd>
</dl>

<dl>
<dt>label</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
A name you give to a <em class="emphasis">statement</em> so that you
can talk about that statement elsewhere in the program.
</p>
</dd>
</dl>

<dl>
<dt>laziness</dt>
<dd>
<p>
<a name="INDEX-"></a>
The quality that makes you go to great effort to reduce overall energy
expenditure.  It makes you write labor-saving programs that other people
will find useful, and document what you wrote so you don't have to
answer so many questions about it.  Hence, the first great virtue of a
programmer.  Also hence, this book.  See also <em class="emphasis">impatience</em> and
<em class="emphasis">hubris</em>.
</p>
</dd>
</dl>

<dl>
<dt>left shift</dt>
<dd>
<p>
<a name="INDEX-"></a>
A <em class="emphasis">bit shift</em> that multiplies the number by some
power of 2.
</p>
</dd>
</dl>

<dl>
<dt>leftmost longest</dt>
<dd>
<p>
<a name="INDEX-"></a>
The preference of the <em class="emphasis">regular expression</em> engine to match the
leftmost occurrence of a <em class="emphasis">pattern</em>, then given a position at which a
match will occur, the preference for the longest match (presuming the
use of a <em class="emphasis">greedy</em> quantifier).  See
<a href="ch05_01.htm">Chapter 5, "Pattern Matching"</a>
for <em class="emphasis">much</em> more on this subject.
</p>
</dd>
</dl>

<dl>
<dt>lexeme</dt>
<dd>
<p>
Fancy term for a <em class="emphasis">token</em>.
</p>
</dd>
</dl>

<dl>
<dt>lexer</dt>
<dd>
<p>
<a name="INDEX-"></a>
Fancy term for a <em class="emphasis">tokener</em>.
</p>
</dd>
</dl>

<dl>
<dt>lexical analysis</dt>
<dd>
<p>
Fancy term for <em class="emphasis">tokenizing</em>.
<a name="INDEX-"></a>
</p>
</dd>
</dl>

<dl>
<dt>lexical scoping</dt>
<dd>
<p>
<a name="INDEX-"></a>
Looking at your <em class="emphasis">Oxford English Dictionary</em> through
a microscope.  (Also known as <em class="emphasis">static scoping</em>,
because dictionaries don't change very fast.)  Similarly, looking at
variables stored in a private dictionary (namespace) for each scope,
which are visible only from their point of declaration down to the end
of the lexical scope in which they are declared.
--Syn. <em class="emphasis">static scoping</em>.  --Ant. <em class="emphasis">dynamic
scoping</em>.
</p>
</dd>
</dl>

<dl>
<dt>lexical variable</dt>
<dd>
<p>
<a name="INDEX-"></a>
A <em class="emphasis">variable</em> subject to <em class="emphasis">lexical scoping</em>, declared by <tt class="literal">my</tt>.  Often
just called a "lexical".  (The <tt class="literal">our</tt> declaration declares a lexically
scoped name for a global variable, which is not itself a lexical variable.)
</p>
</dd>
</dl>

<dl>
<dt>library</dt>
<dd>
<p>
<a name="INDEX-"></a>
Generally, a collection of procedures.  In ancient days, referred to a
collection of subroutines in a <em class="emphasis">.pl</em> file.  In modern times, refers
more often to the entire collection of Perl <em class="emphasis">modules</em> on your system.
</p>
</dd>
</dl>

<dl>
<dt>LIFO</dt>
<dd>
<p>
<a name="INDEX-"></a>
Last In, First Out.  See also <em class="emphasis">FIFO</em>.  A LIFO is usually called a <em class="emphasis">stack</em>.
</p>
</dd>
</dl>

<dl>
<dt>line</dt>
<dd>
<p>
<a name="INDEX-"></a>
In Unix, a sequence of zero or more non-newline characters terminated
with a <em class="emphasis">newline</em> character.  On non-Unix machines,
this is emulated by the C library even if the underlying
<em class="emphasis">operating system</em> has different ideas.
</p>
</dd>
</dl>

<a name="INDEX-"></a>
<dl>
<dt>line buffering</dt>
<dd>
<p>
Used by a <em class="emphasis">standard I/O</em> output stream that flushes
its <em class="emphasis">buffer</em> after every
<em class="emphasis">newline</em>.  Many standard I/O libraries
automatically set up line&nbsp;buffering on output that is going to the
terminal.
</p>
</dd>
</dl>

<dl>
<dt>line number</dt>
<dd>
<p>
<a name="INDEX-"></a>
The number of lines read previous to this one, plus 1.  Perl
keeps a separate line number for each source or input file it opens.
The current source file's line number is represented by
<tt class="literal">__LINE__</tt>.  The current input line number
(for the file that was most recently read via
<tt class="literal">&lt;FH&gt;</tt>) is represented by the <tt class="literal">$.</tt>
(<tt class="literal">$INPUT_LINE_NUMBER</tt>) variable.  Many error messages
report both values, if available.
</p>
</dd>
</dl>

<dl>
<dt>link</dt>
<dd>
<p>
<a name="INDEX-"></a>
Used as a noun, a name in a <em class="emphasis">directory</em>, representing a <em class="emphasis">file</em>.  A given
file can have multiple links to it.  It's like having the same phone
number listed in the phone directory under different names.  As a
verb, to resolve a partially compiled file's unresolved symbols into a (nearly)
executable image.  Linking can generally be static or dynamic, which
has nothing to do with static or dynamic scoping.
</p>
</dd>
</dl>

<dl>
<dt>LIST</dt>
<dd>
<p>
<a name="INDEX-"></a>
A syntactic construct representing a comma-separated list of
expressions, evaluated to produce a <em class="emphasis">list value</em>.  Each <em class="emphasis">expression</em>
in a <em class="replaceable">LIST</em> is evaluated in <em class="emphasis">list context</em> and interpolated into
the list value.
</p>
</dd>
</dl>

<dl>
<dt>list</dt>
<dd>
<p>
An ordered set of scalar values.
</p>
</dd>
</dl>

<dl>
<dt>list context</dt>
<dd>
<p>
<a name="INDEX-"></a>
The situation in which an <em class="emphasis">expression</em> is expected by its surroundings
(the code calling it) to return a list of values rather than a
single value.  Functions that want a <em class="replaceable">LIST</em> of arguments tell those
arguments that they should produce a list value.  See also <em class="emphasis">context</em>.
</p>
</dd>
</dl>

<dl>
<dt>list operator</dt>
<dd>
<p>
<a name="INDEX-"></a>
An <em class="emphasis">operator</em> that does something with a list of values, such as
<tt class="literal">join</tt> or <tt class="literal">grep</tt>.  Usually used for named built-in operators (such
as <tt class="literal">print</tt>, <tt class="literal">unlink</tt>, and <tt class="literal">system</tt>) that do not require parentheses
around their <em class="emphasis">argument</em> list.
</p>
</dd>
</dl>

<dl>
<dt>list value</dt>
<dd>
<p>
An unnamed list of temporary scalar values that may be passed around
within a program from any list-generating function to any function or
construct that provides a <em class="emphasis">list context</em>.
</p>
</dd>
</dl>

<dl>
<dt>literal</dt>
<dd>
<p>
<a name="INDEX-"></a>
A token in a programming language such as a number or <em class="emphasis">string</em> that
gives you an actual <em class="emphasis">value</em> instead of merely representing possible
values as a <em class="emphasis">variable</em> does.
</p>
</dd>
</dl>

<dl>
<dt>little-endian</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a><a name="INDEX-"></a>
From Swift:  someone who eats eggs little end first.  Also used
of computers that store the least significant <em class="emphasis">byte</em> of a word at
a lower byte address than the most significant byte.  Often considered
superior to big-endian machines.  See also <em class="emphasis">big-endian</em>.
</p>
</dd>
</dl>

<dl>
<dt>local</dt>
<dd>
<p>
<a name="INDEX-"></a>
Not meaning the same thing everywhere.  A global variable in
Perl can be localized inside a <em class="emphasis">dynamic scope</em> via the <tt class="literal">local</tt> operator.
</p>
</dd>
</dl>

<dl>
<dt>logical operator</dt>
<dd>
<p>
<a name="INDEX-"></a>
Symbols representing the concepts "and", "or", "xor", and "not".
</p>
</dd>
</dl>

<dl>
<dt>lookahead</dt>
<dd>
<p>
<a name="INDEX-"></a>
An <em class="emphasis">assertion</em> that peeks at the string to the right
of the current match location.
</p>
</dd>
</dl>

<dl>
<dt>lookbehind</dt>
<dd>
<p>
<a name="INDEX-"></a>
An <em class="emphasis">assertion</em> that peeks at the string to the left
of the current match location.
</p>
</dd>
</dl>

<dl>
<dt>loop</dt>
<dd>
<p>
<a name="INDEX-"></a>
A construct that performs something repeatedly, like a roller coaster.
</p>
</dd>
</dl>

<dl>
<dt>loop control statement</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a><a name="INDEX-"></a>
Any statement within the body of a loop that can make a loop
prematurely stop looping or skip an <em class="emphasis">iteration</em>.  Generally you
shouldn't try this on roller coasters.
</p>
</dd>
</dl>

<dl>
<dt>loop label</dt>
<dd>
<p>
A kind of key or name attached to a loop (or&nbsp;roller coaster) so that
loop control statements can talk about which loop they want to
control.
</p>
</dd>
</dl>

<dl>
<dt>lvaluable</dt>
<dd>
<p>
<a name="INDEX-"></a>
Able to serve as an <em class="emphasis">lvalue</em>.
</p>
</dd>
</dl>

<dl>
<dt>lvalue</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
Term used by language lawyers for a storage location you can assign a
new <em class="emphasis">value</em> to, such as a
<em class="emphasis">variable</em> or an element of an
<em class="emphasis">array</em>.  The "l" is short for "left", as in the
left side of an assignment, a typical place for lvalues.  An
<em class="emphasis">lvaluable</em> function or expression is one to which
a value may be assigned, as in <tt class="literal">pos($x)&nbsp;=&nbsp;10</tt>.
</p>
</dd>
</dl>

<dl>
<dt>lvalue modifier</dt>
<dd>
<p>
An adjectival pseudofunction that warps the meaning of an <em class="emphasis">lvalue</em> in
some declarative fashion.  Currently there are three lvalue modifiers:
<tt class="literal">my</tt>, <tt class="literal">our</tt>, and <tt class="literal">local</tt>.
</p>
</dd>
</dl>

<dl>
<dt>magic</dt>
<dd>
<p>
<a name="INDEX-"></a>
Technically speaking, any extra semantics attached to a variable
such as <tt class="literal">$!</tt>, <tt class="literal">$0</tt>,
<tt class="literal">%ENV</tt>, or <tt class="literal">%SIG</tt>, or to any
tied variable.  Magical things happen when you diddle those variables.
</p>
</dd>
</dl>

<dl>
<dt>magical increment</dt>
<dd>
<p>
An <em class="emphasis">increment</em> operator that knows how to bump up alphabetics
as well as numbers.
</p>
</dd>
</dl>

<dl>
<dt>magical variables</dt>
<dd>
<p>
Special variables that have side effects when you access them or assign
to them.  For example, in Perl, changing elements of the
<tt class="literal">%ENV</tt> array also changes the corresponding
environment variables that subprocesses will use.  Reading the
<tt class="literal">$!</tt> variable gives you the
current system error number or message.
</p>
</dd>
</dl>

<dl>
<dt>Makefile</dt>
<dd>
<p>
<a name="INDEX-"></a>
A file that controls the compilation of a program.  Perl programs don't
usually need a <em class="emphasis">Makefile</em> because the Perl compiler has plenty of
self-control.
</p>
</dd>
</dl>

<dl>
<dt>man</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
The Unix program that displays online documentation (manual pages) for you.
</p>
</dd>
</dl>

<dl>
<dt>manpage</dt>
<dd>
<p>
<a name="INDEX-"></a>
A "page" from the manuals, typically accessed via the
<em class="emphasis">man</em>(1) command.  A manpage contains a SYNOPSIS, a DESCRIPTION,
a list of BUGS, and so on, and is typically longer than a page.
There are manpages documenting <em class="emphasis">commands</em>, <em class="emphasis">syscalls</em>, <em class="emphasis">library</em><em class="emphasis">functions</em>, <em class="emphasis">devices</em>, <em class="emphasis">protocols</em>, <em class="emphasis">files</em>, and such.  In
this book, we call any piece of standard Perl documentation (like
<em class="emphasis">perlop</em> or <em class="emphasis">perldelta</em>) a manpage, no matter what format it's
installed in on your system.
</p>
</dd>
</dl>

<dl>
<dt>matching</dt>
<dd>
<p>
See <em class="emphasis">pattern matching</em>.
</p>
</dd>
</dl>

<dl>
<dt>member data</dt>
<dd>
<p>
See <em class="emphasis">instance variable</em>.
</p>
</dd>
</dl>

<dl>
<dt>memory</dt>
<dd>
<p>
<a name="INDEX-"></a>
This always means your main memory, not your disk.  Clouding the issue
is the fact that your machine may implement <em class="emphasis">virtual</em> memory; that is,
it will pretend that it has more memory than it really does, and it'll
use disk space to hold inactive bits.  This can make it seem like you have
a little more memory than you really do, but it's not a substitute
for real memory.  The best thing that can be said about virtual memory
is that it lets your performance degrade gradually rather than suddenly
when you run out of real memory.  But your program can die when you
run out of virtual memory too, if you haven't thrashed your disk to
death first.
</p>
</dd>
</dl>

<dl>
<dt>metacharacter</dt>
<dd>
<p>
<a name="INDEX-"></a>
A <em class="emphasis">character</em> that is <em class="emphasis">not</em> supposed to be treated normally.  Which
characters are to be treated specially as metacharacters varies greatly
from context to context.  Your <em class="emphasis">shell</em> will have certain
metacharacters, double-quoted Perl <em class="emphasis">strings</em> have other
metacharacters, and <em class="emphasis">regular expression</em> patterns have all the
double-quote metacharacters plus some extra ones of their own.
</p>
</dd>
</dl>

<dl>
<dt>metasymbol</dt>
<dd>
<p>
<a name="INDEX-"></a>
Something we'd call a <em class="emphasis">metacharacter</em> except that it's a sequence of
more than one character.  Generally, the first character in the
sequence must be a true metacharacter to get the other characters in
the metasymbol to misbehave along with it.
</p>
</dd>
</dl>

<dl>
<dt>method</dt>
<dd>
<p>
A kind of action that an <em class="emphasis">object</em> can take if you
tell it to.  See <a href="ch12_01.htm">Chapter 12, "Objects"</a>.
</p>
</dd>
</dl>

<dl>
<dt>minimalism</dt>
<dd>
<p>
The belief that "small is beautiful."  Paradoxically, if you say
something in a small language, it turns out big, and if you say it in a
big language, it turns out small.  Go figure.
</p>
</dd>
</dl>

<dl>
<dt>mode</dt>
<dd>
<p>
In the context of the <em class="emphasis">stat</em>(2) syscall, refers to the field holding
the <em class="emphasis">permission bits</em> and the type of the <em class="emphasis">file</em>.
</p>
</dd>
</dl>

<dl>
<dt>modifier</dt>
<dd>
<p>
See <em class="emphasis">statement modifier</em>, <em class="emphasis">regular expression modifier</em>, and <em class="emphasis">lvalue
modifier</em>, not necessarily in that order.
</p>
</dd>
</dl>

<dl>
<dt>module</dt>
<dd>
<p>
A <em class="emphasis">file</em> that defines a <em class="emphasis">package</em> of (almost) the same name, which
can either <em class="emphasis">export</em> symbols or function as an <em class="emphasis">object</em> class.  (A
module's main <em class="emphasis">.pm</em> file may also load in other files in support of
the module.)  See the <tt class="literal">use</tt> built-in.
</p>
</dd>
</dl>

<dl>
<dt>modulus</dt>
<dd>
<p>
An integer divisor when you're interested in the remainder instead of
the quotient.
</p>
</dd>
</dl>

<dl>
<dt>monger</dt>
<dd>
<p>
Short for Perl Monger, a purveyor of Perl.
</p>
</dd>
</dl>

<dl>
<dt>mortal</dt>
<dd>
<p>
A temporary value scheduled to die when the current statement finishes.
</p>
</dd>
</dl>

<dl>
<dt>multidimensional array</dt>
<dd>
<p>
<a name="INDEX-6266"></a><a name="INDEX-"></a>
An array with multiple subscripts for finding a single element.
Perl implements these using <em class="emphasis">references</em>--see 
<a href="ch09_01.htm">Chapter 9, "Data Structures"</a>.
</p>
</dd>
</dl>

<dl>
<dt>multiple inheritance</dt>
<dd>
<p>
<a name="INDEX-"></a>
The features you got from your mother and father, mixed together
unpredictably.  (See also <em class="emphasis">inheritance</em>, and <em class="emphasis">single
inheritance</em>.)  In computer languages (including Perl), the notion
that a given class may have multiple direct ancestors or <em class="emphasis">base classes</em>.
</p>
</dd>
</dl>

<dl>
<dt>named pipe</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
A <em class="emphasis">pipe</em> with a name embedded in the <em class="emphasis">filesystem</em> so that it can be
accessed by two unrelated <em class="emphasis">processes</em>.
</p>
</dd>
</dl>

<dl>
<dt>namespace</dt>
<dd>
<p>
<a name="INDEX-"></a>
A domain of names.  You needn't worry about whether the
names in one such domain
have been used in another.  See <em class="emphasis">package</em>.
</p>
</dd>
</dl>

<dl>
<dt>network address</dt>
<dd>
<p>
The most important attribute of a socket, like your telephone's
telephone number.  Typically an IP address.  See also <em class="emphasis">port</em>.
</p>
</dd>
</dl>

<dl>
<dt>newline</dt>
<dd>
<p>
A single character that represents the end of a line, with the ASCII
value of 012 octal under Unix (but 015 on a Mac), and represented by
<tt class="literal">\n</tt> in Perl strings.  For Windows machines writing text files,
and for certain physical devices like terminals, the single newline
gets automatically translated by your C library into a line feed and a
carriage return, but normally, no translation is done.
</p>
</dd>
</dl>

<dl>
<dt>NFS</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
Network File System, which allows you to mount a remote filesystem as
if it were local.
</p>
</dd>
</dl>

<dl>
<dt>null character</dt>
<dd>
<p>
A character with the ASCII value of zero.  It's used by C
to terminate strings, but Perl allows strings to contain a
null.
</p>
</dd>
</dl>

<dl>
<dt>null list</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
A <em class="emphasis">list value</em> with zero elements, represented in Perl by <tt class="literal">()</tt>.
</p>
</dd>
</dl>

<dl>
<dt>null string</dt>
<dd>
<p>
A <em class="emphasis">string</em> containing no characters, not to
be confused with a string containing a <em class="emphasis">null
character</em>, which has a positive length and is
<em class="emphasis">true</em>.
</p>
</dd>
</dl>

<dl>
<dt>numeric context</dt>
<dd>
<p>
The situation in which an expression is expected by its surroundings
(the code calling it) to return a number.  See also <em class="emphasis">context</em> and
<em class="emphasis">string context</em>.
</p>
</dd>
</dl>

<dl>
<dt>NV</dt>
<dd>
<p>
Short for Nevada, no part of which will ever be confused with
civilization.  NV also means an internal floating-point Numeric Value
of the type a <em class="emphasis">scalar</em> can hold, not to be confused with an <em class="emphasis">IV</em>.
</p>
</dd>
</dl>

<dl>
<dt>nybble</dt>
<dd>
<p>
Half a <em class="emphasis">byte</em>, equivalent to one <em class="emphasis">hexadecimal</em> digit, and worth four <em class="emphasis">bits</em>.
</p>
</dd>
</dl>

<dl>
<dt>object</dt>
<dd>
<p>
An <em class="emphasis">instance</em> of a
<em class="emphasis">class</em>.  Something that "knows" what user-defined
type (class) it is, and what it can do because of what class it is.
Your program can request an object to do things, but the object
gets to decide whether it wants to do them or not.  Some objects are more
accommodating than others.
</p>
</dd>
</dl>

<dl>
<dt>octal</dt>
<dd>
<p>
A number in base 8.  Only the digits 0 through 7
are allowed.  Octal constants in Perl start with 0, as in 013.
See also the <tt class="literal">oct</tt> function.
</p>
</dd>
</dl>

<dl>
<dt>offset</dt>
<dd>
<p>
<a name="INDEX-"></a>
How many things you have to skip over when moving from the beginning of a
string or array to a specific position within it.  Thus, the
minimum offset is zero, not one, because you don't skip
anything to get to the first item.
</p>
</dd>
</dl>

<dl>
<dt>one-liner</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
An entire computer program crammed into one line of text.
</p>
</dd>
</dl>

<dl>
<dt>open source software</dt>
<dd>
<p>
<a name="INDEX-"></a>
Programs for which the source code is freely available and freely
redistributable, with no commercial strings attached.  For a more
detailed definition, see <em class="emphasis">http://www.opensource.org/osd.html</em>.
</p>
</dd>
</dl>

<dl>
<dt>operand</dt>
<dd>
<p>
An <em class="emphasis">expression</em> that yields a <em class="emphasis">value</em> that an <em class="emphasis">operator</em> operates on.
See also <em class="emphasis">precedence</em>.
</p>
</dd>
</dl>

<dl>
<dt>operating system</dt>
<dd>
<p>
<a name="INDEX-"></a>
A special program that runs on the bare machine and hides the gory
details of managing <em class="emphasis">processes</em> and
<em class="emphasis">devices</em>.  Usually used in
a looser sense to indicate a particular culture of programming.  The
loose sense can be used at varying levels of specificity.  At one
extreme, you might say that all versions of Unix and Unix-lookalikes
are the same operating system (upsetting many people, especially
lawyers and other advocates).  At the other extreme, you could say
this particular version of this particular vendor's operating
system is different from any other version of this or any other
vendor's operating system.  Perl is much more portable across
operating systems than many other languages.  See also
<em class="emphasis">architecture</em> and <em class="emphasis">platform</em>.
</p>
</dd>
</dl>

<dl>
<dt>operator</dt>
<dd>
<p>
<a name="INDEX-"></a>
A gizmo that transforms some number of input values to some number
of output values, often built into a language with a special syntax or
symbol.  A given operator may have specific expectations about what
<em class="emphasis">types</em> of data you give as its arguments
(<em class="emphasis">operands</em>) and what type
of data you want back from it.
</p>
</dd>
</dl>

<dl>
<dt>operator overloading</dt>
<dd>
<p>
<a name="INDEX-"></a>
A kind of <em class="emphasis">overloading</em> that you can do on 
built-in <em class="emphasis">operators</em> to make them work on
<em class="emphasis">objects</em> as if the objects were ordinary scalar values,
but with the actual semantics supplied by the object class.  This is
set up with the overload <em class="emphasis">pragma</em>--see
<a href="ch13_01.htm">Chapter 13, "Overloading"</a>.
</p>
</dd>
</dl>

<dl>
<dt>options</dt>
<dd>
<p>
See either <em class="emphasis">switches</em> or
<em class="emphasis">regular
expression modifiers</em>.
</p>
</dd>
</dl>

<dl>
<dt>overloading</dt>
<dd>
<p>
<a name="INDEX-"></a>
Giving additional meanings to a symbol or construct.  Actually, all
languages do overloading to one extent or another, since people are good
at figuring out things from <em class="emphasis">context</em>.
</p>
</dd>
</dl>

<dl>
<dt>overriding</dt>
<dd>
<p>
Hiding or invalidating some other definition of the same name.  (Not
to be confused with <em class="emphasis">overloading</em>, which adds
definitions that must be disambiguated some other way.) To confuse the
issue further, we use the word with two overloaded definitions: to
describe how you can define your own <em class="emphasis">subroutine</em>
to hide a built-in <em class="emphasis">function</em> of the same name
(see "Overriding Built-in Functions" in
<a href="ch11_01.htm">Chapter 11, "Modules"</a>) and to describe how you can
define a replacement <em class="emphasis">method</em> in a
<em class="emphasis">derived class</em> to hide a <em class="emphasis">base
class</em>'s method of the same name (see
<a href="ch12_01.htm">Chapter 12, "Objects"</a>).
</p>
</dd>
</dl>

<dl>
<dt>owner</dt>
<dd>
<p>
The one user (apart from the superuser) who has absolute control over a
<em class="emphasis">file</em>.  A file may also have a
<em class="emphasis">group</em> of users who may exercise
joint ownership if the real owner permits it.  See <em class="emphasis">permission
bits</em>.
</p>
</dd>
</dl>

<dl>
<dt>package</dt>
<dd>
<p>
<a name="INDEX-"></a>
A <em class="emphasis">namespace</em> for global
<em class="emphasis">variables</em>, <em class="emphasis">subroutines</em>,
and the like, such that they can be kept separate from like-named
<em class="emphasis">symbols</em> in other namespaces.
In a sense, only the package is global, since the symbols in
the package's symbol table are only accessible from code compiled
outside the package by naming the package.  But in another
sense, all package symbols are
also globals--they're just well-organized globals.
</p>
</dd>
</dl>

<dl>
<dt>pad</dt>
<dd>
<p>
Short for <em class="emphasis">scratchpad</em>.
</p>
</dd>
</dl>

<dl>
<dt>parameter</dt>
<dd>
<p>
See <em class="emphasis">argument</em>.
</p>
</dd>
</dl>

<dl>
<dt>parent class</dt>
<dd>
<p>
See <em class="emphasis">base class</em>.
</p>
</dd>
</dl>

<dl>
<dt>parse tree</dt>
<dd>
<p>
See <em class="emphasis">syntax tree</em>.
</p>
</dd>
</dl>

<dl>
<dt>parsing</dt>
<dd>
<p>
The subtle but sometimes brutal art of attempting to turn your possibly
malformed program into a valid <em class="emphasis">syntax tree</em>.
</p>
</dd>
</dl>

<dl>
<dt>patch</dt>
<dd>
<p>
To fix by applying one, as it were.  In the realm of hackerdom, a
listing of the differences between two versions of a program as
might be applied by the <em class="emphasis">patch</em>(1)
program when you want to fix a bug or upgrade your old version.
</p>
</dd>
</dl>

<dl>
<dt>PATH</dt>
<dd>
<p>
The list of <em class="emphasis">directories</em> the system searches to
find a program you want to <em class="emphasis">execute</em>.  The list is
stored as one of your <em class="emphasis">environment variables</em>,
accessible in Perl as <tt class="literal">$ENV{PATH}</tt>.
</p>
</dd>
</dl>

<dl>
<dt>pathname</dt>
<dd>
<p>
A fully qualified filename such as
<em class="emphasis">/usr/bin/perl</em>.  Sometimes
confused with <tt class="literal">PATH</tt>.
</p>
</dd>
</dl>

<dl>
<dt>pattern</dt>
<dd>
<p>
A template used in <em class="emphasis">pattern matching</em>.
</p>
</dd>
</dl>

<dl>
<dt>pattern matching</dt>
<dd>
<p>
Taking a pattern, usually a <em class="emphasis">regular expression</em>, and trying the
pattern various ways on a string to see whether there's any way to
make it fit.  Often used to pick interesting tidbits out of a file.
</p>
</dd>
</dl>

<dl>
<dt>permission bits</dt>
<dd>
<p>
Bits that the <em class="emphasis">owner</em> of a file sets or unsets
to allow or disallow access to other people.  These flag bits
are part of the <em class="emphasis">mode</em> word returned by the
<tt class="literal">stat</tt> built-in when you ask about a file.  On Unix
systems, you can check the <em class="emphasis">ls</em>(1) manpage
for more information.
</p>
</dd>
</dl>

<dl>
<dt>Pern</dt>
<dd>
<p>
What you get when you do <tt class="literal">Perl++</tt> twice.  Doing it only once will curl
your hair.  You have to increment it eight times to shampoo your hair.
Lather, rinse, iterate.
</p>
</dd>
</dl>

<dl>
<dt>pipe</dt>
<dd>
<p>
A direct <em class="emphasis">connection</em> that carries the
output of one <em class="emphasis">process</em> to the input
of another without an intermediate temporary file.
Once the pipe is set up, the two processes in question can read
and write as if they were talking to a normal file, with some caveats.
</p>
</dd>
</dl>

<dl>
<dt>pipeline</dt>
<dd>
<p>
A series of <em class="emphasis">processes</em> all in a row, linked by <em class="emphasis">pipes</em>, where
each passes its output stream to the next.
</p>
</dd>
</dl>

<dl>
<dt>platform</dt>
<dd>
<p>
The entire hardware and software context in which a program runs.  A
 program written in a platform-dependent language might break if
you change any of: machine, operating system, libraries, compiler, or
system configuration.  The <em class="emphasis">perl</em> interpreter
has to be compiled
differently for each platform because it is implemented in C, but
programs written in the&nbsp;Perl language are largely
platform-independent.
</p>
</dd>
</dl>

<dl>
<dt>pod</dt>
<dd>
<p>
The markup used to embed documentation into your Perl code.  See
<a href="ch26_01.htm">Chapter 26, "Plain Old Documentation"</a>.
</p>
</dd>
</dl>

<dl>
<dt>pointer</dt>
<dd>
<p>
A <em class="emphasis">variable</em> in a language like C that contains the
exact memory location of some other item.  Perl handles pointers
internally so you don't have to worry about them.  Instead, you just
use symbolic pointers in the form of <em class="emphasis">keys</em> and
<em class="emphasis">variable</em> names, or <em class="emphasis">hard
references</em>, which aren't pointers (but act like pointers
and do in fact contain pointers).
</p>
</dd>
</dl>

<dl>
<dt>polymorphism</dt>
<dd>
<p>
<a name="INDEX-"></a>
The notion that you can tell an <em class="emphasis">object</em> to do something generic, and the
object will interpret the command in different ways depending on its
type.  [&lt;Gk many shapes]
</p>
</dd>
</dl>

<dl>
<dt>port</dt>
<dd>
<p>
<a name="INDEX-"></a>
The part of the address of a TCP or UDP socket that directs packets
to the correct process after finding the right machine, something
like the phone extension you give when you reach the company
operator.  Also, the result of converting code to run on a different
platform than originally intended, or the verb denoting this conversion.
</p>
</dd>
</dl>

<dl>
<dt>portable</dt>
<dd>
<p>
Once upon a time, C code compilable under both BSD and SysV.  In general,
code that can be easily converted to run on another
<em class="emphasis">platform</em>, where "easily" can be defined however
you like, and usually is.  Anything may be considered portable
if you try hard enough.  See <em class="emphasis">mobile home</em>
or <em class="emphasis">London Bridge</em>.
</p>
</dd>
</dl>

<dl>
<dt>porter</dt>
<dd>
<p>
Someone who "carries" software from one <em class="emphasis">platform</em>
to another.  Porting programs written in platform-dependent
languages such as C can be difficult work, but porting programs
like Perl is very much worth the agony.
</p>
</dd>
</dl>

<dl>
<dt>POSIX</dt>
<dd>
<p>
The Portable Operating System Interface specification.
</p>
</dd>
</dl>

<dl>
<dt>postfix</dt>
<dd>
<p>
An <em class="emphasis">operator</em> that follows its 
<em class="emphasis">operand</em>, as in <tt class="literal">$x++</tt>.
</p>
</dd>
</dl>

<dl>
<dt>pp</dt>
<dd>
<p>
An internal shorthand for a "push-pop" code, that is, C code implementing
Perl's stack machine.
</p>
</dd>
</dl>

<dl>
<dt>pragma</dt>
<dd>
<p>
A standard module whose practical hints and suggestions are received (and
possibly ignored) at compile time.  Pragmas are named in all lowercase.
</p>
</dd>
</dl>

<dl>
<dt>precedence</dt>
<dd>
<p>
<a name="INDEX-"></a>
The rules of conduct that, in the absence of other guidance, determine
what should happen first.  For example, in the absence of parentheses,
you always do multiplication before addition.
</p>
</dd>
</dl>

<dl>
<dt>prefix</dt>
<dd>
<p>
An <em class="emphasis">operator</em> that precedes its
<em class="emphasis">operand</em>, as in <tt class="literal">++$x</tt>.
</p>
</dd>
</dl>

<dl>
<dt>preprocessing</dt>
<dd>
<p>
<a name="INDEX-"></a>
What some helper <em class="emphasis">process</em> did to
transform the incoming data into a form more suitable for
the current process.  Often done with an incoming
<em class="emphasis">pipe</em>.  See also <em class="emphasis">C preprocessor</em>.
</p>
</dd>
</dl>

<dl>
<dt>procedure</dt>
<dd>
<p>
A <em class="emphasis">subroutine</em>.
</p>
</dd>
</dl>

<dl>
<dt>process</dt>
<dd>
<p>
An instance of a running program.  Under
multitasking systems like Unix, two or more separate processes could
be running the same program independently at the same time--in fact,
the <tt class="literal">fork</tt> function is designed to bring about this
happy state of affairs.  Under other operating systems, processes are
sometimes called "threads", "tasks", or "jobs", often with slight
nuances in meaning.
</p>
</dd>
</dl>

<dl>
<dt>program generator</dt>
<dd>
<p>
A system that algorithmically writes code for you in a high-level language.
See also <em class="emphasis">code generator</em>.
</p>
</dd>
</dl>

<dl>
<dt>progressive matching</dt>
<dd>
<p>
<em class="emphasis">Pattern matching</em> that picks up where it left off before.
</p>
</dd>
</dl>

<dl>
<dt>property</dt>
<dd>
<p>
See either <em class="emphasis">instance variable</em> or
<em class="emphasis">character
property</em>.
</p>
</dd>
</dl>

<dl>
<dt>protocol</dt>
<dd>
<p>
In networking, an agreed-upon way of sending messages back and forth
so that neither correspondent will get too confused.
</p>
</dd>
</dl>

<dl>
<dt>prototype</dt>
<dd>
<p>
<a name="INDEX-"></a>
An optional part of a <em class="emphasis">subroutine</em> declaration telling the Perl compiler
how many and what flavor of arguments may be passed as <em class="emphasis">actual arguments</em>,
so that you can write subroutine calls that parse much like built-in
functions.  (Or don't parse, as the case may be.)
</p>
</dd>
</dl>

<dl>
<dt>pseudofunction</dt>
<dd>
<p>
A construct that sometimes looks like a function but really isn't.
Usually reserved for <em class="emphasis">lvalue</em> modifiers like
<tt class="literal">my</tt>, for <em class="emphasis">context</em> modifiers
like <tt class="literal">scalar</tt>, and for the pick-your-own-quotes
constructs, <tt class="literal">q//</tt>, <tt class="literal">qq//</tt>,
<tt class="literal">qx//</tt>, <tt class="literal">qw//</tt>,
<tt class="literal">qr//</tt>, <tt class="literal">m//</tt>,
<tt class="literal">s///</tt>, <tt class="literal">y///</tt>, and
<tt class="literal">tr///</tt>.
</p>
</dd>
</dl>

<dl>
<dt>pseudohash</dt>
<dd>
<p>
A reference to an array whose initial element happens to hold a
reference to a hash.  You can treat a pseudohash reference as either
an array reference or a hash reference.
</p>
</dd>
</dl>

<dl>
<dt>pseudoliteral</dt>
<dd>
<p>
An <em class="emphasis">operator</em> that looks something like a
<em class="emphasis">literal</em>,&nbsp;such as the output-grabbing operator,
<tt class="literal">`</tt><em class="replaceable">command</em><tt class="literal">`</tt>.
</p>
</dd>
</dl>

<dl>
<dt>public domain</dt>
<dd>
<p>
Something not owned by anybody.  Perl is copyrighted and is thus
<em class="emphasis">not</em> in the public domain--it's just
<em class="emphasis">freely available</em> and
<em class="emphasis">freely redistributable</em>.
</p>
</dd>
</dl>

<dl>
<dt>pumpkin</dt>
<dd>
<p>
<a name="INDEX-"></a>
A notional "baton" handed around the Perl community indicating who is
the lead integrator in some arena of development.
</p>
</dd>
</dl>

<dl>
<dt>pumpking</dt>
<dd>
<p>
A <em class="emphasis">pumpkin</em> holder, the person in charge of
pumping the pump, or at least priming it.  Must be willing to play
the part of the Great Pumpkin now and then.
</p>
</dd>
</dl>

<dl>
<dt>PV</dt>
<dd>
<p>
A "pointer value", which is Perl Internals Talk for a <tt class="literal">char*</tt>.
</p>
</dd>
</dl>

<dl>
<dt>qualified</dt>
<dd>
<p>
Possessing a complete name.  The symbol <tt class="literal">$Ent::moot</tt>
is qualified; <tt class="literal">$moot</tt> is unqualified.  A fully
qualified filename is specified from the top-level directory.
</p>
</dd>
</dl>

<dl>
<dt>quantifier</dt>
<dd>
<p>
A component of a <em class="emphasis">regular expression</em> specifying
how many times the foregoing <em class="emphasis">atom</em> may occur.
</p>
</dd>
</dl>

<dl>
<dt>readable</dt>
<dd>
<p>
With respect to files, one that has the proper permission bit set
to let you access the file.  With respect to computer programs, one
that's written well enough that someone has a chance of figuring
out what it's trying to do.
</p>
</dd>
</dl>

<dl>
<dt>reaping</dt>
<dd>
<p>
The last rites performed by a parent <em class="emphasis">process</em> on behalf of a deceased
child process so that it doesn't remain a <em class="emphasis">zombie</em>.  See the <tt class="literal">wait</tt>
and <tt class="literal">waitpid</tt> function calls.
</p>
</dd>
</dl>

<dl>
<dt>record</dt>
<dd>
<p>
A set of related data values in a <em class="emphasis">file</em> or <em class="emphasis">stream</em>, often associated
with a unique <em class="emphasis">key</em> field.  In Unix, often commensurate with a <em class="emphasis">line</em>,
or a blank-line-terminated set of lines (a "paragraph").  Each line of
the <em class="emphasis">/etc/passwd</em> file is a record, keyed on login name, containing
information about that user.
</p>
</dd>
</dl>

<dl>
<dt>recursion</dt>
<dd>
<p>
The art of defining something (at least partly) in terms of itself,
which is a naughty no-no in dictionaries but often works out okay
in computer programs if you're careful not to recurse forever, which
is like an infinite loop with more spectacular failure modes.
</p>
</dd>
</dl>

<dl>
<dt>reference</dt>
<dd>
<p>
Where you look to find a pointer to information somewhere else.  (See
<em class="emphasis">indirection</em>.)  References come in two flavors,
<em class="emphasis">symbolic references</em> and
<em class="emphasis">hard references</em>.
</p>
</dd>
</dl>

<dl>
<dt>referent</dt>
<dd>
<p>
Whatever a reference refers to, which may or may not have a name.
Common types of referents include scalars, arrays, hashes, and
subroutines.
</p>
</dd>
</dl>

<dl>
<dt>regex</dt>
<dd>
<p>
See <em class="emphasis">regular expression</em>.
</p>
</dd>
</dl>

<dl>
<dt>regular expression</dt>
<dd>
<p>
A single entity with various interpretations, like an elephant.  To a
computer scientist, it's a grammar for a little language in which some
strings are legal and others aren't.  To normal people, it's a pattern
you can use to find what you're looking for when it varies from
case to case.  Perl's regular expressions are far from regular in the
theoretical sense, but in regular use they work quite well.  Here's
a regular expression: <tt class="literal">/Oh s.*t./</tt>.  This will match
strings like "<tt class="literal">Oh say can you see by the dawn's early
light</tt>" and "<tt class="literal">Oh sit!</tt>".  See
<a href="ch05_01.htm">Chapter 5, "Pattern Matching"</a>.
</p>
</dd>
</dl>

<dl>
<dt>regular expression modifier</dt>
<dd>
<p>
An option on a pattern or substitution, such as <tt class="literal">/i</tt> to render the
pattern case insensitive.  See also <em class="emphasis">cloister</em>.
</p>
</dd>
</dl>

<dl>
<dt>regular file</dt>
<dd>
<p>
A <em class="emphasis">file</em> that's not a <em class="emphasis">directory</em>,
a <em class="emphasis">device</em>, a named <em class="emphasis">pipe</em>
or <em class="emphasis">socket</em>, or a
<em class="emphasis">symbolic link</em>.  Perl uses the <tt class="literal">-f</tt>
file test operator to identify regular files.  Sometimes called a "plain"
file.
</p>
</dd>
</dl>

<dl>
<dt>relational operator</dt>
<dd>
<p>
An <em class="emphasis">operator</em> that says whether a particular ordering relationship is
<em class="emphasis">true</em> about a pair of <em class="emphasis">operands</em>.  Perl has both numeric and string
relational operators.  See <em class="emphasis">collating sequence</em>.
</p>
</dd>
</dl>

<dl>
<dt>reserved words</dt>
<dd>
<p>
A word with a specific, built-in meaning to a
<em class="emphasis">compiler</em>, such as <tt class="literal">if</tt> or
<tt class="literal">delete</tt>.  In many languages (not Perl), it's illegal
to use reserved words to name anything else.  (Which is why they're
reserved, after all.)  In Perl, you just can't use them to name
<em class="emphasis">labels</em> or <em class="emphasis">filehandles</em>.  Also
called "keywords".
</p>
</dd>
</dl>

<dl>
<dt>return value</dt>
<dd>
<p>
The <em class="emphasis">value</em> produced by a
<em class="emphasis">subroutine</em> or <em class="emphasis">expression</em>
when evaluated.  In Perl, a return value may be either a
<em class="emphasis">list</em> or a <em class="emphasis">scalar</em>.
</p>
</dd>
</dl>

<dl>
<dt>RFC</dt>
<dd>
<p>
Request For Comment, which despite the timid connotations is the name
of a series of important standards documents.
</p>
</dd>
</dl>

<dl>
<dt>right shift</dt>
<dd>
<p>
A <em class="emphasis">bit shift</em> that divides a number by some power of 2.
</p>
</dd>
</dl>

<dl>
<dt>root</dt>
<dd>
<p>
The superuser (UID == 0).  Also, the top-level directory of the filesystem.
</p>
</dd>
</dl>

<dl>
<dt>RTFM</dt>
<dd>
<p>
What you are told when someone thinks you should Read The Fine Manual.
</p>
</dd>
</dl>

<dl>
<dt>run phase</dt>
<dd>
<p>
Any time after Perl starts running your main program.  See also
<em class="emphasis">compile phase</em>.  Run phase is mostly spent in
<em class="emphasis">run time</em> but may also be spent in
<em class="emphasis">compile time</em> when <tt class="literal">require</tt>,
<tt class="literal">do</tt><em class="replaceable">FILE</em>, or
<tt class="literal">eval</tt><em class="replaceable">STRING</em>
operators are executed or when a substitution uses
the <tt class="literal">/ee</tt> modifier.
</p>
</dd>
</dl>

<dl>
<dt>run time</dt>
<dd>
<p>
The time when Perl is actually doing what your code says to do, as
opposed to the earlier period of time when it was trying to figure out
whether what you said made any sense whatsoever, which is <em class="emphasis">compile
time</em>.
</p>
</dd>
</dl>

<dl>
<dt>run-time pattern</dt>
<dd>
<p>
A pattern that contains one or more variables to be interpolated
before parsing the pattern as a <em class="emphasis">regular expression</em>, and that therefore
cannot be analyzed at compile time, but must be re-analyzed each time
the pattern match operator is evaluated.  Run-time patterns are useful
but expensive.
</p>
</dd>
</dl>

<dl>
<dt>RV</dt>
<dd>
<p>
A recreational vehicle, not to be confused with vehicular recreation.
RV also means an internal Reference Value of the type a <em class="emphasis">scalar</em> can
hold.  See also <em class="emphasis">IV</em> and <em class="emphasis">NV</em> if you're not confused yet.
</p>
</dd>
</dl>

<dl>
<dt>rvalue</dt>
<dd>
<p>
A <em class="emphasis">value</em> that you might find on the right side of an
<em class="emphasis">assignment</em>.  See also <em class="emphasis">lvalue</em>.
</p>
</dd>
</dl>

<dl>
<dt>scalar</dt>
<dd>
<p>
<a name="INDEX-"></a>
A simple, singular value; a number, <em class="emphasis">string</em>,
or <em class="emphasis">reference</em>.
</p>
</dd>
</dl>

<dl>
<dt>scalar context</dt>
<dd>
<p>
The situation in which an <em class="emphasis">expression</em> is expected
by its surroundings (the code calling it) to return a single
<em class="emphasis">value</em> rather than a <em class="emphasis">list</em> of
values.  See also <em class="emphasis">context</em> and <em class="emphasis">list
context</em>.  A scalar context sometimes imposes
additional constraints on the
return value--see <em class="emphasis">string context</em> and
<em class="emphasis">numeric context</em>.  Sometimes we talk about a
<em class="emphasis">Boolean context</em> inside conditionals,
but this
imposes no additional constraints, since any scalar value, whether
numeric or <em class="emphasis">string</em>, is already true or false.
</p>
</dd>
</dl>

<dl>
<dt>scalar literal</dt>
<dd>
<p>
A number or quoted <em class="emphasis">string</em>--an actual <em class="emphasis">value</em> in the text of your
program, as opposed to a <em class="emphasis">variable</em>.
</p>
</dd>
</dl>

<dl>
<dt>scalar value</dt>
<dd>
<p>
A value that happens to be a <em class="emphasis">scalar</em> as opposed to a <em class="emphasis">list</em>.
</p>
</dd>
</dl>

<dl>
<dt>scalar variable</dt>
<dd>
<p>
A <em class="emphasis">variable</em> prefixed with <tt class="literal">$</tt> that holds a single value.
</p>
</dd>
</dl>

<dl>
<dt>scope</dt>
<dd>
<p>
<a name="INDEX-"></a>
How far away you can see a variable from, looking through one.  Perl
has two visibility mechanisms: it does <em class="emphasis">dynamic
scoping</em> of <tt class="literal">local</tt><em class="emphasis">variables</em>, meaning that the rest of the
<em class="emphasis">block</em>, and any <em class="emphasis">subroutines</em>
that are called by the rest of the block, can see the variables that
are local to the block.  Perl does <em class="emphasis">lexical
scoping</em>&nbsp;of <tt class="literal">my</tt> variables, meaning that
the rest of the block can see the variable, but other subroutines
called by the block <em class="emphasis">cannot</em> see the variable.
</p>
</dd>
</dl>

<dl>
<dt>scratchpad</dt>
<dd>
<p>
The area in which a particular invocation of a particular file or
subroutine keeps some of its temporary values, including any lexically
scoped variables.
</p>
</dd>
</dl>

<dl>
<dt>script</dt>
<dd>
<p>
A text <em class="emphasis">file</em> that is a program intended to be <em class="emphasis">executed</em>
directly rather than <em class="emphasis">compiled</em> to another form of file before
execution.  Also, in the context of <em class="emphasis">Unicode</em>, a writing system for
a particular language or group of languages, such as Greek, Bengali,
or Klingon.
</p>
</dd>
</dl>

<dl>
<dt>script kiddie</dt>
<dd>
<p>
A <em class="emphasis">cracker</em> who is not a <em class="emphasis">hacker</em>, but knows just enough to run canned
scripts.  A cargo-cult programmer.
</p>
</dd>
</dl>

<dl>
<dt>sed</dt>
<dd>
<p>
A venerable Stream EDitor from which Perl derives some of its ideas.
</p>
</dd>
</dl>

<dl>
<dt>semaphore</dt>
<dd>
<p>
<a name="INDEX-"></a>
A fancy kind of interlock that prevents multiple
<em class="emphasis">threads</em> or <em class="emphasis">processes</em> from
using up the same resources simultaneously.
</p>
</dd>
</dl>

<dl>
<dt>separator</dt>
<dd>
<p>
A <em class="emphasis">character</em> or <em class="emphasis">string</em> that keeps two surrounding strings from being
confused with each other.  The <tt class="literal">split</tt> function works on separators.
Not to be confused with <em class="emphasis">delimiters</em> or <em class="emphasis">terminators</em>.  The "or" in
the previous sentence separated the two alternatives.
</p>
</dd>
</dl>

<dl>
<dt>serialization</dt>
<dd>
<p>
Putting a fancy <em class="emphasis">data structure</em> into linear order
so that it can be stored as a <em class="emphasis">string</em> in a disk file
or database or sent through a <em class="emphasis">pipe</em>.  Also called
marshalling.
</p>
</dd>
</dl>

<dl>
<dt>server</dt>
<dd>
<p>
In networking, a <em class="emphasis">process</em> that either advertises a
<em class="emphasis">service</em> or just hangs around at a known location
and waits for <em class="emphasis">clients</em> who need service to get in
touch with it.
</p>
</dd>
</dl>

<dl>
<dt>service</dt>
<dd>
<p>
Something you do for someone else to make them happy, like giving them
the time of day (or of their life).  On some machines, well-known
services are listed by the <tt class="literal">getservent</tt> function.
</p>
</dd>
</dl>

<dl>
<dt>setgid</dt>
<dd>
<p>
Same as <em class="emphasis">setuid</em>, only having to do with
giving away <em class="emphasis">group</em> privileges.
</p>
</dd>
</dl>

<dl>
<dt>setuid</dt>
<dd>
<p>
Said of a program that runs with the privileges of its <em class="emphasis">owner</em>
rather than (as is usually the case) the privileges of whoever is running
it.  Also describes the bit in the mode word (<em class="emphasis">permission
bits</em>) that controls the feature.  This bit must be explicitly set
by the owner to enable this feature, and the program must be
carefully written not to give away more privileges than it ought to.
</p>
</dd>
</dl>

<dl>
<dt>shared memory</dt>
<dd>
<p>
A piece of <em class="emphasis">memory</em> accessible by two different <em class="emphasis">processes</em> who otherwise
would not see each other's memory.
</p>
</dd>
</dl>


<dl>
<dt>shebang</dt>
<dd>
<p>
Irish for the whole McGillicuddy.  In Perl culture, a portmanteau
of "sharp" and "bang", meaning the <tt class="literal">#!</tt> sequence
that tells the system where to find the interpreter.
</p>
</dd>
</dl>


<dl>
<dt>shell</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
A <em class="emphasis">command</em>-line <em class="emphasis">interpreter</em>.
The program that interactively gives you a prompt, accepts one or more
<em class="emphasis">lines</em> of input, and executes the programs you
mentioned, feeding each of them their proper
<em class="emphasis">arguments</em> and input data.  Shells can also
execute scripts containing such commands.  Under Unix, typical shells
include the Bourne shell (<em class="emphasis">/bin/sh</em>), the C shell
(<em class="emphasis">/bin/csh</em>), and the Korn shell
(<em class="emphasis">/bin/ksh</em>).  Perl is not strictly a shell because
it's not interactive (although Perl programs can be interactive).
</p>
</dd>
</dl>

<dl>
<dt>side effects</dt>
<dd>
<p>
Something extra that happens when you evaluate an <em class="emphasis">expression</em>.
Nowadays it can refer to almost anything.  For example, evaluating a simple
assignment statement typically has the "side effect" of assigning a value
to a variable.  (And you thought assigning the value was your primary
intent in the first place!)  Likewise, assigning a value to the special
variable <tt class="literal">$|</tt> (<tt class="literal">$AUTOFLUSH</tt>) has the side effect of forcing a
flush after every <tt class="literal">write</tt> or <tt class="literal">print</tt> on the currently selected
filehandle.
</p>
</dd>
</dl>

<dl>
<dt>signal</dt>
<dd>
<p>
A bolt out of the blue; that is, an event triggered by the <em class="emphasis">operating
system</em>, probably when you're least expecting it.
</p>
</dd>
</dl>

<dl>
<dt>signal handler</dt>
<dd>
<p>
A <em class="emphasis">subroutine</em> that, instead of being content to be
called in the normal fashion, sits around waiting for a bolt out of
the blue before it will deign to <em class="emphasis">execute</em>.  Under
Perl, bolts out of the blue are called signals, and you send them with
the <tt class="literal">kill</tt> built-in.  See the <tt class="literal">%SIG</tt>
hash in <a href="ch28_01.htm">Chapter 28, "Special Names"</a>, and the section
"Signals" in <a href="ch16_01.htm">Chapter 16, "Interprocess Communication"</a>.
</p>
</dd>
</dl>

<dl>
<dt>single inheritance</dt>
<dd>
<p>
The features you got from your mother, if she told you that you
don't have a father.  (See also <em class="emphasis">inheritance</em>
and <em class="emphasis">multiple inheritance</em>.)  In computer languages,
the notion that <em class="emphasis">classes</em>
reproduce asexually so that a given class can only have one direct
ancestor or <em class="emphasis">base class</em>.  Perl supplies no such restriction, though
you may certainly program Perl that way if you like.
</p>
</dd>
</dl>

<dl>
<dt>slice</dt>
<dd>
<p>
A selection of any number of <em class="emphasis">elements</em> from a <em class="emphasis">list</em>, <em class="emphasis">array</em>,
or <em class="emphasis">hash</em>.
</p>
</dd>
</dl>

<dl>
<dt>slurp</dt>
<dd>
<p>
<a name="INDEX-"></a>
To read an entire <em class="emphasis">file</em> into a <em class="emphasis">string</em> in one operation.
</p>
</dd>
</dl>

<dl>
<dt>socket</dt>
<dd>
<p>
An endpoint for network communication among multiple
<em class="emphasis">processes</em>
that works much like a telephone or a post office box.  The most
important thing about a socket is its <em class="emphasis">network
address</em> (like a phone
number).  Different kinds of sockets have different kinds of
addresses--some look like filenames, and some don't.
</p>
</dd>
</dl>

<dl>
<dt>soft reference</dt>
<dd>
<p>
See <em class="emphasis">symbolic reference</em>.
</p>
</dd>
</dl>

<dl>
<dt>source filter</dt>
<dd>
<p>
A special kind of <em class="emphasis">module</em> that does <em class="emphasis">preprocessing</em> on your script just
before it gets to the <em class="emphasis">tokener</em>.
</p>
</dd>
</dl>

<dl>
<dt>stack</dt>
<dd>
<p>
A device you can put things on the top of, and later take them back
off in the opposite order in which you put them on.  See
<em class="emphasis">LIFO</em>.
</p>
</dd>
</dl>

<dl>
<dt>standard</dt>
<dd>
<p>
Included in the official Perl distribution, as in a standard module,
a standard tool, or a standard Perl <em class="emphasis">manpage</em>.
</p>
</dd>
</dl>

<dl>
<dt>standard error</dt>
<dd>
<p>
The default output <em class="emphasis">stream</em> for nasty remarks that don't belong in
<em class="emphasis">standard output</em>.  Represented within a Perl program by the
<em class="emphasis">filehandle</em><tt class="literal">STDERR</tt>.  You can use this stream explicitly, but the
<tt class="literal">die</tt> and <tt class="literal">warn</tt> built-ins write to your standard error stream
automatically.
</p>
</dd>
</dl>

<dl>
<dt>standard I/O</dt>
<dd>
<p>
A standard C library for doing <em class="emphasis">buffered</em> input and output to the
<em class="emphasis">operating system</em>.  (The "standard" of standard I/O is only marginally
related to the "standard" of standard input and output.)  In general,
Perl relies on whatever implementation of standard I/O a given operating
system supplies, so the buffering characteristics of a Perl program on
one machine may not exactly match those on another machine.  Normally
this only influences efficiency, not semantics.  If your standard I/O
package is doing block buffering and you want it to <em class="emphasis">flush</em> the buffer
more often, just set the <tt class="literal">$|</tt> variable to a true value.
</p>
</dd>
</dl>

<dl>
<dt>standard input</dt>
<dd>
<p>
The default input <em class="emphasis">stream</em> for your program, which if possible shouldn't
care where its data is coming from.  Represented within a Perl program
by the <em class="emphasis">filehandle</em><tt class="literal">STDIN</tt>.
</p>
</dd>
</dl>

<dl>
<dt>standard output</dt>
<dd>
<p>
The default output <em class="emphasis">stream</em> for your program, which if possible shouldn't
care where its data is going.  Represented within a Perl program by the
<em class="emphasis">filehandle</em><tt class="literal">STDOUT</tt>.
</p>
</dd>
</dl>

<dl>
<dt>stat structure</dt>
<dd>
<p>
A special internal spot in which Perl keeps the information about the
last <em class="emphasis">file</em> on which you requested information.
</p>
</dd>
</dl>

<dl>
<dt>statement</dt>
<dd>
<p>
A <em class="emphasis">command</em> to the computer about what to do next, like a step in a
recipe:  "Add marmalade to batter and mix until mixed."  A statement is
distinguished from a <em class="emphasis">declaration</em>, which doesn't tell the computer to
do anything, but just to learn something.
</p>
</dd>
</dl>

<dl>
<dt>statement modifier</dt>
<dd>
<p>
A <em class="emphasis">conditional</em> or <em class="emphasis">loop</em> that you put after the <em class="emphasis">statement</em> instead
of before, if you know what we mean.
</p>
</dd>
</dl>

<dl>
<dt>static</dt>
<dd>
<p>
Varying slowly compared to something else.  (Unfortunately, everything
is relatively stable compared to something else, except for certain
elementary particles, and we're not so sure about them.)  In
computers, where things are supposed to vary rapidly, "static" has
a derogatory connotation, indicating a slightly dysfunctional
<em class="emphasis">variable</em>, <em class="emphasis">subroutine</em>, or <em class="emphasis">method</em>.  In Perl culture, the
word is politely avoided.
</p>
</dd>
</dl>

<dl>
<dt>static method</dt>
<dd>
<p>
No such thing.  See <em class="emphasis">class method</em>.
</p>
</dd>
</dl>

<dl>
<dt>static scoping</dt>
<dd>
<p>
No such thing.  See <em class="emphasis">lexical scoping</em>.
</p>
</dd>
</dl>

<dl>
<dt>static variable</dt>
<dd>
<p>
No such thing.  Just use a <em class="emphasis">lexical variable</em> in a scope larger than
your <em class="emphasis">subroutine</em>.
</p>
</dd>
</dl>

<dl>
<dt>status</dt>
<dd>
<p>
The <em class="emphasis">value</em> returned to the parent <em class="emphasis">process</em> when one of its
child processes dies.  This value is placed in the special variable
<tt class="literal">$?</tt>.  Its upper eight <em class="emphasis">bits</em> are the exit status of the defunct
process, and its lower eight bits identify the signal (if any) that the
process died from.  On Unix systems, this status value is the same as the
status word returned by <em class="emphasis">wait</em>(2).  See
<tt class="literal">system</tt> in 
<a href="ch29_01.htm">Chapter 29, "Functions"</a>.
</p>
</dd>
</dl>

<dl>
<dt>STDERR</dt>
<dd>
<p>
See <em class="emphasis">standard error</em>.
</p>
</dd>
</dl>

<dl>
<dt>STDIN</dt>
<dd>
<p>
See <em class="emphasis">standard input</em>.
</p>
</dd>
</dl>

<dl>
<dt>STDIO</dt>
<dd>
<p>
See <em class="emphasis">standard I/O</em>.
</p>
</dd>
</dl>

<dl>
<dt>STDOUT</dt>
<dd>
<p>
See <em class="emphasis">standard output</em>.
</p>
</dd>
</dl>

<dl>
<dt>stream</dt>
<dd>
<p>
A flow of data into or out of a process as a steady sequence of bytes
or characters, without the appearance of being broken up into packets.
This is a kind of <em class="emphasis">interface</em>--the underlying <em class="emphasis">implementation</em> may
well break your data up into separate packets for delivery, but this is
hidden from you.
</p>
</dd>
</dl>

<dl>
<dt>string</dt>
<dd>
<p>
A sequence of characters such as "He said !@#*&amp;%@#*?!".  A string
does not have to be entirely printable.
</p>
</dd>
</dl>

<dl>
<dt>string context</dt>
<dd>
<p>
The situation in which an expression is
expected by its surroundings (the code calling it) to return a <em class="emphasis">string</em>.
See also <em class="emphasis">context</em> and <em class="emphasis">numeric context</em>.
</p>
</dd>
</dl>

<dl>
<dt>stringification</dt>
<dd>
<p>
The process of producing a <em class="emphasis">string</em> representation of an abstract object.
</p>
</dd>
</dl>

<dl>
<dt>struct</dt>
<dd>
<p>
C keyword introducing a structure definition or name.
</p>
</dd>
</dl>

<dl>
<dt>structure</dt>
<dd>
<p>
See <em class="emphasis">data structure</em>.
</p>
</dd>
</dl>

<dl>
<dt>subclass</dt>
<dd>
<p>
See <em class="emphasis">derived class</em>.
</p>
</dd>
</dl>

<dl>
<dt>subpattern</dt>
<dd>
<p>
A component of a <em class="emphasis">regular expression</em> pattern.
</p>
</dd>
</dl>

<dl>
<dt>subroutine</dt>
<dd>
<p>
A named or otherwise accessible piece of program that can be invoked
from elsewhere in the program in order to accomplish some sub-goal of
the program.  A subroutine is often parameterized to accomplish
different but related things depending on its input <em class="emphasis">arguments</em>.  If
the subroutine returns a meaningful <em class="emphasis">value</em>, it is also called a
<em class="emphasis">function</em>.
</p>
</dd>
</dl>

<dl>
<dt>subscript</dt>
<dd>
<p>
<a name="INDEX-"></a>
A <em class="emphasis">value</em> that indicates the position of a particular <em class="emphasis">array</em><em class="emphasis">element</em> in an array.
</p>
</dd>
</dl>

<dl>
<dt>substitution</dt>
<dd>
<p>
<a name="INDEX-"></a>
Changing parts of a string via the <tt class="literal">s///</tt> operator.  (We avoid use of
this term to mean <em class="emphasis">variable interpolation</em>.)
</p>
</dd>
</dl>

<dl>
<dt>substring</dt>
<dd>
<p>
<a name="INDEX-"></a>
A portion of a <em class="emphasis">string</em>, starting at a certain <em class="emphasis">character</em> position
(<em class="emphasis">offset</em>) and proceeding for a certain number of characters.
</p>
</dd>
</dl>

<dl>
<dt>superclass</dt>
<dd>
<p>
See <em class="emphasis">base class</em>.
</p>
</dd>
</dl>

<dl>
<dt>superuser</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a>
The person whom the <em class="emphasis">operating system</em> will let do
almost anything.  Typically your system administrator or someone
pretending to be your system administrator.  On Unix systems, the
<em class="emphasis">root</em> user.  On Windows systems, usually the
Administrator user.
</p>
</dd>
</dl>

<dl>
<dt>SV</dt>
<dd>
<p>
Short for "scalar value".  But within the Perl interpreter every
<em class="emphasis">referent</em> is treated as a member of a class
derived from SV, in an object-oriented sort of way.  Every
<em class="emphasis">value</em> inside Perl is passed around as a C
language <tt class="literal">SV*</tt> pointer.  The SV
<em class="emphasis">struct</em> knows its own "referent type", and the
code is smart enough (we hope) not to try to call a
<em class="emphasis">hash</em> function on a
<em class="emphasis">subroutine</em>.
</p>
</dd>
</dl>

<dl>
<dt>switch</dt>
<dd>
<p>
<a name="INDEX-"></a>
An option you give on a command line to influence the way your
program works, usually introduced with a minus sign.  The word is
also used as a nickname for a <em class="emphasis">switch statement</em>.
</p>
</dd>
</dl>

<dl>
<dt>switch cluster</dt>
<dd>
<p>
The combination of multiple command-line switches
(e.g., <span class="option">-a -b -c</span>) into one switch
(e.g., <span class="option">-abc</span>).  Any switch with an additional
<em class="emphasis">argument</em>
must be the last switch in a cluster.
</p>
</dd>
</dl>

<dl>
<dt>switch statement</dt>
<dd>
<p>
A program technique that lets you evaluate an <em class="emphasis">expression</em> and then,
based on the value of the expression, do a multiway branch to the
appropriate piece of code for that value.  Also called a "case
structure", named after the similar Pascal construct.  Most switch
statements in Perl are spelled <tt class="literal">for</tt>.  See "Case Structures"
in <a href="ch04_01.htm">Chapter 4, "Statements and Declarations"</a>.
</p>
</dd>
</dl>

<dl>
<dt>symbol</dt>
<dd>
<p>
Generally, any <em class="emphasis">token</em> or <em class="emphasis">metasymbol</em>.  Often used more specifically
to mean the sort of name you might find in a <em class="emphasis">symbol table</em>.
</p>
</dd>
</dl>

<dl>
<dt>symbol table</dt>
<dd>
<p>
Where a <em class="emphasis">compiler</em> remembers symbols.  A program
like Perl must somehow remember all the names of all the
<em class="emphasis">variables</em>, <em class="emphasis">filehandles</em>, and <em class="emphasis">subroutines</em> you've used.
It does this by placing the names in a symbol table, which is
implemented in Perl using a <em class="emphasis">hash table</em>.  There is a separate
symbol table for each <em class="emphasis">package</em> to give each package its own
<em class="emphasis">namespace</em>.
</p>
</dd>
</dl>

<dl>
<dt>symbolic debugger</dt>
<dd>
<p>
<a name="INDEX-"></a><a name="INDEX-"></a><a name="INDEX-"></a>
A program that lets you step through the <em class="emphasis">execution</em> of your
program, stopping or printing things out here and there to see whether
anything has gone wrong, and if so, what.  The "symbolic" part just
means that you can talk to the debugger using the same symbols with which
your program is written.
</p>
</dd>
</dl>

<dl>
<dt>symbolic link</dt>
<dd>
<p>
An alternate filename that points to the real <em class="emphasis">filename</em>, which
in turn points to the real <em class="emphasis">file</em>.  Whenever the <em class="emphasis">operating system</em>
is trying to parse a <em class="emphasis">pathname</em> containing a symbolic link, it merely
substitutes the new name and continues parsing.
</p>
</dd>
</dl>

<dl>
<dt>symbolic reference</dt>
<dd>
<p>
<a name="INDEX-"></a>
A variable whose value is the name of another variable or subroutine.  By
<em class="emphasis">dereferencing</em> the first variable, you can get at the second one.
Symbolic references are illegal under <tt class="literal">use strict 'refs'</tt>.
</p>
</dd>
</dl>

<dl>
<dt>synchronous</dt>
<dd>
<p>
<a name="INDEX-"></a>
Programming in which the orderly sequence of events can be determined;
that is, when things happen one after the other, not at the same time.
</p>
</dd>
</dl>


<dl>
<dt>syntactic sugar</dt>
<dd>
<p>
<a name="INDEX-"></a>
An alternative way of writing something more easily; a shortcut.
</p>
</dd>
</dl>


<dl>
<dt>syntax</dt>
<dd>
<p>
<a name="INDEX-"></a>
From Greek, "with-arrangement".  How things (particularly symbols)
are put together with each other.
</p>
</dd>
</dl>

<dl>
<dt>syntax tree</dt>
<dd>
<p>
An internal representation of your program wherein lower-level
<em class="emphasis">constructs</em> dangle off the higher-level constructs enclosing them.
</p>
</dd>
</dl>

<dl>
<dt>syscall</dt>
<dd>
<p>
<a name="INDEX-"></a>
A <em class="emphasis">function</em> call directly to the
<em class="emphasis">operating system</em>.  Many of the important
subroutines and functions you use aren't direct system calls, but are
built up in one or more layers above the system call level.  In
general, Perl programmers don't need to worry about the distinction.
However, if you do happen to know which Perl functions are really
syscalls, you can predict which of these will set the
<tt class="literal">$!</tt> (<tt class="literal">$ERRNO</tt>) variable on failure.
Unfortunately, beginning programmers often confusingly employ the term
"system call" to mean what happens when you call the Perl
<tt class="literal">system</tt> function, which actually involves many
syscalls.  To avoid any confusion, we nearly always use say "syscall"
for something you could call indirectly via Perl's
<tt class="literal">syscall</tt> function, and never for something you would
call with Perl's <tt class="literal">system</tt> function.

</p>
</dd>
</dl>

<dl>
<dt>tainted</dt>
<dd>
<p>
<a name="INDEX-"></a>
Said of data derived from the grubby hands of a user and thus
unsafe for a secure program to rely on.  Perl does taint checks if
you run a <em class="emphasis">setuid</em> (or
<em class="emphasis">setgid</em>) program, or if you use the
<span class="option">-T</span> switch.
</p>
</dd>
</dl>

<dl>
<dt>TCP</dt>
<dd>
<p>
<a name="INDEX-"></a>
Short for Transmission Control Protocol.  A protocol wrapped around the
Internet Protocol to make an unreliable packet transmission mechanism
appear to the application program to be a reliable <em class="emphasis">stream</em> of bytes.  (Usually.)
</p>
</dd>
</dl>

<dl>
<dt>term</dt>
<dd>
<p>
<a name="INDEX-"></a>
Short for a "terminal", that is, a leaf node of a <em class="emphasis">syntax tree</em>.
A thing that functions grammatically as an <em class="emphasis">operand</em> for the
operators in an expression.
</p>
</dd>
</dl>

<dl>
<dt>terminator</dt>
<dd>
<p>
A <em class="emphasis">character</em> or <em class="emphasis">string</em>
that marks the end of another string.  The <tt class="literal">$/</tt> variable
contains the string that terminates a <tt class="literal">readline</tt>
operation, which <tt class="literal">chomp</tt> deletes from the end.  Not
to be&nbsp;confused with <em class="emphasis">delimiters</em> or 
<em class="emphasis">separators</em>.  The&nbsp;period at the end of this 
sentence is a
terminator.
</p>
</dd>
</dl>

<dl>
<dt>ternary</dt>
<dd>
<p>
An <em class="emphasis">operator</em> taking three <em class="emphasis">operands</em>.  Sometimes pronounced <em class="emphasis">trinary</em>.
</p>
</dd>
</dl>

<dl>
<dt>text</dt>
<dd>
<p>
A <em class="emphasis">string</em> or <em class="emphasis">file</em> containing primarily printable characters.
</p>
</dd>
</dl>

<dl>
<dt>thread</dt>
<dd>
<p>
Like a forked process, but without <em class="emphasis">fork</em>'s
inherent memory protection.  A thread is lighter weight than a full
process, in that a process could have multiple threads running around
in it, all fighting over the same process's memory space unless steps
are taken to protect threads from each other.  See
<a href="ch17_01.htm">Chapter 17, "Threads"</a>.
</p>
</dd>
</dl>

<dl>
<dt>tie</dt>
<dd>
<p>
The bond between a magical variable and its implementation class.
See the <tt class="literal">tie</tt> function in
<a href="ch29_01.htm">Chapter 29, "Functions"</a> and 
<a href="ch14_01.htm">Chapter 14, "Tied Variables"</a>.
</p>
</dd>
</dl>

<dl>
<dt>TMTOWTDI</dt>
<dd>
<p>
There's More Than One Way To Do It, the Perl Motto.  The notion that
there can be more than one valid path to solving a programming problem
in context.  (This doesn't mean that more ways are always better or
that all possible paths are equally desirable--just that there need not
be One True Way.)
</p>
</dd>
</dl>

<dl>
<dt>token</dt>
<dd>
<p>
A morpheme in a programming language, the smallest unit of text with
semantic significance.
</p>
</dd>
</dl>

<dl>
<dt>tokener</dt>
<dd>
<p>
A module that breaks a program text into a sequence of <em class="emphasis">tokens</em> for
later analysis by a parser.
</p>
</dd>
</dl>

<dl>
<dt>tokenizing</dt>
<dd>
<p>
Splitting up a program text into <em class="emphasis">tokens</em>.  Also known as "lexing", in
which case you get "lexemes" instead of tokens.
</p>
</dd>
</dl>

<dl>
<dt>toolbox approach</dt>
<dd>
<p>
The notion that, with a complete set of simple tools that work well
together, you can build almost anything you want.  Which is fine if
you're assembling a tricycle, but if you're building a defranishizing
comboflux regurgalator, you really want your own machine shop in
which to build special tools.  Perl is sort of a machine shop.
</p>
</dd>
</dl>

<dl>
<dt>transliterate</dt>
<dd>
<p>
To turn one string representation into another by mapping each
character of the source string to its corresponding character in the
result string.  See the <tt class="literal">tr///</tt> operator in 
<a href="ch05_01.htm">Chapter 5, "Pattern Matching"</a>.
</p>
</dd>
</dl>

<dl>
<dt>trigger</dt>
<dd>
<p>
An event that causes a <em class="emphasis">handler</em> to be run.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>trinary</dt>
<dd>
<p>
Not a stellar system with three stars, but an <em class="emphasis">operator</em> taking three
<em class="emphasis">operands</em>.  Sometimes pronounced <em class="emphasis">ternary</em>.
</p>
</dd>
</dl>

<dl>
<dt>troff</dt>
<a name="INDEX-"></a>
<dd>
<p>
A venerable typesetting language from which Perl derives the name of
its <tt class="literal">$%</tt> variable and which is secretly used in the
production of Camel books.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>true</dt>
<dd>
<p>
Any scalar value that doesn't evaluate to 0 or <tt class="literal">""</tt>.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>truncating</dt>
<dd>
<p>
Emptying a file of existing contents, either automatically
when opening a file for writing or explicitly via the
<tt class="literal">truncate</tt> function.
</p>
</dd>
</dl>

<dl>
<dt>type</dt>
<dd>
<p>
See <em class="emphasis">data type</em> and <em class="emphasis">class</em>.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>type casting</dt>
<dd>
<p>
Converting data from one type to another.  C&nbsp;permits this.  Perl
does not need it.  Nor want&nbsp;it.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>typed lexical</dt>
<dd>
<p>
A <em class="emphasis">lexical variable</em> that is declared with a <em class="emphasis">class</em> type: <tt class="literal">my Pony $bill</tt>.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>typedef</dt>
<dd>
<p>
A type definition in the C language.
</p>
</dd>
</dl>

<dl>
<dt>typeglob</dt>
<dd>
<p>
Use of a single identifier, prefixed with <tt class="literal">*</tt>.  For
example, <tt class="literal">*name</tt> stands for any or all of
<tt class="literal">$name</tt>, <tt class="literal">@name</tt>, 
<tt class="literal">%name</tt>, <tt class="literal">&amp;name</tt>,
or just <tt class="literal">name</tt>.  How you use it determines whether 
it is interpreted as all or only one of them.  See "Typeglobs and
Filehandles" in <a href="ch02_01.htm">Chapter 2, "Bits and Pieces"</a>.
</p>
</dd>
</dl>

<dl>
<dt>typemap</dt>
<dd>
<p>
A description of how C types may be transformed to and from Perl types
within an <em class="emphasis">extension</em> module written in <em class="emphasis">XS</em>.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>UDP</dt>
<dd>
<p>
User Datagram Protocol, the typical way to send <em class="emphasis">datagrams</em> over the
Internet.
</p>
</dd>
</dl>

<dl>
<dt>UID</dt>
<dd>
<p>
A user ID.  Often used in the context of <em class="emphasis">file</em>
or <em class="emphasis">process</em> ownership.
</p>
</dd>
</dl>

<dl>
<dt>umask</dt>
<dd>
<p>
<a name="INDEX-"></a>
A mask of those <em class="emphasis">permission bits</em> that should
be&nbsp;forced off when creating files or directories, in&nbsp;order
to establish a policy of whom you'll ordinarily deny access to.  See
the <tt class="literal">umask</tt> function.
</p>
</dd>
</dl>

<dl>
<dt>unary operator</dt>
<dd>
<p>
An operator with only one <em class="emphasis">operand</em>, like <tt class="literal">!</tt> or <tt class="literal">chdir</tt>.
Unary operators are usually prefix operators; that is, they precede
their operand.  The <tt class="literal">++</tt> and <tt class="literal">--</tt> operators can be either
prefix or postfix.  (Their position <em class="emphasis">does</em> change their meanings.)
</p>
</dd>
</dl>

<dl>
<dt>Unicode</dt>
<dd>
<p>
A character set comprising all the major character sets of
the world, more or less.  See <em class="emphasis">http://www.unicode.org</em>.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>Unix</dt>
<dd>
<p>
A very large and constantly evolving language with several alternative and
largely incompatible syntaxes, in which anyone can define
anything any way they choose, and usually do.  Speakers of this language
think it's easy to learn because it's so easily twisted to one's own
ends, but dialectical differences make tribal intercommunication nearly
impossible, and travelers are often reduced to a pidgin-like subset of
the language.  To be universally understood, a Unix shell programmer
must spend years of study in the art.  Many have abandoned this
discipline and now communicate via an Esperanto-like language called
Perl.

In ancient times, Unix was also used to refer to some code that a couple
of people at Bell Labs wrote to make use of a PDP-7 computer that wasn't
doing much of anything else at the time.
</p>
</dd>
</dl>

<dl>
<dt>value</dt>
<dd>
<p>
An actual piece of data, in contrast to all the variables, references,
keys, indexes, operators, and whatnot that you need to access the value.
</p>
</dd>
</dl>

<dl>
<dt>variable</dt>
<dd>
<p>
A named storage location that can hold any of&nbsp;various kinds of
<em class="emphasis">value</em>, as your program sees&nbsp;fit.
</p>
</dd>
</dl>

<dl>
<dt>variable interpolation</dt>
<dd>
<p>
The <em class="emphasis">interpolation</em> of a scalar or array variable
into a string.
</p>
</dd>
</dl>

<dl>
<dt>variadic</dt>
<dd>
<p>
Said of a <em class="emphasis">function</em> that happily receives an
indeterminate number of <em class="emphasis">actual arguments</em>.
</p>
</dd>
</dl>

<dl>
<dt>vector</dt>
<dd>
<p>
Mathematical jargon for a list of <em class="emphasis">scalar values</em>.
</p>
</dd>
</dl>

<dl>
<dt>virtual</dt>
<dd>
<p>
Providing the appearance of something without the reality, as in:
virtual memory is not real memory.  (See also
<em class="emphasis">memory</em>.)  The opposite of
"virtual" is "transparent", which means providing the reality of
something without the appearance, as in: Perl handles the
variable-length UTF-8 character encoding transparently.
</p>
</dd>
</dl>

<dl>
<dt>void context</dt>
<dd>
<p>
A form of <em class="emphasis">scalar context</em> in which an
<em class="emphasis">expression</em> is not expected to return any
<em class="emphasis">value</em> at all and is evaluated for its
<em class="emphasis">side effects</em> alone.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>v-string</dt>
<dd>
<p>
A "version" or "vector" <em class="emphasis">string</em> specified with a <tt class="literal">v</tt> followed by a
series of decimal integers in dot notation, for instance, 
<tt class="literal">v1.20.300.4000</tt>.  Each number turns into a <em class="emphasis">character</em> with the specified
ordinal value.  (The <tt class="literal">v</tt> is optional when there are at least three
integers.)
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>warning</dt>
<dd>
<p>
A message printed to the <tt class="literal">STDERR</tt> stream to the
effect that something might be wrong but isn't worth blowing up over.
See <tt class="literal">warn</tt> in <a href="ch29_01.htm">Chapter 29, "Functions"</a>
and the <tt class="literal">use warnings</tt> pragma in
<a href="ch31_01.htm">Chapter 31, "Pragmatic Modules"</a>.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>watch expression</dt>
<dd>
<p>
An expression which, when its value changes, causes a breakpoint in the
Perl debugger.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>whitespace</dt>
<dd>
<p>
A <em class="emphasis">character</em> that moves your cursor but doesn't otherwise
put anything on your screen.  Typically refers to any of: space, tab,
line feed, carriage return, or form feed.
</p>
</dd>
</dl>

<dl>
<dt>word</dt>
<dd>
<p>
<a name="INDEX-"></a>
In normal "computerese", the piece of data of the size most efficiently
handled by your computer, typically 32 bits or so, give or take
a few powers of 2.  In Perl culture, it more often refers to an
alphanumeric <em class="emphasis">identifier</em> (including underscores),
or to a string of nonwhitespace <em class="emphasis">characters</em>
bounded by whitespace or string boundaries.
</p>
</dd>
</dl>

<dl>
<dt>working directory</dt>
<dd>
<p>
Your current <em class="emphasis">directory</em>, from which relative pathnames are
interpreted by the <em class="emphasis">operating system</em>.  The operating system knows
your current directory because you told it with a <tt class="literal">chdir</tt> or
because you started out in the place where your parent <em class="emphasis">process</em> was
when you were born.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>wrapper</dt>
<dd>
<p>
A program or subroutine that runs some other program or subroutine for
you, modifying some of its input or output to better suit your
purposes.
</p>
</dd>
</dl>

<dl>
<dt>WYSIWYG</dt>
<dd>
<p>
What You See Is What You Get.  Usually used when something that
appears on the screen matches how it will eventually look, like
Perl's <tt class="literal">format</tt> declarations.  Also used to mean
the opposite of magic because everything works exactly as it appears,
as in the three-argument form of <tt class="literal">open</tt>.
</p>
</dd>
</dl>

<dl>
<dt>XS</dt>
<dd>
<p>
An extraordinarily exported, expeditiously excellent, expressly
eXternal Subroutine, executed in existing C or C++ or in an exciting
new extension language called (exasperatingly) XS.  Examine 
<a href="ch21_01.htm">Chapter 21, "Internals and Externals"</a>,
for the exact explanation.
</p>
</dd>
</dl>

<dl>
<dt>XSUB</dt>
<dd>
<p>
An external <em class="emphasis">subroutine</em> defined in <em class="emphasis">XS</em>.
</p>
</dd>
</dl>

<dl>
<dt>yacc</dt>
<dd>
<p>
Yet Another Compiler Compiler.  A parser generator
without which Perl probably would not have existed.  See
the file <em class="emphasis">perly.y</em> in the Perl source distribution.
</p>
</dd>
</dl>

<dl>
<dt>zero width</dt>
<dd>
<p>
A subpattern <em class="emphasis">assertion</em> matching the <em class="emphasis">null string</em> between <em class="emphasis">characters</em>.
</p>
</dd>
</dl>

<dl>
<a name="INDEX-"></a>
<dt>zombie</dt>
<dd>
<p>
A process that has died (exited) but whose parent has not yet
received proper notification of its demise by virtue of having
called <tt class="literal">wait</tt> or <tt class="literal">waitpid</tt>.  If you <tt class="literal">fork</tt>, you must clean up
after your child processes when they exit, or else the process table
will fill up and your system administrator will Not Be Happy with you.
</p>
</dd>
</dl>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch33_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"></td>
</tr>
<tr>
<td align="left" valign="top" width="172">Chapter 33. Diagnostic Messages</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172"></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog3/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>


<br>


<table border=0 align=center>
<tr><td>


<script type="text/javascript"><!--
google_ad_client = "pub-0321943928525350";
/* 468x60, main footer */
google_ad_slot = "1100896219";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>

<script>
user = "2823";
page = "2";

</script>



</td>
<td>

<!-- Ukrainian Banner Network 468x60 START -->
<center>
<script>
//<!--
user = "2823";
page = "2";
pid = Math.round((Math.random() * (10000000 - 1)));
document.write("<iframe src='http://banner.kiev.ua/cgi-bin/bi.cgi?h" +
user + "&amp;"+ pid + "&amp;" + page + "' frameborder=0 vspace=0 hspace=0 " +
" width=468 height=60 marginwidth=0 marginheight=0 scrolling=no>");
document.write("<a href='http://banner.kiev.ua/cgi-bin/bg.cgi?" +
user + "&amp;"+ pid + "&amp;" + page + "' target=_top>");
document.write("<img border=0 src='http://banner.kiev.ua/" +
"cgi-bin/bi.cgi?i" + user + "&amp;" + pid + "&amp;" + page +
"' width=468 height=60 alt='хЛТБЙОУЛБС вБООЕТОБС уЕФШ'></a>");
document.write("</iframe>");
//-->
</script>
</center>
<!-- Ukrainian Banner Network 468x60 END -->


</td></tr>
<tr><td colspan=2>
<br>
<hr size=1>



<!-- SpyLOG -->
<script src="http://tools.spylog.ru/counter_cv.js" id="spylog_code" type="text/javascript" counter="1028713" part="docs" track_links="ext" page_level="0">
</script>
<noscript>
<a href="http://u10287.13.spylog.com/cnt?cid=1028713&f=3&p=0" target="_blank">
<img src="http://u10287.13.spylog.com/cnt?cid=1028713&p=0" alt="SpyLOG" border="0" width="88" height="31"></a>
</noscript>
<!--/ SpyLOG -->

<!--bigmir)net TOP 100-->
<script type="text/javascript" language="javascript"><!--
function BM_Draw(oBM_STAT){
document.write('<table cellpadding="0" cellspacing="0" border="0" style="display:inline;margin-right:4px;"><tr><td><div style="margin:0px;padding:0px;font-size:1px;width:88px;"><div style="background:url(\'http://i.bigmir.net/cnt/samples/diagonal/b59_top.gif\') no-repeat bottom;">&nbsp;</div><div style="font:10px Tahoma;background:url(\'http://i.bigmir.net/cnt/samples/diagonal/b59_center.gif\');"><div style="text-align:center;"><a href="http://www.bigmir.net/" target="_blank" style="color:#0000ab;text-decoration:none;font:10px Tahoma;">bigmir<span style="color:#ff0000;">)</span>net</a></div><div style="margin-top:3px;padding: 0px 6px 0px 6px;color:#003596;"><div style="float:left;font:10px Tahoma;">'+oBM_STAT.hosts+'</div><div style="float:right;font:10px Tahoma;">'+oBM_STAT.hits+'</div></div><br clear="all"/></div><div style="background:url(\'http://i.bigmir.net/cnt/samples/diagonal/b59_bottom.gif\') no-repeat top;">&nbsp;</div></div></td></tr></table>');
}
//-->
</script>

<script type="text/javascript" language="javascript"><!--
bmN=navigator,bmD=document,bmD.cookie='b=b',i=0,bs=[],bm={o:1,v:126595,s:126595,t:0,c:bmD.cookie?1:0,n:Math.round((Math.random()* 1000000)),w:0};
for(var f=self;f!=f.parent;f=f.parent)bm.w++;
try{if(bmN.plugins&&bmN.mimeTypes.length&&(x=bmN.plugins['Shockwave Flash']))bm.m=parseInt(x.description.replace(/([a-zA-Z]|s)+/,''));
else for(var f=3;f<20;f++)if(eval('new ActiveXObject("ShockwaveFlash.ShockwaveFlash.'+f+'")'))bm.m=f}catch(e){;}
try{bm.y=bmN.javaEnabled()?1:0}catch(e){;}
try{bmS=screen;bm.v^=bm.d=bmS.colorDepth||bmS.pixelDepth;bm.v^=bm.r=bmS.width}catch(e){;}
r=bmD.referrer.slice(7);if(r&&r.split('/')[0]!=window.location.host){bm.f=escape(r);bm.v^=r.length}
bm.v^=window.location.href.length;for(var x in bm) if(/^[ovstcnwmydrf]$/.test(x)) bs[i++]=x+bm[x];
bmD.write('<sc'+'ript type="text/javascript" language="javascript" src="http://c.bigmir.net/?'+bs.join('&')+'"></sc'+'ript>');
//-->
</script>
<noscript>
<a href="http://www.bigmir.net/" target="_blank"><img src="http://c.bigmir.net/?v126595&s126595&t2" width="88" height="31" alt="bigmir)net TOP 100" title="bigmir)net TOP 100" border="0" /></a>
</noscript>
<!--bigmir)net TOP 100-->

<!--begin of Rambler's Top100 code -->
<a href="http://top100.rambler.ru/top100/">
<img src="http://counter.rambler.ru/top100.cnt?692798" alt="" width=1 height=1 border=0></a>
<!--end of Top100 code-->

<!--begin of Top100 logo-->
<a href="http://top100.rambler.ru/top100/">
<img src="http://top100-images.rambler.ru/top100/w1.gif" alt="Rambler's Top100" width=88 height=31 
border=0></a>
<!--end of Top100 logo -->


<!-- hit.ua -->
<a href='http://hit.ua/?x=3601' target='_blank'>
<script language="javascript" type="text/javascript"><!--
Cd=document;Cr="&"+Math.random();Cp="&s=1";
Cd.cookie="b=b";if(Cd.cookie)Cp+="&c=1";
Cp+="&t="+(new Date()).getTimezoneOffset();
if(self!=top)Cp+="&f=1";
//--></script>
<script language="javascript1.1" type="text/javascript"><!--
if(navigator.javaEnabled())Cp+="&j=1";
//--></script>
<script language="javascript1.2" type="text/javascript"><!--
if(typeof(screen)!='undefined')Cp+="&w="+screen.width+"&h="+
screen.height+"&d="+(screen.colorDepth?screen.colorDepth:screen.pixelDepth);
//--></script>
<script language="javascript" type="text/javascript"><!--
Cd.write("<img src='http://c.hit.ua/hit?i=3601&g=0&x=1"+Cp+Cr+
"&r="+escape(Cd.referrer)+"&u="+escape(window.location.href)+
"' border='0' width='88' height='31' "+
"alt='hit.ua: сейчас на сайте, посетителей и просмотров за сегодня' title='hit.ua: сейчас на сайте, посетителей и просмотров за сегодня'/>");
//--></script>
<noscript>
<img src='http://c.hit.ua/hit?i=3601&amp;g=0&amp;x=1' border='0' width='88' height='31' alt='hit.ua: сейчас на сайте, посетителей и просмотров за сегодня' title='hit.ua: сейчас на сайте, посетителей и просмотров за сегодня'/>
</noscript></a>
<!-- / hit.ua -->

<script language="javascript">//<!--
mtI="012408140822";mtG="45";mtT="4";mtS='http://012408140822.c.mystat-in.net/?';
mtD=document;mtN=navigator.appName;mtR=escape(mtD.referrer);
mtW="";mtC="";mtV="0";mtJ="1";
//--></script><script language="javascript1.1">//<!--
mtV="1";mtJ = (navigator.javaEnabled()?"1":"0");
//--></script><script language="javascript1.2">//<!--
mtE=screen;mtW=mtE.width;mtN!="Netscape"?mtC=mtE.colorDepth:mtC=mtE.pixelDepth;mtV="2";
//--></script><script language="javascript1.3">//<!--
mtV="3";
//--></script><script language="javascript">//<!--
mtUrl="";mtUrl+="\""+mtS+"i"+mtI+"&t"+mtT+"&g"+mtG+"&w"+mtW+"&c"+mtC+"&r"+mtR+"&v"+mtV+"&j"+mtJ+"\"";
mtUrl="<a href=http://mytop-in.net/ target=_blank><img src="+mtUrl+"width=88 height=31 border=0 alt=\"Rated by MyTOP\"></a>";
mtD.write(mtUrl);
//--></script>
<noscript>
<a href=http://mytop-in.net/ target=_blank><img src=http://012408140822.c.mystat-in.net/?i012408140822&t4&g45&j0 width=88 height=31 border=0 alt="Rated by MyTOP"></a>
</noscript>

<!--Rating@Mail.ru COUNTEr--><script language="JavaScript" type="text/javascript"><!--
d=document;var a='';a+=';r='+escape(d.referrer)
js=10//--></script><script language="JavaScript1.1" type="text/javascript"><!--
a+=';j='+navigator.javaEnabled()
js=11//--></script><script language="JavaScript1.2" type="text/javascript"><!--
s=screen;a+=';s='+s.width+'*'+s.height
a+=';d='+(s.colorDepth?s.colorDepth:s.pixelDepth)
js=12//--></script><script language="JavaScript1.3" type="text/javascript"><!--
js=13//--></script><script language="JavaScript" type="text/javascript"><!--
d.write('<a href="http://top.mail.ru/jump?from=1374183"'+
' target=_top><img src="http://d7.cf.b4.a1.top.list.ru/counter'+
'?id=1374183;t=48;js='+js+a+';rand='+Math.random()+
'" alt="Рейтинг@Mail.ru"'+' border=0 height=31 width=88/><\/a>')
if(11<js)d.write('<'+'!-- ')//--></script><noscript><a
target=_top href="http://top.mail.ru/jump?from=1374183"><img
src="http://d7.cf.b4.a1.top.list.ru/counter?js=na;id=1374183;t=48"
border=0 height=31 width=88
alt="Рейтинг@Mail.ru"/></a></noscript><script language="JavaScript" type="text/javascript"><!--
if(11<js)d.write('--'+'>')//--></script><!--/COUNTER-->

<!-- I.UA counter --><a href="http://www.i.ua/" target="_blank" onclick="this.href='http://i.ua/r.php?21595';" title="Rated by I.UA">
<script type="text/javascript" language="javascript"><!--
iS='<img src="http://r.i.ua/s?u21595&p66&n'+Math.random();
iD=document;iD.cookie="iua=1";if(iD.cookie)iS+='&c1';
iS+='&d'+(screen.colorDepth?screen.colorDepth:screen.pixelDepth)
+"&w"+screen.width+'&h'+screen.height
iT=iD.referrer.slice(7);iH=window.location.href.slice(7);
((iI=iT.indexOf('/'))!=-1)?(iT=iT.substring(0,iI)):(iI=iT.length);
if(iT!=iH.substring(0,iI))iS+='&f'+escape(iD.referrer.slice(7))
iS+='&r'+escape(iH);
iD.write(iS+'" border="0" width="88" height="31" />');
//--></script></a><!-- End of I.UA counter -->

<script type="text/javascript">
<!--
Nnv=navigator;Nna=Nnv.appName;Nd=document;Nd.cookie="b=b";Nc=0;if(Nd.cookie)Nc=1;
Nn=(Nna.substring(0,2)=="Mi")?0:1;Ns=screen;Npx=(Nn==0)?Ns.colorDepth:Ns.pixelDepth;
str='<img src="http://c.uarating.com/199;'+Ns.width+'x'+Ns.height+';'+Npx+';'+Nc+';';
str=str+escape(Nd.referrer)+';'+Math.random()+'" width="88" height="31" border="0">';
document.write('<a href="http://www.uarating.com/" alt="uaRating" target="_blank">'+str+'<\/a>');
// -->
</script>
<noscript><a href="http://www.uarating.com/" target="_blank"><img src="http://c.uarating.com/199;0x0;0;0;-;0" alt="uaRating" width="88" height="31" border="0"></a></noscript>


</td></tr>
</table>


</body>
</html>