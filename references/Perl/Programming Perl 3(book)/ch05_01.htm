<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>Pattern Matching (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Pattern Matching">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>
</div>
<style type="text/css">
  #fixunixgb { position: absolute; right: 0px; bottom: 0px; }
  div > div#fixunixgb { position: fixed; }
  pre.fixit { overflow:auto;border-left:1px dashed #000;border-right:1px dashed #000;padding-left:2px; }
</style><!--[if gte IE 5.5]><![if lt IE 7]>
<style type="text/css">
  div#fixunixgb {
  right: auto; bottom: auto;
  left: expression( ( 0 - fixunixgb.offsetWidth + ( document.documentElement.clientWidth ? document.documentElement.clientWidth : document.body.clientWidth ) + ( ignoreMe2 = document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body.scrollLeft ) ) + 'px' );
  top: expression( ( 0 - fixunixgb.offsetHeight + ( document.documentElement.clientHeight ? document.documentElement.clientHeight : document.body.clientHeight ) + ( ignoreMe = document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop ) ) + 'px' );
}
</style>
<![endif]><![endif]-->
<div id="fixunixgb" align=right style="position:fixed; bottom: 5; right: 5; color:black; background-color: white; width: 170px; height: 120px; padding: 5px; z-index:3">
<script language="javascript">
<!--
var state = 'visible';

function gushowhide(layer_ref) {

if (state == 'visible') {
state = 'hidden';
}
else {
state = 'visible';
}
if (document.all) { //IS IE 4 or 5 (or 6 beta)
eval( "document.all." + layer_ref + ".style.visibility = state");
}
if (document.layers) { //IS NETSCAPE 4 or below
document.layers[layer_ref].visibility = state;
}
if (document.getElementById && !document.all) {
maxwell_smart = document.getElementById(layer_ref);
maxwell_smart.style.visibility = state;
}
}
//-->
</script>
<script type="text/javascript"><!--
google_ad_client = "pub-0321943928525350";
/* 160x90, bottomleft fixed */
google_ad_slot = "2032737097";
google_ad_width = 160;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<font size=-1><a href="javascript://" onclick="gushowhide('fixunixgb');">close (x)</a></font>
</div>
</div>
<br>
<center>

<script type="text/javascript"><!--
google_ad_client = "pub-0321943928525350";
//728x90, создано 30.01.08 (main top)
google_ad_slot = "2783893649";
google_ad_width = 728;
google_ad_height = 90;
//--></script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>

&nbsp; &nbsp; &nbsp; &nbsp;

<a href="http://www.internetmap.info/cgi-bin/go.cgi?site_id=49589" target=_blank><img src="http://www.internetmap.info/images/im_88x85.gif" border=0 alt="Internet Map"></a>
<br>

<b><a href="http://www.unix.org.ua/forum/">Do not forget register in our new UNIX and CISCO forum</a></b>

</center>
<p>


<html>
<head>
<title>Pattern Matching (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Pattern Matching">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_09.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part2.htm">Part 2: The Gory Details</a></td><td align="right" valign="top" width="172"><a href="ch05_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h1 class="chapter">Chapter 5.  Pattern Matching</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
<p>
<a href="ch05_01.htm">The Regular Expression Bestiary</a>
<br>
<a href="ch05_02.htm">Pattern-Matching Operators</a>
<br>
<a href="ch05_03.htm">Metacharacters and Metasymbols</a>
<br>
<a href="ch05_04.htm">Character Classes</a>
<br>
<a href="ch05_05.htm">Quantifiers</a>
<br>
<a href="ch05_06.htm">Positions</a>
<br>
<a href="ch05_07.htm">Capturing and Clustering</a>
<br>
<a href="ch05_08.htm">Alternation</a>
<br>
<a href="ch05_09.htm">Staying in Control</a>
<br>
<a href="ch05_10.htm">Fancy Patterns</a>
<br>
</p>
</div>

<p>
<a name="INDEX-1251"></a><a name="INDEX-1252"></a><a name="INDEX-1253"></a><a name="INDEX-1254"></a><a name="INDEX-1255"></a><a name="INDEX-1256"></a>
Perl's built-in support for pattern matching lets you search large
amounts of data conveniently and efficiently.  Whether you run a huge
commercial portal site scanning every newsfeed in existence for
interesting tidbits, or a government organization dedicated to
figuring out human demographics (or the human genome), or an
educational institution just trying to get some dynamic information up
on your web site, Perl is the tool of choice, in part because of its
database connections, but largely because of its pattern-matching
capabilities.  If you take "text" in the widest possible sense,
perhaps 90% of what you do is 90% text processing.  That's really
what Perl is all about and always has been about--in fact, it's even
part of Perl's name: Practical <em class="emphasis">Extraction</em> and
Report Language.  Perl's patterns provide a powerful way to scan
through mountains of mere data and extract useful information from it.</p>

<p>
<a name="INDEX-1257"></a>
You specify a pattern by creating a <em class="emphasis">regular
expression</em> (or <em class="emphasis">regex</em>), and Perl's
regular expression engine (the "Engine", for the rest of this chapter)
then takes that expression and determines whether (and how) the
pattern matches your data.  While most of your data will probably be
text strings, there's nothing stopping you from using regexes to
search and replace any byte sequence, even what you'd normally think
of as "binary" data.  To Perl, bytes are just characters that happen
to have an ordinal value less than 256.  (More on that in
<a href="ch15_01.htm">Chapter 15, "Unicode"</a>.)</p>

<p>If you're acquainted with regular expressions from some other venue,
we should warn you that regular expressions are a bit different in
Perl.  First, they aren't entirely "regular" in the theoretical sense
of the word, which means they can do much more than the traditional
regular expressions taught in computer science classes.  Second, they
are used so often in Perl that they have their own special variables,
operators, and quoting conventions which are tightly integrated into
the language,

not just loosely bolted on like any other library.
Programmers new to Perl often look in vain for functions like these:
<blockquote>
<pre class="programlisting">match( $string, $pattern );
subst( $string, $pattern, $replacement );</pre>
</blockquote>
<a name="INDEX-1258"></a><a name="INDEX-1259"></a><a name="INDEX-1260"></a><a name="INDEX-1261"></a><a name="INDEX-1262"></a>
But matching and substituting are such fundamental tasks in Perl that
they merit one-letter operators: <tt class="literal">m/</tt><em class="replaceable">PATTERN</em><tt class="literal">/</tt> and 
<tt class="literal">s/</tt><em class="replaceable">PATTERN</em><tt class="literal">/</tt><em class="replaceable">REPLACEMENT</em><tt class="literal">/</tt> (<tt class="literal">m//</tt> and <tt class="literal">s///</tt>, for short).  Not
only are they syntactically brief, but they're also parsed like double-quoted
strings rather than ordinary operators; nevertheless, they operate like
operators, so we'll call them that.  Throughout this chapter, you'll
see these operators used to match patterns against a string.  If some
portion of the string fits the pattern, we say that the match is
successful.  There are lots of cool things you can do with a successful
pattern match.  In particular, if you are using <tt class="literal">s///</tt>, a successful
match causes the matched portion of the string to be replaced with
whatever you specified as the <em class="replaceable">REPLACEMENT</em>.</p>

<p>This chapter is all about how to build and use patterns.  Perl's
regular expressions are potent, packing a lot of meaning into a small
space.  They can therefore be daunting if you try to intuit the meaning
of a long pattern as a whole.  But if you can break it up into its
parts, and if you know how the Engine interprets those parts, you
can understand any regular expression.  It's not unusual to see a
hundred line C or Java program expressed with a one-line regular
expression in Perl.  That regex may be a little harder to understand
than any single line out of the longer program; on the other hand, the
regex will likely be much easier to understand than the longer program
taken as a whole.  You just have to keep these things in perspective.</p>


<h2 class="sect1">5.1. The Regular Expression Bestiary</h2>

<a name="INDEX-1263"></a><a name="INDEX-1264"></a><a name="INDEX-1265"></a>
<p>Before we dive into the rules for interpreting regular expressions,
let's see what some patterns look like.  Most characters in a regular
expression simply match themselves.  If you string several characters
in a row, they must match in order, just as you'd expect.  So if you
write the pattern match:
<blockquote>
<pre class="programlisting">/Frodo/</pre>
</blockquote>

you can be sure that the pattern won't match unless the string contains
the substring "<tt class="literal">Frodo</tt>" somewhere.  (A <em class="emphasis">substring</em> is just a part of
a string.)  The match could be anywhere in the string, just as long as
those five characters occur somewhere, next to each other and in that
order.</p>

<p>
<a name="INDEX-1266"></a><a name="INDEX-1267"></a><a name="INDEX-1268"></a> Other characters don't match
themselves, but "misbehave" in some way.  We call these
<em class="emphasis">metacharacters</em>.  (All metacharacters are naughty
in their own right, but some are so bad that they also cause other
nearby characters to misbehave as well.)</p>

<p>
<a name="INDEX-1269"></a><a name="INDEX-1270"></a><a name="INDEX-1271"></a><a name="INDEX-1272"></a><a name="INDEX-1273"></a><a name="INDEX-1274"></a><a name="INDEX-1275"></a><a name="INDEX-1276"></a><a name="INDEX-1277"></a><a name="INDEX-1278"></a><a name="INDEX-1279"></a>
Here are the miscreants:
<blockquote>
<pre class="programlisting">\ | ( ) [ { ^ $ * + ? .</pre>
</blockquote>

Metacharacters are actually very useful and have special meanings
inside patterns; we'll tell you all those meanings as we go along.
But we do want to reassure you that you can always match any of these
twelve characters literally by putting a backslash in front of it.
For example, backslash is itself a metacharacter, so to match a
literal backslash, you'd backslash the backslash:
<tt class="literal">\\</tt>.</p>

<p>You see, backslash is one of those characters that makes other
characters misbehave.  It just works out that when you make a
misbehaving metacharacter misbehave, it ends up behaving--a double
negative, as it were.  So backslashing a character to get it to be
taken literally works, but only on punctuational characters;
backslashing an (ordinarily well-behaved) alphanumeric character does
the opposite: it turns the literal character into something special.
Whenever you see such a two-character sequence:
<blockquote>
<pre class="programlisting">\b \D \t \3 \s</pre>
</blockquote>
</p>

<p>
<a name="INDEX-1280"></a><a name="INDEX-1281"></a><a name="INDEX-1282"></a><a name="INDEX-1283"></a><a name="INDEX-1284"></a>
you'll know that the sequence is a <em class="emphasis">metasymbol</em> that matches something
strange.  For instance, <tt class="literal">\b</tt> matches a word boundary, while <tt class="literal">\t</tt>
matches an ordinary tab character.  Notice that a tab is one character
wide, while a word boundary is zero characters wide because it's the
spot between two characters.  So we call <tt class="literal">\b</tt> a <em class="emphasis">zero-width</em>
assertion.  Still, <tt class="literal">\t</tt> and <tt class="literal">\b</tt> are alike in that they both assert
something about a particular spot in the string.  Whenever you
<em class="emphasis">assert</em> something in a regular expression, you're just claiming that
that particular something has to be true in order for the pattern to
match.</p>

<p>Most pieces of a regular expression are some sort of assertion,
including the ordinary characters that simply assert that they match
themselves.  To be precise, they also assert that the <em class="emphasis">next</em> thing
will match one character later in the string, which is why we talk
about the tab character being "one character wide".  Some assertions
(like <tt class="literal">\t</tt>) eat up some of the string as they match, and others (like
<tt class="literal">\b</tt>) don't.  But we usually reserve the term "assertion" for the
zero-width assertions.  To avoid confusion, we'll call the thing with
width an <em class="emphasis">atom</em>.  (If you're a physicist, you can think of
nonzero-width atoms as massive, in contrast to the zero-width
assertions, which are massless like photons.)</p>

<p>
<a name="INDEX-1285"></a><a name="INDEX-1286"></a>
You'll also see some metacharacters that aren't assertions; rather,
they're structural (just as braces and semicolons define the structure
of ordinary Perl code, but don't really do anything).  These structural
metacharacters are in some ways the most important ones because the
crucial first step in learning to read regular 

expressions is to teach

your eyes to pick out the structural metacharacters.  Once you've
learned that, reading regular expressions is a breeze.<a href="#FOOTNOTE-1">[1]</a>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-1"></a>
<p>[1]Admittedly, a stiff breeze at times, but not something that will blow
you away.</p>

</blockquote>

<p>
<a name="INDEX-1287"></a><a name="INDEX-1288"></a><a name="INDEX-1289"></a>
One such structural metacharacter is the vertical bar, which indicates
<em class="emphasis">alternation</em>:
<blockquote>
<pre class="programlisting">/Frodo|Pippin|Merry|Sam/</pre>
</blockquote>
<a name="INDEX-1290"></a><a name="INDEX-1291"></a>
</p>

<p>That means that any of those strings can trigger a match; this is
covered in <a href="ch05_08.htm#ch05-sect-alt">Section 5.8, "Alternation"</a> later in the chapter.  And in <a href="ch05_07.htm#ch05-sect-candc">Section 5.7, "Capturing and Clustering"</a> after that, we'll show you how to use parentheses around
portions of your pattern to do <em class="emphasis">grouping</em>:
<blockquote>
<pre class="programlisting">/(Frodo|Drogo|Bilbo) Baggins/</pre>
</blockquote>

or even:
<blockquote>
<pre class="programlisting">/(Frod|Drog|Bilb)o Baggins/</pre>
</blockquote>
</p>

<p>
<a name="INDEX-1292"></a><a name="INDEX-1293"></a>
Another thing you'll see are what we call <em class="emphasis">quantifiers</em>, which say how
many of the previous thing should match in a row.
Quantifiers look like this:
<blockquote>
<pre class="programlisting">*  +  ?  *?  {3}  {2,5}</pre>
</blockquote>
<a name="INDEX-1294"></a><a name="INDEX-1295"></a>
You'll never see them in isolation like that, though.  Quantifiers
only make sense when attached to atoms--that is, to assertions that
have width.<a href="#FOOTNOTE-2">[2]</a> Quantifiers attach to
the previous atom only, which in human terms means they normally
quantify only one character.  If you want to match three copies of
"<tt class="literal">bar</tt>" in a row, you need to group the individual
characters of "<tt class="literal">bar</tt>" into a single "molecule" with
parentheses, like this:
<blockquote>
<pre class="programlisting">/(bar){3}/</pre>
</blockquote>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-2"></a>
<p>[2] Quantifiers are a bit like the statement
modifiers in
<a href="ch04_01.htm">Chapter 4, "Statements and Declarations"</a>, which can only
attach to a single statement.  Attaching a quantifier to a zero-width
assertion would be like trying to attach a <tt class="literal">while</tt>
modifier to a declaration--either of which makes about as much sense
as asking your local apothecary for a pound of photons.  Apothecaries
only deal in atoms and such.</p>

</blockquote>

<p>That will match "<tt class="literal">barbarbar</tt>".  If you'd said <tt class="literal">/bar{3}/</tt>, that
would match "<tt class="literal">barrr</tt>"--which might qualify you as Scottish but
disqualify you as barbarbaric.  (Then again, maybe not.  Some of our
favorite metacharacters are Scottish.)  For more on quantifiers,
see "Quantifiers" later.</p>

<p>Now that you've seen a few of the beasties that inhabit regular
expressions, you're probably anxious to start taming them.  However,
before we discuss regular expressions in earnest, we need to backtrack
a little and talk about the pattern-matching operators that make use of
regular expressions.  (And if you happen to spot a few more regex
beasties along the way, just leave a decent tip for the tour guide.)</p>

<a name="INDEX-1296"></a><a name="INDEX-1297"></a>


























































































<a name="INDEX-1780"></a><a name="INDEX-1781"></a>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch04_09.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"><a href="ch05_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="172">4.9. Pragmas</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172">5.2. Pattern-Matching Operators</td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog3/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>


<br>


<table border=0 align=center>
<tr><td>


<script type="text/javascript"><!--
google_ad_client = "pub-0321943928525350";
/* 468x60, main footer */
google_ad_slot = "1100896219";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>

<script>
user = "2823";
page = "2";

</script>



</td>
<td>

<!-- Ukrainian Banner Network 468x60 START -->
<center>
<script>
//<!--
user = "2823";
page = "2";
pid = Math.round((Math.random() * (10000000 - 1)));
document.write("<iframe src='http://banner.kiev.ua/cgi-bin/bi.cgi?h" +
user + "&amp;"+ pid + "&amp;" + page + "' frameborder=0 vspace=0 hspace=0 " +
" width=468 height=60 marginwidth=0 marginheight=0 scrolling=no>");
document.write("<a href='http://banner.kiev.ua/cgi-bin/bg.cgi?" +
user + "&amp;"+ pid + "&amp;" + page + "' target=_top>");
document.write("<img border=0 src='http://banner.kiev.ua/" +
"cgi-bin/bi.cgi?i" + user + "&amp;" + pid + "&amp;" + page +
"' width=468 height=60 alt='хЛТБЙОУЛБС вБООЕТОБС уЕФШ'></a>");
document.write("</iframe>");
//-->
</script>
</center>
<!-- Ukrainian Banner Network 468x60 END -->


</td></tr>
<tr><td colspan=2>
<br>
<hr size=1>



<!-- SpyLOG -->
<script src="http://tools.spylog.ru/counter_cv.js" id="spylog_code" type="text/javascript" counter="1028713" part="docs" track_links="ext" page_level="0">
</script>
<noscript>
<a href="http://u10287.13.spylog.com/cnt?cid=1028713&f=3&p=0" target="_blank">
<img src="http://u10287.13.spylog.com/cnt?cid=1028713&p=0" alt="SpyLOG" border="0" width="88" height="31"></a>
</noscript>
<!--/ SpyLOG -->

<!--bigmir)net TOP 100-->
<script type="text/javascript" language="javascript"><!--
function BM_Draw(oBM_STAT){
document.write('<table cellpadding="0" cellspacing="0" border="0" style="display:inline;margin-right:4px;"><tr><td><div style="margin:0px;padding:0px;font-size:1px;width:88px;"><div style="background:url(\'http://i.bigmir.net/cnt/samples/diagonal/b59_top.gif\') no-repeat bottom;">&nbsp;</div><div style="font:10px Tahoma;background:url(\'http://i.bigmir.net/cnt/samples/diagonal/b59_center.gif\');"><div style="text-align:center;"><a href="http://www.bigmir.net/" target="_blank" style="color:#0000ab;text-decoration:none;font:10px Tahoma;">bigmir<span style="color:#ff0000;">)</span>net</a></div><div style="margin-top:3px;padding: 0px 6px 0px 6px;color:#003596;"><div style="float:left;font:10px Tahoma;">'+oBM_STAT.hosts+'</div><div style="float:right;font:10px Tahoma;">'+oBM_STAT.hits+'</div></div><br clear="all"/></div><div style="background:url(\'http://i.bigmir.net/cnt/samples/diagonal/b59_bottom.gif\') no-repeat top;">&nbsp;</div></div></td></tr></table>');
}
//-->
</script>

<script type="text/javascript" language="javascript"><!--
bmN=navigator,bmD=document,bmD.cookie='b=b',i=0,bs=[],bm={o:1,v:126595,s:126595,t:0,c:bmD.cookie?1:0,n:Math.round((Math.random()* 1000000)),w:0};
for(var f=self;f!=f.parent;f=f.parent)bm.w++;
try{if(bmN.plugins&&bmN.mimeTypes.length&&(x=bmN.plugins['Shockwave Flash']))bm.m=parseInt(x.description.replace(/([a-zA-Z]|s)+/,''));
else for(var f=3;f<20;f++)if(eval('new ActiveXObject("ShockwaveFlash.ShockwaveFlash.'+f+'")'))bm.m=f}catch(e){;}
try{bm.y=bmN.javaEnabled()?1:0}catch(e){;}
try{bmS=screen;bm.v^=bm.d=bmS.colorDepth||bmS.pixelDepth;bm.v^=bm.r=bmS.width}catch(e){;}
r=bmD.referrer.slice(7);if(r&&r.split('/')[0]!=window.location.host){bm.f=escape(r);bm.v^=r.length}
bm.v^=window.location.href.length;for(var x in bm) if(/^[ovstcnwmydrf]$/.test(x)) bs[i++]=x+bm[x];
bmD.write('<sc'+'ript type="text/javascript" language="javascript" src="http://c.bigmir.net/?'+bs.join('&')+'"></sc'+'ript>');
//-->
</script>
<noscript>
<a href="http://www.bigmir.net/" target="_blank"><img src="http://c.bigmir.net/?v126595&s126595&t2" width="88" height="31" alt="bigmir)net TOP 100" title="bigmir)net TOP 100" border="0" /></a>
</noscript>
<!--bigmir)net TOP 100-->

<!--begin of Rambler's Top100 code -->
<a href="http://top100.rambler.ru/top100/">
<img src="http://counter.rambler.ru/top100.cnt?692798" alt="" width=1 height=1 border=0></a>
<!--end of Top100 code-->

<!--begin of Top100 logo-->
<a href="http://top100.rambler.ru/top100/">
<img src="http://top100-images.rambler.ru/top100/w1.gif" alt="Rambler's Top100" width=88 height=31 
border=0></a>
<!--end of Top100 logo -->


<!-- hit.ua -->
<a href='http://hit.ua/?x=3601' target='_blank'>
<script language="javascript" type="text/javascript"><!--
Cd=document;Cr="&"+Math.random();Cp="&s=1";
Cd.cookie="b=b";if(Cd.cookie)Cp+="&c=1";
Cp+="&t="+(new Date()).getTimezoneOffset();
if(self!=top)Cp+="&f=1";
//--></script>
<script language="javascript1.1" type="text/javascript"><!--
if(navigator.javaEnabled())Cp+="&j=1";
//--></script>
<script language="javascript1.2" type="text/javascript"><!--
if(typeof(screen)!='undefined')Cp+="&w="+screen.width+"&h="+
screen.height+"&d="+(screen.colorDepth?screen.colorDepth:screen.pixelDepth);
//--></script>
<script language="javascript" type="text/javascript"><!--
Cd.write("<img src='http://c.hit.ua/hit?i=3601&g=0&x=1"+Cp+Cr+
"&r="+escape(Cd.referrer)+"&u="+escape(window.location.href)+
"' border='0' width='88' height='31' "+
"alt='hit.ua: сейчас на сайте, посетителей и просмотров за сегодня' title='hit.ua: сейчас на сайте, посетителей и просмотров за сегодня'/>");
//--></script>
<noscript>
<img src='http://c.hit.ua/hit?i=3601&amp;g=0&amp;x=1' border='0' width='88' height='31' alt='hit.ua: сейчас на сайте, посетителей и просмотров за сегодня' title='hit.ua: сейчас на сайте, посетителей и просмотров за сегодня'/>
</noscript></a>
<!-- / hit.ua -->

<script language="javascript">//<!--
mtI="012408140822";mtG="45";mtT="4";mtS='http://012408140822.c.mystat-in.net/?';
mtD=document;mtN=navigator.appName;mtR=escape(mtD.referrer);
mtW="";mtC="";mtV="0";mtJ="1";
//--></script><script language="javascript1.1">//<!--
mtV="1";mtJ = (navigator.javaEnabled()?"1":"0");
//--></script><script language="javascript1.2">//<!--
mtE=screen;mtW=mtE.width;mtN!="Netscape"?mtC=mtE.colorDepth:mtC=mtE.pixelDepth;mtV="2";
//--></script><script language="javascript1.3">//<!--
mtV="3";
//--></script><script language="javascript">//<!--
mtUrl="";mtUrl+="\""+mtS+"i"+mtI+"&t"+mtT+"&g"+mtG+"&w"+mtW+"&c"+mtC+"&r"+mtR+"&v"+mtV+"&j"+mtJ+"\"";
mtUrl="<a href=http://mytop-in.net/ target=_blank><img src="+mtUrl+"width=88 height=31 border=0 alt=\"Rated by MyTOP\"></a>";
mtD.write(mtUrl);
//--></script>
<noscript>
<a href=http://mytop-in.net/ target=_blank><img src=http://012408140822.c.mystat-in.net/?i012408140822&t4&g45&j0 width=88 height=31 border=0 alt="Rated by MyTOP"></a>
</noscript>

<!--Rating@Mail.ru COUNTEr--><script language="JavaScript" type="text/javascript"><!--
d=document;var a='';a+=';r='+escape(d.referrer)
js=10//--></script><script language="JavaScript1.1" type="text/javascript"><!--
a+=';j='+navigator.javaEnabled()
js=11//--></script><script language="JavaScript1.2" type="text/javascript"><!--
s=screen;a+=';s='+s.width+'*'+s.height
a+=';d='+(s.colorDepth?s.colorDepth:s.pixelDepth)
js=12//--></script><script language="JavaScript1.3" type="text/javascript"><!--
js=13//--></script><script language="JavaScript" type="text/javascript"><!--
d.write('<a href="http://top.mail.ru/jump?from=1374183"'+
' target=_top><img src="http://d7.cf.b4.a1.top.list.ru/counter'+
'?id=1374183;t=48;js='+js+a+';rand='+Math.random()+
'" alt="Рейтинг@Mail.ru"'+' border=0 height=31 width=88/><\/a>')
if(11<js)d.write('<'+'!-- ')//--></script><noscript><a
target=_top href="http://top.mail.ru/jump?from=1374183"><img
src="http://d7.cf.b4.a1.top.list.ru/counter?js=na;id=1374183;t=48"
border=0 height=31 width=88
alt="Рейтинг@Mail.ru"/></a></noscript><script language="JavaScript" type="text/javascript"><!--
if(11<js)d.write('--'+'>')//--></script><!--/COUNTER-->

<!-- I.UA counter --><a href="http://www.i.ua/" target="_blank" onclick="this.href='http://i.ua/r.php?21595';" title="Rated by I.UA">
<script type="text/javascript" language="javascript"><!--
iS='<img src="http://r.i.ua/s?u21595&p66&n'+Math.random();
iD=document;iD.cookie="iua=1";if(iD.cookie)iS+='&c1';
iS+='&d'+(screen.colorDepth?screen.colorDepth:screen.pixelDepth)
+"&w"+screen.width+'&h'+screen.height
iT=iD.referrer.slice(7);iH=window.location.href.slice(7);
((iI=iT.indexOf('/'))!=-1)?(iT=iT.substring(0,iI)):(iI=iT.length);
if(iT!=iH.substring(0,iI))iS+='&f'+escape(iD.referrer.slice(7))
iS+='&r'+escape(iH);
iD.write(iS+'" border="0" width="88" height="31" />');
//--></script></a><!-- End of I.UA counter -->

<script type="text/javascript">
<!--
Nnv=navigator;Nna=Nnv.appName;Nd=document;Nd.cookie="b=b";Nc=0;if(Nd.cookie)Nc=1;
Nn=(Nna.substring(0,2)=="Mi")?0:1;Ns=screen;Npx=(Nn==0)?Ns.colorDepth:Ns.pixelDepth;
str='<img src="http://c.uarating.com/199;'+Ns.width+'x'+Ns.height+';'+Npx+';'+Nc+';';
str=str+escape(Nd.referrer)+';'+Math.random()+'" width="88" height="31" border="0">';
document.write('<a href="http://www.uarating.com/" alt="uaRating" target="_blank">'+str+'<\/a>');
// -->
</script>
<noscript><a href="http://www.uarating.com/" target="_blank"><img src="http://c.uarating.com/199;0x0;0;0;-;0" alt="uaRating" width="88" height="31" border="0"></a></noscript>


</td></tr>
</table>


</body>
</html>