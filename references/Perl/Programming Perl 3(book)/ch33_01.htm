<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>Diagnostic Messages (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Diagnostic Messages">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>
</div>
<style type="text/css">
  #fixunixgb { position: absolute; right: 0px; bottom: 0px; }
  div > div#fixunixgb { position: fixed; }
  pre.fixit { overflow:auto;border-left:1px dashed #000;border-right:1px dashed #000;padding-left:2px; }
</style><!--[if gte IE 5.5]><![if lt IE 7]>
<style type="text/css">
  div#fixunixgb {
  right: auto; bottom: auto;
  left: expression( ( 0 - fixunixgb.offsetWidth + ( document.documentElement.clientWidth ? document.documentElement.clientWidth : document.body.clientWidth ) + ( ignoreMe2 = document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body.scrollLeft ) ) + 'px' );
  top: expression( ( 0 - fixunixgb.offsetHeight + ( document.documentElement.clientHeight ? document.documentElement.clientHeight : document.body.clientHeight ) + ( ignoreMe = document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop ) ) + 'px' );
}
</style>
<![endif]><![endif]-->
<div id="fixunixgb" align=right style="position:fixed; bottom: 5; right: 5; color:black; background-color: white; width: 170px; height: 120px; padding: 5px; z-index:3">
<script language="javascript">
<!--
var state = 'visible';

function gushowhide(layer_ref) {

if (state == 'visible') {
state = 'hidden';
}
else {
state = 'visible';
}
if (document.all) { //IS IE 4 or 5 (or 6 beta)
eval( "document.all." + layer_ref + ".style.visibility = state");
}
if (document.layers) { //IS NETSCAPE 4 or below
document.layers[layer_ref].visibility = state;
}
if (document.getElementById && !document.all) {
maxwell_smart = document.getElementById(layer_ref);
maxwell_smart.style.visibility = state;
}
}
//-->
</script>
<script type="text/javascript"><!--
google_ad_client = "pub-0321943928525350";
/* 160x90, bottomleft fixed */
google_ad_slot = "2032737097";
google_ad_width = 160;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<font size=-1><a href="javascript://" onclick="gushowhide('fixunixgb');">close (x)</a></font>
</div>
</div>
<br>
<center>

<script type="text/javascript"><!--
google_ad_client = "pub-0321943928525350";
//728x90, создано 30.01.08 (main top)
google_ad_slot = "2783893649";
google_ad_width = 728;
google_ad_height = 90;
//--></script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>

&nbsp; &nbsp; &nbsp; &nbsp;

<a href="http://www.internetmap.info/cgi-bin/go.cgi?site_id=49589" target=_blank><img src="http://www.internetmap.info/images/im_88x85.gif" border=0 alt="Internet Map"></a>
<br>

<b><a href="http://www.unix.org.ua/forum/">Do not forget register in our new UNIX and CISCO forum</a></b>

</center>
<p>


<html>
<head>
<title>Diagnostic Messages (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Diagnostic Messages">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="RECT" COORDS="0,0,466,71" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="RECT" COORDS="467,0,514,18" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch32_47.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="part5.htm">Part 5: Reference Material</a></td><td align="right" valign="top" width="172"></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- SECTION BODY -->
<h1 class="chapter">Chapter 33.  Diagnostic Messages</h1>

<p>
<a name="INDEX-5822"></a><a name="INDEX-5823"></a><a name="INDEX-5824"></a><a name="INDEX-5825"></a>
These messages are classified as follows (listed in increasing order of
desperation):</p>

<a name="perl2-ch-9-tab-1"></a>
<table border="1">

<tr>
<th>Class</th>
<th>Meaning</th>
</tr>




<tr>
<td>(W)</td>
<td>A warning (optional)</td>
</tr>

<tr>
<td>(D)</td>
<td>A deprecation (optional)</td>
</tr>

<tr>
<td>(S)</td>
<td>A severe warning (mandatory)</td>
</tr>

<tr>
<td>(F)</td>
<td>A fatal error (trappable)</td>
</tr>

<tr>
<td>(P)</td>
<td>An internal error (panic) that you should never see (trappable)</td>
</tr>

<tr>
<td>(X)</td>
<td>A very fatal error (nontrappable)</td>
</tr>

<tr>
<td>(A)</td>
<td>An alien error message (not generated by Perl)</td>
</tr>


</table>
<p>
<a name="INDEX-5826"></a><a name="INDEX-5827"></a><a name="INDEX-5828"></a>
The majority of messages from the first three classifications above
(W, D, and S) can be controlled using the <tt class="literal">warnings</tt> pragma or the <span class="option">-w</span>
and <span class="option">-W</span> switches.  If a message can be controlled by the <tt class="literal">warnings</tt>
pragma, its warning category is given after the classification
letter; for example, (W misc) indicates a miscellaneous warning. The <tt class="literal">warnings</tt> pragma is described
in <a href="ch31_01.htm">Chapter 31, "Pragmatic Modules"</a>.</p>

<p>Warnings may be captured rather than printed by setting <tt class="literal">$SIG{__WARN__}</tt> to a reference
to a routine that will be called on each warning.  You can also capture control before a trappable error "dies" by
setting <tt class="literal">$SIG{__DIE__}</tt> to a subroutine reference, but if you don't
call <tt class="literal">die</tt> within the handler, the exception is still thrown
when you return from it.  In other words, you're not allowed to
"de-fatalize" an exception that way.  You must use <tt class="literal">eval</tt> for that.</p>

<p>Default warnings are always enabled unless they are explicitly disabled
with the <tt class="literal">warnings</tt> pragma or the <span class="option">-X</span> switch.</p>

<p>In the following messages, <em class="replaceable">%s</em> stands for an interpolated string that
is determined only when the message is generated.  (Similarly, <em class="replaceable">%d</em>
stands for an interpolated number--think <tt class="literal">printf</tt> formats, but we use
<em class="replaceable">%d</em> to mean a number in any base here.)  Note that some messages
<em class="emphasis">begin</em> with <em class="replaceable">%s</em>--which means that listing them alphabetically is
problematical.  You should search among these messages if the one you
are looking for does not appear in the expected place.  The symbols
<tt class="literal">"%-?@</tt> sort before alphabetic characters, while <tt class="literal">[</tt> and <tt class="literal">\</tt> sort
after.</p>

<p>
<a name="INDEX-5829"></a>
If you decide a bug is a Perl bug and not your bug, you should try to
reduce it to a minimal test case and then report it with the <em class="emphasis">perlbug</em>
program that comes with Perl.</p>

<dl>
<dt>
<b><tt class="literal">"</tt><em class="replaceable">%s</em><tt class="literal">" variable</tt> <em class="replaceable">%s</em> <tt class="literal">masks earlier declaration in same</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W misc) A <tt class="literal">my</tt> or <tt class="literal">our</tt> variable has been redeclared in the current
scope or statement, effectively eliminating all access to the previous
instance.  This is almost always a typographical error.  Note that the
earlier variable will still exist until the end of the scope or until
all closure referents to it are destroyed.</p>
</dd>


<dt>
<b><tt class="literal">"my sub" not yet implemented</tt></b>
</dt>
<dd>
<p>(F) Lexically scoped subroutines are not yet implemented.  Don't try that
yet.</p>
</dd>


<dt>
<b><tt class="literal">"my" variable</tt> <em class="replaceable">%s</em> <tt class="literal">can't be in a package</tt></b>
</dt>
<dd>
<p>(F) Lexically scoped variables aren't in a package, so it doesn't make sense
to try to declare one with a package qualifier in front.  Use <tt class="literal">local</tt>
if you want to localize a package variable.</p>
</dd>


<dt>
<b><tt class="literal">"no" not allowed in expression</tt></b>
</dt>
<dd>
<p>(F) The <tt class="literal">no</tt> keyword is recognized and executed at compile time and returns
no useful value.</p>
</dd>


<dt>
<b><tt class="literal">"our" variable</tt> <em class="replaceable">%s</em> <tt class="literal">redeclared</tt></b>
</dt>
<dd>
<p>(W misc) You seem to have already declared the same global once before in the
current lexical scope.</p>
</dd>


<dt>
<b><tt class="literal">"use" not allowed in expression</tt></b>
</dt>
<dd>
<p>(F) The <tt class="literal">use</tt> keyword is recognized and executed at compile time and
returns no useful value.</p>
</dd>


<dt>
<b><tt class="literal">'!' allowed only after types</tt> <em class="replaceable">%s</em> </b>
</dt>
<dd>
<p>(F) The <tt class="literal">'!'</tt> is allowed in <tt class="literal">pack</tt> and <tt class="literal">unpack</tt> only after certain types.</p>
</dd>


<dt>
<b><tt class="literal">'|' and '&lt;' may not both be specified on command line</tt></b>
</dt>
<dd>
<p>(F) This is an error peculiar to VMS.  Perl does its own command-line
redirection. It found that <tt class="literal">STDIN</tt> was a pipe and that you also tried
to redirect <tt class="literal">STDIN</tt> using <tt class="literal">&lt;</tt>.  Only one <tt class="literal">STDIN</tt> stream to a customer,
please.</p>
</dd>


<dt>
<b><tt class="literal">'|' and '&gt;' may not both be specified on command line</tt></b>
</dt>
<dd>
<p>(F) This is an error peculiar to VMS.  Perl does its own command-line redirection and
thinks you tried to redirect <tt class="literal">STDOUT</tt> both to a file and into a pipe to another
command.  You need to choose one or the other, though nothing's stopping you
from piping into a program or Perl script that splits the output into two
streams, such as:
<blockquote>
<pre class="programlisting">open(OUT,"&gt;$ARGV[0]") or die "Can't write to $ARGV[0]: $!";
while (&lt;STDIN&gt;) {
    print;
    print OUT;
}
close OUT;</pre>
</blockquote>
</p>
</dd>


<dt>
<b><tt class="literal">/ cannot take a count</tt></b>
</dt>
<dd>
<p>(F) You had an <tt class="literal">unpack</tt> template indicating a counted-length string,
but you have also specified an explicit size for the string.</p>
</dd>


<dt>
<b><tt class="literal">/ must be followed by a, A, or Z</tt></b>
</dt>
<dd>
<p>(F) You had an <tt class="literal">unpack</tt> template indicating a counted-length string,
which must be followed by one of the letters <tt class="literal">a</tt>, <tt class="literal">A</tt> or <tt class="literal">Z</tt>
to indicate what sort of string is to be unpacked.</p>
</dd>


<dt>
<b><tt class="literal">/ must be followed by a*, A*, or Z*</tt></b>
</dt>
<dd>
<p>(F) You had a pack template indicating a counted-length string.
Currently, the only things that can have their length counted are <tt class="literal">a*</tt>,
<tt class="literal">A*</tt> or <tt class="literal">Z*</tt>.</p>
</dd>


<dt>
<b><tt class="literal">/ must follow a numeric type</tt></b>
</dt>
<dd>
<p>(F) You had an <tt class="literal">unpack</tt> template that contained a <tt class="literal">#</tt>,
but this did not follow some numeric <tt class="literal">unpack</tt> specification.</p>
</dd>


<dt>
<b><tt class="literal">% may only be used in unpack</tt></b>
</dt>
<dd>
<p>(F) You can't <tt class="literal">pack</tt> a string by supplying a checksum, because the
checksumming process loses information, and you can't go the other
way.</p>
</dd>


<dt>
<b><tt class="literal">Repeat count in pack overflows</tt></b>
</dt>
<dd>
<p>(F) You can't specify a repeat count so large that it overflows your
signed integers.</p>
</dd>


<dt>
<b><tt class="literal">Repeat count in unpack overflows</tt></b>
</dt>
<dd>
<p>(F) You can't specify a repeat count so large that it overflows
your signed integers.</p>
</dd>


<dt>
<b><tt class="literal">/</tt><em class="replaceable">%s</em><tt class="literal">/: Unrecognized escape \\<em class="replaceable">%c</em> passed through</tt></b>
</dt>
<dd>
<p>(W regexp) You used a backslash-character combination that is not
recognized by Perl.  This combination appears in an interpolated
variable or a <tt class="literal">'</tt>-delimited regular expression.  The character was
understood literally.</p>
</dd>


<dt>
<b><tt class="literal">/</tt><em class="replaceable">%s</em><tt class="literal">/: Unrecognized escape \\<em class="replaceable">%c</em> in character class passed through</tt></b>
</dt>
<dd>
<p>(W regexp) You used a backslash-character combination that is not
recognized by Perl inside character classes.  The character was
understood literally.</p>
</dd>


<dt>
<b><tt class="literal">/</tt><em class="replaceable">%s</em><tt class="literal">/ should probably be written as "</tt><em class="replaceable">%s</em><tt class="literal">"</tt></b>
</dt>
<dd>
<p>(W syntax) You have used a pattern where Perl expected to find a string,
as in the first argument to <tt class="literal">join</tt>.  Perl will treat the true
or false result of matching the pattern against <tt class="literal">$_</tt> as the string,
which is probably not what you had in mind.</p>
</dd>


<dt>
<b><em class="replaceable">%s</em> <tt class="literal">(...) interpreted as function</tt></b>
</dt>
<dd>
<p>(W syntax) You've run afoul of the rule that says that any list
operator followed by parentheses turns into a function, with all the
list operators arguments found inside the parentheses.</p>
</dd>


<dt>
<b><em class="replaceable">%s</em><tt class="literal">() called too early to check prototype</tt></b>
</dt>
<dd>
<p>(W prototype) You've called a function that has a prototype before the
parser saw a definition or declaration for it, and Perl could not
check that the call conforms to the prototype.  You need to either add
an early prototype declaration for the subroutine in question, or move
the subroutine definition ahead of the call to get proper prototype
checking.  Alternatively, if you are certain that you're calling the
function correctly, you may put an ampersand before the name to avoid
the warning.</p>
</dd>


<dt>
<b><em class="replaceable">%s</em> <tt class="literal">argument is not a HASH or ARRAY element</tt></b>
</dt>
<dd>
<p>(F) The argument to <tt class="literal">exists</tt> must be a hash or array element, such as:
<blockquote>
<pre class="programlisting">$foo{$bar}
$ref-&gt;{"susie"}[12]</pre>
</blockquote>
</p>
</dd>


<dt>
<b><em class="replaceable">%s</em> <tt class="literal">argument is not a HASH or ARRAY element or slice</tt></b>
</dt>
<dd>
<p>(F) The argument to <tt class="literal">delete</tt> must be either a hash or array element, such as:
<blockquote>
<pre class="programlisting">$foo{$bar}
$ref-&gt;{"susie"}[12]</pre>
</blockquote>

or a hash or array slice, such as:
<blockquote>
<pre class="programlisting">@foo[$bar, $baz, $xyzzy]
@{$ref-&gt;[12]}{"susie", "queue"}</pre>
</blockquote>
</p>
</dd>


<dt>
<b><em class="replaceable">%s</em> <tt class="literal">argument is not a subroutine name</tt></b>
</dt>
<dd>
<p>(F) The argument to <tt class="literal">exists</tt> for <tt class="literal">exists &amp;sub</tt> must be a subroutine
name, and not a subroutine call.  <tt class="literal">exists &amp;sub()</tt> will generate this error.</p>
</dd>


<dt>
<b><em class="replaceable">%s</em> <tt class="literal">did not return a true value</tt></b>
</dt>
<dd>
<p>(F) A <tt class="literal">require</tt>d (or <tt class="literal">use</tt>d) file must return a true value to indicate that
it compiled correctly and ran its initialization code correctly.  It's
traditional to end such a file with a <tt class="literal">1;</tt>, though any true value would
do.</p>
</dd>


<dt>
<b><em class="replaceable">%s</em> <tt class="literal">found where operator expected</tt></b>
</dt>
<dd>
<p>(S) The Perl lexer knows whether to expect a term or an operator.  If
it sees what it knows to be a term when it was expecting to see an
operator, it gives you this warning.  Usually it indicates that an
operator or delimiter was omitted, such as a semicolon.</p>
</dd>


<dt>
<b><em class="replaceable">%s</em> <tt class="literal">had compilation errors</tt></b>
</dt>
<dd>
<p>(F) The final summary message when a <em class="emphasis">perl -c</em> fails.</p>
</dd>


<dt>
<b><em class="replaceable">%s</em> <tt class="literal">has too many errors</tt></b>
</dt>
<dd>
<p>(F) The parser has given up trying to parse the program after 10
errors.  Further error messages would likely be uninformative.</p>
</dd>


<dt>
<b><em class="replaceable">%s</em> <tt class="literal">matches null string many times</tt></b>
</dt>
<dd>
<p>(W regexp) The pattern you've specified would be an infinite loop if the
regular expression engine didn't specifically check for that.</p>
</dd>


<dt>
<b><em class="replaceable">%s</em> <tt class="literal">never introduced</tt></b>
</dt>
<dd>
<p>(S internal) The symbol in question was declared but somehow went out of scope
before it could possibly have been used.</p>
</dd>


<dt>
<b><em class="replaceable">%s</em> <tt class="literal">package attribute may clash with future reserved word:</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W reserved) A lowercase attribute name was used that had a
package-specific handler.  That name might have a meaning to Perl
itself some day, even though it doesn't yet.  Perhaps you should use a
mixed-case attribute name, instead.</p>
</dd>


<dt>
<b><em class="replaceable">%s</em> <tt class="literal">syntax OK</tt></b>
</dt>
<dd>
<p>(F) The final summary message when a <tt class="command">perl -c</tt> succeeds.</p>
</dd>


<dt>
<b><em class="replaceable">%s</em>: <tt class="literal">Command not found</tt></b>
</dt>
<dd>
<p>(A) You've accidentally run your script through <em class="emphasis">csh</em> instead
of Perl.  Check the <tt class="literal">#!</tt> line, or manually feed your script into
Perl yourself with <tt class="command">perl scriptname</tt>.</p>
</dd>


<dt>
<b><em class="replaceable">%s</em><tt class="literal">: Expression syntax</tt></b>
</dt>
<dd>
<p>(A) You've accidentally run your script through <em class="emphasis">csh</em> instead
of Perl.  Check the <tt class="literal">#!</tt> line, or manually feed your script into
Perl yourself with <tt class="command">perl scriptname</tt>.</p>
</dd>


<dt>
<b><em class="replaceable">%s</em><tt class="literal">: Undefined variable</tt></b>
</dt>
<dd>
<p>(A) You've accidentally run your script through <em class="emphasis">csh</em> instead
of Perl.  Check the <tt class="literal">#!</tt> line, or manually feed your script into
Perl yourself with <tt class="command">perl scriptname</tt>.</p>
</dd>


<dt>
<b><em class="replaceable">%s</em><tt class="literal">: not found</tt></b>
</dt>
<dd>
<p>(A) You've accidentally run your script through the Bourne shell
instead of Perl.  Check the <tt class="literal">#!</tt> line, or manually feed your script
Perl yourself with <tt class="command">perl scriptname</tt>.</p>
</dd>


<dt>
<b><tt class="literal">(in cleanup)</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W misc) This prefix usually indicates that a <tt class="literal">DESTROY</tt> method raised
the indicated exception.  Since destructors are usually called by
the system at arbitrary points during execution, and often a vast
number of times, the warning is issued only once for any number
of failures that would otherwise result in the same message being
repeated.</p>

<p>Failure of user callbacks dispatched using the <tt class="literal">G_KEEPERR</tt> flag
could also result in this warning.  See <em class="emphasis">perlcall</em>(1).</p>
</dd>


<dt>
<b><tt class="literal">(Missing semicolon on previous line?)</tt></b>
</dt>
<dd>
<p>(S) This is an educated guess made in conjunction with the message "<tt class="literal"></tt><em class="replaceable">%s</em><tt class="literal">found where operator expected</tt>."  Don't automatically put a semicolon on
the previous line just because you saw this message.</p>
</dd>


<dt>
<b><tt class="literal">-P not allowed for setuid/setgid script</tt></b>
</dt>
<dd>
<p>(F) The script would have to be opened by the C preprocessor by name,
which provides a race condition that breaks security.</p>
</dd>


<dt>
<b><tt class="literal">-T and -B not implemented on filehandles</tt></b>
</dt>
<dd>
<p>(F) Perl can't peek at the standard I/O buffer of filehandles when it doesn't
know about your kind of standard I/O.  You'll have to use a filename instead.</p>
</dd>


<dt>
<b><tt class="literal">-p destination:</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) An error occurred during the implicit output invoked by the <tt class="userinput"><b>-p</b></tt>
command-line switch.  (This output goes to <tt class="literal">STDOUT</tt> unless you've
redirected it with <tt class="literal">select</tt>.)</p>
</dd>


<dt>
<b><tt class="literal">500 Server error</tt></b>
</dt>
<dd>
<p>See <tt class="literal">Server error</tt>.</p>
</dd>


<dt>
<b><tt class="literal">?+* follows nothing in regexp</tt></b>
</dt>
<dd>
<p>(F) You started a regular expression with a quantifier.  Backslash it
if you meant it literally.</p>
</dd>


<dt>
<b><tt class="literal">@ outside of string</tt></b>
</dt>
<dd>
<p>(F) You had a pack template that specified an absolute position outside
the string being unpacked.</p>
</dd>


<dt>
<b><tt class="literal">&lt;&gt; should be quotes</tt></b>
</dt>
<dd>
<p>(F) You wrote <tt class="literal">require &lt;file&gt;</tt> when you should have written
<tt class="literal">require 'file'</tt>.</p>
</dd>


<dt>
<b><tt class="literal">\1 better written as $1</tt></b>
</dt>
<dd>
<p>(W syntax) Outside of patterns, backreferences live on as variables. The use of backslashes is grandfathered on the righthand side of a
substitution, but stylistically it's better to use the variable form
because other Perl programmers will expect it, and it works better if
there are more than nine backreferences.</p>
</dd>


<dt>
<b><tt class="literal">accept() on closed socket</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W closed) You tried to do an accept on a closed socket.  Did you
forget to check the return value of your <tt class="literal">socket</tt> call?</p>
</dd>


<dt>
<b><tt class="literal">Allocation too large: %lx</tt></b>
</dt>
<dd>
<p>(X) You can't allocate more than 64K on an MS-DOS machine.</p>
</dd>


<dt>
<b><tt class="literal">Applying</tt> <em class="replaceable">%s</em> <tt class="literal">to</tt> <em class="replaceable">%s</em> <tt class="literal">will act on scalar(</tt><em class="replaceable">%s</em><tt class="literal">)</tt></b>
</dt>
<dd>
<p>(W misc) The pattern match (<tt class="literal">//</tt>), substitution (<tt class="literal">s///</tt>), and
transliteration (<tt class="literal">tr///</tt>) operators work on scalar values.  If you
apply one of them to an array or a hash, it will convert the array or
hash to a scalar value--the length of an array or the population
info of a hash--and then work on that scalar value.  This is
probably not what you meant to do.</p>
</dd>


<dt>
<b><tt class="literal">Arg too short for msgsnd</tt></b>
</dt>
<dd>
<p>(F) <tt class="literal">msgsnd</tt> requires a string at least as long as <tt class="literal">sizeof(long)</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Ambiguous use of</tt> <em class="replaceable">%s</em> <tt class="literal">resolved as</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W ambiguous|S) You said something that may not be interpreted the way
you thought.  Normally it's pretty easy to disambiguate it by supplying
a missing quote, operator, pair of parentheses, or declaration.</p>
</dd>


<dt>
<b><tt class="literal">Ambiguous call resolved as CORE::</tt><em class="replaceable">%s</em><tt class="literal">(), qualify as such or use &amp;</tt></b>
</dt>
<dd>
<p>(W ambiguous) A subroutine you have declared has the same name as a
Perl keyword, and you have used the name without qualification for
calling one or the other.  Perl decided to call the built-in because
the subroutine is not imported.</p>

<p>To force interpretation as a subroutine call, either put an ampersand
before the subroutine name or qualify the name with its 
package. Alternatively, you can import the subroutine (or pretend that it's
imported with the <tt class="literal">use subs</tt> pragma).</p>

<p>To silently interpret it as the Perl operator, use the <tt class="literal">CORE::</tt> prefix
on the operator (e.g., <tt class="literal">CORE::log($x)</tt>) or declare the subroutine
to be an object method.</p>
</dd>


<dt>
<b><tt class="literal">Args must match #! line</tt></b>
</dt>
<dd>
<p>(F) The setuid emulator requires that the arguments Perl was invoked
with match the arguments specified on the <tt class="literal">#!</tt> line.  Since some
systems impose a one-argument limit on the <tt class="literal">#!</tt> line, try combining
switches; for example, turn <tt class="userinput"><b>-w -U</b></tt> into <tt class="userinput"><b>-wU</b></tt>.</p>
</dd>


<dt>
<b><tt class="literal">Argument "</tt><em class="replaceable">%s</em><tt class="literal">" isn't numeric</tt></b>
</dt>
<dd>
<p>(W numeric) The indicated string was fed as an argument to an operator
that expected a numeric value instead.  If you're fortunate, the
message will identify which operator was so unfortunate.</p>
</dd>


<dt>
<b><tt class="literal">Array @</tt><em class="replaceable">%s</em> <tt class="literal">missing the @ in argument</tt> <em class="replaceable">%d</em><tt class="literal"> of</tt> <em class="replaceable">%s</em><tt class="literal">()</tt></b>
</dt>
<dd>
<p>(D deprecated) Really old Perls let you omit the <tt class="literal">@</tt> on array names in
some spots.  This is now heavily deprecated.</p>
</dd>


<dt>
<b><tt class="literal">assertion botched:</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(P) The <tt class="literal">malloc</tt> package that comes with Perl had an internal failure.</p>
</dd>


<dt>
<b><tt class="literal">Assertion failed: file "</tt><em class="replaceable">%s</em><tt class="literal">"</tt></b>
</dt>
<dd>
<p>(P) A general assertion failed.  The file in question must be examined.</p>
</dd>


<dt>
<b><tt class="literal">Assignment to both a list and a scalar</tt></b>
</dt>
<dd>
<p>(F) If you assign to a conditional operator, the second and third
arguments must either both be scalars or both be lists.  Otherwise,
Perl won't know which context to supply to the right side.</p>
</dd>


<dt>
<b><tt class="literal">Attempt to free non-arena SV: 0x%lx</tt></b>
</dt>
<dd>
<p>(P internal) All SV objects are supposed to be allocated from arenas that will
be garbage collected on exit.  An SV was discovered to be outside any
of those arenas.</p>
</dd>


<dt>
<b><tt class="literal">Attempt to free nonexistent shared string</tt></b>
</dt>
<dd>
<p>(P internal) Perl maintains a reference-counted internal table of
strings to optimize the storage and access of hash keys and other
strings.  This message indicates that someone tried to decrement the reference
count of a string that can no longer be found in the table.</p>
</dd>


<dt>
<b><tt class="literal">Attempt to free temp prematurely</tt></b>
</dt>
<dd>
<p>(W debugging) Mortalized values are supposed to be freed by the
internal <tt class="literal">free_tmps</tt> routine.  This message indicates that something else is
freeing the SV before the <tt class="literal">free_tmps</tt> routine gets a chance, which
means that the <tt class="literal">free_tmps</tt> routine will be freeing an unreferenced
scalar when it does try to free it.</p>
</dd>


<dt>
<b><tt class="literal">Attempt to free unreferenced glob pointers</tt></b>
</dt>
<dd>
<p>(P internal) The reference counts got screwed up on symbol aliases.</p>
</dd>


<dt>
<b><tt class="literal">Attempt to free unreferenced scalar</tt></b>
</dt>
<dd>
<p>(W internal) Perl went to decrement the reference count of a scalar to
see if it would go to 0, and discovered that it had already gone to 0
earlier and should have been freed and, in fact, probably was freed.
This could indicate that <tt class="literal">SvREFCNT_dec</tt> was called too many times, or
that <tt class="literal">SvREFCNT_inc</tt> was called too few times, or that the SV was
mortalized when it shouldn't have been, or that memory has been
corrupted.</p>
</dd>


<dt>
<b><tt class="literal">Attempt to join self</tt></b>
</dt>
<dd>
<p>(F) You tried to join a thread from within itself, which is an
impossible task.  You may be joining the wrong thread, or you may
need to move the <tt class="literal">join</tt> to some other thread.</p>
</dd>


<dt>
<b><tt class="literal">Attempt to pack pointer to temporary value</tt></b>
</dt>
<dd>
<p>(W pack) You tried to pass a temporary value (like the result of a
function, or a computed expression) to the <tt class="literal">p</tt> template of <tt class="literal">pack</tt>
template.  This means the result contains a pointer to a location that
could become invalid anytime, even before the end of the current
statement.  Use literals or global values as arguments to the <tt class="literal">p</tt>
template of <tt class="literal">pack</tt> to avoid this warning.</p>
</dd>


<dt>
<b><tt class="literal">Attempt to use reference as lvalue in substr</tt></b>
</dt>
<dd>
<p>(W substr) You supplied a reference as the first argument to <tt class="literal">substr</tt>
used as an lvalue, which is pretty strange.  Perhaps you forgot to
dereference it first.</p>
</dd>


<dt>
<b><tt class="literal">Bad arg length for</tt> <em class="replaceable">%s</em><tt class="literal">, is</tt> <em class="replaceable">%d</em><tt class="literal">, should be</tt> <em class="replaceable">%d</em></b>
</dt>
<dd>
<p>(F) You passed a buffer of the wrong size to one of <tt class="literal">msgctl</tt>, <tt class="literal">semctl</tt> or
<tt class="literal">shmctl</tt>.  In C parlance, the correct sizes are, respectively,
<tt class="literal">sizeof(struct msqid_ds *)</tt>, <tt class="literal">sizeof(struct semid_ds *)</tt>, and
<tt class="literal">sizeof(struct shmid_ds *)</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Bad filehandle:</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) A symbol was passed to something wanting a filehandle, but the
symbol has no filehandle associated with it.  Perhaps you didn't do an
<tt class="literal">open</tt>, or did it in another package.</p>
</dd>


<dt>
<b><tt class="literal">Bad free() ignored</tt></b>
</dt>
<dd>
<p>(S malloc) An internal routine called <tt class="literal">free</tt> on something that had
never been <tt class="literal">malloc</tt>ed in the first place. Mandatory, but can be
disabled by setting environment variable <tt class="literal">PERL_BADFREE</tt> to 1.</p>

<p>This message can be seen quite often with <tt class="literal">DB_File</tt> on systems with
"hard" dynamic linking, like AIX and OS/2. It's a bug in
Berkeley DB.</p>
</dd>


<dt>
<b><tt class="literal">Bad hash</tt></b>
</dt>
<dd>
<p>(P) One of the internal hash routines was passed a null HV pointer.</p>
</dd>


<dt>
<b><tt class="literal">Bad index while coercing array into hash</tt></b>
</dt>
<dd>
<p>(F) The index looked up in the hash found as the 0th element of a
pseudohash is not legal.  Index values must be 1 or greater.</p>
</dd>


<dt>
<b><tt class="literal">Bad name after</tt> <em class="replaceable">%s</em><tt class="literal">::</tt></b>
</dt>
<dd>
<p>(F) You started to name a symbol by using a package prefix and then didn't
finish the symbol.  In particular, you can't interpolate outside of quotes,
so:
<blockquote>
<pre class="programlisting">$var = 'myvar';
$sym = mypack::$var;</pre>
</blockquote>
is not the same as:
<blockquote>
<pre class="programlisting">$var = 'myvar';
$sym = "mypack::$var";</pre>
</blockquote>
</p>
</dd>


<dt>
<b><tt class="literal">Bad realloc() ignored</tt></b>
</dt>
<dd>
<p>(S malloc) An internal routine called <tt class="literal">realloc</tt> on something that had
never been <tt class="literal">malloc</tt>ed in the first place. Mandatory, but can be
disabled by setting environment variable <tt class="literal">PERL_BADFREE</tt> to 1.</p>
</dd>


<dt>
<b><tt class="literal">Bad symbol for array</tt></b>
</dt>
<dd>
<p>(P) An internal request asked to add an array entry to something that
wasn't a symbol table entry.</p>
</dd>


<dt>
<b><tt class="literal">Bad symbol for filehandle</tt></b>
</dt>
<dd>
<p>(P) An internal request asked to add a filehandle entry to something
that wasn't a symbol table entry.</p>
</dd>


<dt>
<b><tt class="literal">Bad symbol for hash</tt></b>
</dt>
<dd>
<p>(P) An internal request asked to add a hash entry to something that
wasn't a symbol table entry.</p>
</dd>


<dt>
<b><tt class="literal">Badly placed ()'s</tt></b>
</dt>
<dd>
<p>(A) You've accidentally run your script through <em class="emphasis">csh</em> instead
of Perl.  Check the <tt class="literal">#!</tt> line, or manually feed your script into
Perl yourself with <tt class="command">perl scriptname</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Bareword "</tt><em class="replaceable">%s</em><tt class="literal">" not allowed while "strict subs" in use</tt></b>
</dt>
<dd>
<p>(F) With <tt class="literal">strict subs</tt> in use, a bareword is only allowed as a
subroutine identifier, in curly brackets or to the left of the <tt class="literal">=&gt;</tt>
symbol. Perhaps you need to predeclare a subroutine?</p>
</dd>


<dt>
<b><tt class="literal">Bareword "</tt><em class="replaceable">%s</em><tt class="literal">" refers to nonexistent package</tt></b>
</dt>
<dd>
<p>(W bareword) You used a qualified bareword of the form <tt class="literal">Foo::</tt>, but
the compiler saw no other uses of that namespace before that point. Perhaps you need to predeclare a package?</p>
</dd>


<dt>
<b><tt class="literal">Bareword found in conditional</tt></b>
</dt>
<dd>
<p>(W bareword) The compiler found a bareword where it expected a
conditional, which often indicates that an <tt class="literal">||</tt> or <tt class="literal">&amp;&amp;</tt> was parsed
as part of the last argument of the previous construct, for example:
<blockquote>
<pre class="programlisting">open FOO || die;</pre>
</blockquote>

It may also indicate a misspelled constant that has been interpreted
as a bareword:
<blockquote>
<pre class="programlisting">use constant TYPO =&gt; 1;
if (TYOP) { print "foo" }</pre>
</blockquote>

The <tt class="literal">strict</tt> pragma is useful in avoiding such errors.</p>
</dd>


<dt>
<b><tt class="literal">BEGIN failed--compilation aborted</tt></b>
</dt>
<dd>
<p>(F) An untrapped exception was raised while executing a <tt class="literal">BEGIN</tt>
subroutine.  Compilation stops immediately and the interpreter is
exited.</p>
</dd>


<dt>
<b><tt class="literal">BEGIN not safe after errors--compilation aborted</tt></b>
</dt>
<dd>
<p>(F) Perl found a <tt class="literal">BEGIN</tt> subroutine (or a <tt class="literal">use</tt> directive, which
implies a <tt class="literal">BEGIN</tt>) after one or more compilation errors had
already occurred.  Since the intended environment for the <tt class="literal">BEGIN</tt>
could not be guaranteed (due to the errors), and since subsequent code
likely depends on its correct operation, Perl just gave up.</p>
</dd>


<dt>
<b><tt class="literal">Binary number &gt; 0b11111111111111111111111111111111 non-portable</tt></b>
</dt>
<dd>
<p>(W portable) The binary number you specified is larger than <tt class="literal">2**32-1</tt>
(4,294,967,295) and therefore nonportable between systems.</p>
</dd>


<dt>
<b><tt class="literal">bind() on closed socket</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W closed) You tried to do a <tt class="literal">bind</tt> on a closed socket.  Did you
forget to check the return value of your <tt class="literal">socket</tt> call?</p>
</dd>


<dt>
<b><tt class="literal">Bit vector size &gt; 32 non-portable</tt></b>
</dt>
<dd>
<p>(W portable) Using bit vector sizes larger than 32 is nonportable.</p>
</dd>


<dt>
<b><tt class="literal">Bizarre copy of</tt> <em class="replaceable">%s</em> <tt class="literal">in</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(P) Perl detected an attempt to copy an internal value that is not copiable.</p>
</dd>


<dt>
<b><tt class="literal">Buffer overflow in prime_env_iter:</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W internal) A warning peculiar to VMS.  While Perl was preparing to
iterate over <tt class="literal">%ENV</tt>, it encountered a logical name or symbol definition
which was too long, so it was truncated to the string shown.</p>
</dd>


<dt>
<b><tt class="literal">Callback called exit</tt></b>
</dt>
<dd>
<p>(F) A subroutine invoked from an external package via <tt class="literal">call_sv</tt>
exited by calling <tt class="literal">exit</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Can't "goto" out of a pseudo block</tt></b>
</dt>
<dd>
<p>(F) A <tt class="literal">goto</tt> statement was executed to jump out of what might look
like a block, except that it isn't a proper block.  This usually
occurs if you tried to jump out of a sort block or subroutine, which
is a no-no.</p>
</dd>


<dt>
<b><tt class="literal">Can't "goto" into the middle of a foreach loop</tt></b>
</dt>
<dd>
<p>(F) A <tt class="literal">goto</tt> statement was executed to jump into the middle of a
foreach loop.  You can't get there from here.</p>
</dd>


<dt>
<b><tt class="literal">Can't "last" outside a loop block</tt></b>
</dt>
<dd>
<p>(F) A <tt class="literal">last</tt> statement was executed to break out of the current block,
except that there's this itty-bitty problem called there isn't a
current block.  Note that an <tt class="literal">if</tt> or <tt class="literal">else</tt> block doesn't count as a
"loopish" block, nor does a block given to <tt class="literal">sort</tt>, <tt class="literal">map</tt>, or
<tt class="literal">grep</tt>.  You can usually double the curlies to get the same effect,
though, because the inner curlies will be considered a block that
loops once.</p>
</dd>


<dt>
<b><tt class="literal">Can't "next" outside a loop block</tt></b>
</dt>
<dd>
<p>(F) A <tt class="literal">next</tt> statement was executed to reiterate the current block, but
there isn't a current block.  Note that an <tt class="literal">if</tt> or <tt class="literal">else</tt> block doesn't
count as a "loopish" block, nor does a block given to <tt class="literal">sort</tt>, <tt class="literal">map</tt>,
or <tt class="literal">grep</tt>.  You can usually double the curlies to get the same effect
though, because the inner curlies will be considered a block that
loops once.</p>
</dd>


<dt>
<b><tt class="literal">Can't read CRTL environ</tt></b>
</dt>
<dd>
<p>(S) This is a warning peculiar to VMS.  Perl tried to read an element of
<tt class="literal">%ENV</tt> from the CRTL's internal environment array and discovered the
array was missing.  You need to figure out where your CRTL misplaced
its environ or define <tt class="literal">PERL_ENV_TABLES</tt> (see <em class="emphasis">perlvms</em>(1)) so that
the environ array is not searched.</p>
</dd>


<dt>
<b><tt class="literal">Can't "redo" outside a loop block</tt></b>
</dt>
<dd>
<p>(F) A <tt class="literal">redo</tt> statement was executed to restart the current block, but
there isn't a current block.  Note that an <tt class="literal">if</tt> or <tt class="literal">else</tt> block doesn't
count as a "loopish" block, nor does a block given to <tt class="literal">sort</tt>, <tt class="literal">map</tt>,
or <tt class="literal">grep</tt>.  You can usually double the curlies to get the same effect
though, because the inner curlies will be considered a block that
loops once.</p>
</dd>


<dt>
<b><tt class="literal">Can't bless non-reference value</tt></b>
</dt>
<dd>
<p>(F) Only hard references may be blessed.  This is how Perl "enforces"
encapsulation of objects.</p>
</dd>


<dt>
<b><tt class="literal">Can't break at that line</tt></b>
</dt>
<dd>
<p>(S internal) This warning is intended to be printed only while running
within the debugger, indicating the line number specified wasn't the
location of a statement that could be stopped at.</p>
</dd>


<dt>
<b><tt class="literal">Can't call method "</tt><em class="replaceable">%s</em><tt class="literal">" in empty package "</tt><em class="replaceable">%s</em><tt class="literal">"</tt></b>
</dt>
<dd>
<p>(F) You called a method correctly, and it correctly indicated a package
functioning as a class, but that package doesn't have <em class="emphasis">anything</em> defined
in it, let alone methods.</p>
</dd>


<dt>
<b><tt class="literal">Can't call method "</tt><em class="replaceable">%s</em><tt class="literal">" on unblessed reference</tt></b>
</dt>
<dd>
<p>(F) A method call must know in what package it's supposed to run.  It
ordinarily finds this out from the object reference you supply, but
you didn't supply an object reference in this case.  A reference isn't
an object reference until it has been blessed.</p>
</dd>


<dt>
<b><tt class="literal">Can't call method "</tt><em class="replaceable">%s</em><tt class="literal">" without a package or object reference</tt></b>
</dt>
<dd>
<p>(F) You used the syntax of a method call, but the slot filled by the
object reference or package name contains an expression that returns a
defined value that is neither an object reference nor a package name. Something like this will reproduce the error:
<blockquote>
<pre class="programlisting">$BADREF = 42;
process $BADREF 1,2,3;
$BADREF-&gt;process(1,2,3);</pre>
</blockquote>
</p>
</dd>


<dt>
<b><tt class="literal">Can't call method "</tt><em class="replaceable">%s</em><tt class="literal">" on an undefined value</tt></b>
</dt>
<dd>
<p>(F) You used the syntax of a method call, but the slot filled by the
object reference or package name contains an undefined value.
Something like this will reproduce the error:
<blockquote>
<pre class="programlisting">$BADREF = undef;
process $BADREF 1,2,3;
$BADREF-&gt;process(1,2,3);</pre>
</blockquote>
</p>
</dd>


<dt>
<b><tt class="literal">Can't chdir to</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) You called <tt class="command">perl -x/foo/bar</tt>, but <em class="emphasis">/foo/bar</em> is not a directory
that you can <tt class="literal">chdir</tt> to, possibly because it doesn't exist.</p>
</dd>


<dt>
<b><tt class="literal">Can't check filesystem of script "</tt><em class="replaceable">%s</em><tt class="literal">" for nosuid</tt></b>
</dt>
<dd>
<p>(P) For some reason you can't check the filesystem of the script for
<tt class="literal">nosuid</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Can't coerce</tt> <em class="replaceable">%s</em> <tt class="literal">to integer in</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) Certain types of SVs, in particular symbol table entries
(typeglobs), can't be forced to stop being what they are.  So you
can't say things like:
<blockquote>
<pre class="programlisting">*foo += 1;</pre>
</blockquote>

You <em class="emphasis">can</em> say:
<blockquote>
<pre class="programlisting">$foo = *foo;
$foo += 1;</pre>
</blockquote>

but then <tt class="literal">$foo</tt> no longer contains a glob.</p>
</dd>


<dt>
<b><tt class="literal">Can't coerce</tt> <em class="replaceable">%s</em> <tt class="literal">to number in</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) Certain types of SVs, in particular symbol table entries
(typeglobs), can't be forced to stop being what they are.</p>
</dd>


<dt>
<b><tt class="literal">Can't coerce</tt> <em class="replaceable">%s</em> <tt class="literal">to string in</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) Certain types of SVs, in particular symbol table entries
(typeglobs), can't be forced to stop being what they are.</p>
</dd>


<dt>
<b><tt class="literal">Can't coerce array into hash</tt></b>
</dt>
<dd>
<p>(F) You used an array where a hash was expected, but the array has no
information on how to map from keys to array indices.  You can do that
only with arrays that have a hash reference at index 0.</p>
</dd>


<dt>
<b><tt class="literal">Can't create pipe mailbox</tt></b>
</dt>
<dd>
<p>(P) This is an error peculiar to VMS.  The process is suffering from exhausted
quotas or other plumbing problems.</p>
</dd>


<dt>
<b><tt class="literal">Can't declare class for non-scalar</tt> <em class="replaceable">%s</em> <tt class="literal">in "</tt><em class="replaceable">%s</em><tt class="literal">"</tt></b>
</dt>
<dd>
<p>(S) Currently, only scalar variables can declared with a specific
class qualifier in a <tt class="literal">my</tt> or <tt class="literal">our</tt> declaration.  The semantics may
be extended for other types of variables in future.</p>
</dd>


<dt>
<b><tt class="literal">Can't declare</tt> <em class="replaceable">%s</em> <tt class="literal">in "</tt><em class="replaceable">%s</em><tt class="literal">"</tt></b>
</dt>
<dd>
<p>(F) Only scalar, array, and hash variables may be declared as <tt class="literal">my</tt> or
<tt class="literal">our</tt> variables.  They must have ordinary identifiers as names.</p>
</dd>


<dt>
<b><tt class="literal">Can't do inplace edit on</tt> <em class="replaceable">%s</em><tt class="literal">:</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(S inplace) The creation of the new file failed for the indicated
reason.</p>
</dd>


<dt>
<b><tt class="literal">Can't do inplace edit without backup</tt></b>
</dt>
<dd>
<p>(F) You're on a system such as MS-DOS that gets confused if you try reading
from a deleted (but still opened) file.  You have to say <tt class="command">-i.bak</tt>, or some
such.</p>
</dd>


<dt>
<b><tt class="literal">Can't do inplace edit:</tt> <em class="replaceable">%s</em> <tt class="literal">would not be unique</tt></b>
</dt>
<dd>
<p>(S inplace) Your filesystem does not support filenames longer than 14
characters and Perl was unable to create a unique filename during
inplace editing with the <span class="option">-i</span> switch.  The file was ignored.</p>
</dd>


<dt>
<b><tt class="literal">Can't do inplace edit:</tt> <em class="replaceable">%s</em> <tt class="literal">is not a regular file</tt></b>
</dt>
<dd>
<p>(S inplace) You tried to use the <span class="option">-i</span> switch on a special file, such
as a file in <em class="emphasis">/dev</em>, or a FIFO.  The file was ignored.</p>
</dd>


<dt>
<b><tt class="literal">Can't do setegid!</tt></b>
</dt>
<dd>
<p>(P) The <tt class="literal">setegid</tt> call failed for some reason in the setuid emulator
of <em class="emphasis">suidperl</em>.</p>
</dd>


<dt>
<b><tt class="literal">Can't do seteuid!</tt></b>
</dt>
<dd>
<p>(P) The setuid emulator of <em class="emphasis">suidperl</em> failed for some reason.</p>
</dd>


<dt>
<b><tt class="literal">Can't do setuid</tt></b>
</dt>
<dd>
<p>(F) This typically means that ordinary <em class="emphasis">perl</em> tried to <tt class="literal">exec</tt><em class="emphasis">suidperl</em> to do setuid emulation, but couldn't <tt class="literal">exec</tt> it.  It looks
for a name of the form <em class="emphasis">sperl5.000</em> in the same directory that the
perl executable resides under the name <em class="emphasis">perl5.000</em>, typically
<em class="emphasis">/usr/local/bin</em> on Unix machines.  If the file is there, check the
execute permissions.  If it isn't, ask your sysadmin why not.</p>
</dd>


<dt>
<b><tt class="literal">Can't do waitpid with flags</tt></b>
</dt>
<dd>
<p>(F) This machine doesn't have either <tt class="literal">waitpid</tt> or <tt class="literal">wait4</tt>, so only
<tt class="literal">waitpid</tt> without flags is emulated.</p>
</dd>


<dt>
<b><tt class="literal">Can't do {n,m} with n &gt; m</tt></b>
</dt>
<dd>
<p>(F) Minima must be less than or equal to maxima.  If you really want
your regexp to match something 0 times, just use <tt class="literal">{0}</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Can't emulate -</tt><em class="replaceable">%s</em> <tt class="literal">on #! line</tt></b>
</dt>
<dd>
<p>(F) The <tt class="literal">#!</tt> line specifies a switch that doesn't make sense at this point.
For example, it would be kind of silly to put a <span class="option">-x</span> on the <tt class="literal">#!</tt> line.</p>
</dd>


<dt>
<b><tt class="literal">Can't exec "</tt><em class="replaceable">%s</em><tt class="literal">":</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W exec) A <tt class="literal">system</tt>, <tt class="literal">exec</tt>, or piped <tt class="literal">open</tt> call could not execute
the named program for the indicated reason.  Typical reasons include
the permissions were wrong on the file, the file wasn't found in
<tt class="literal">$ENV{PATH}</tt>, the executable in question was compiled for another
architecture, or the <tt class="literal">#!</tt> line in a script points to an interpreter that
can't be run for similar reasons.  (Or maybe your system doesn't
support <tt class="literal">#!</tt> at all.)</p>
</dd>


<dt>
<b><tt class="literal">Can't exec</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) Perl was trying to execute the indicated program for you because that's
what the <tt class="literal">#!</tt> line said to do.  If that's not what you wanted, you may need to
mention <tt class="literal">perl</tt> on the <tt class="literal">#!</tt> line somewhere.</p>
</dd>


<dt>
<b><tt class="literal">Can't execute</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) You used the <span class="option">-S</span> switch, but the copies of the script to execute found
in the <tt class="literal">PATH</tt> did not have correct permissions.</p>
</dd>


<dt>
<b><tt class="literal">Can't find</tt> <em class="replaceable">%s</em> <tt class="literal">on PATH, '.' not in PATH</tt></b>
</dt>
<dd>
<p>(F) You used the <span class="option">-S</span> switch, but the script to execute could not be found
in the <tt class="literal">PATH</tt>, or at least not with the correct permissions.  The script
exists in the current directory, but <tt class="literal">PATH</tt> prohibits running it.</p>
</dd>


<dt>
<b><tt class="literal">Can't find</tt> <em class="replaceable">%s</em> <tt class="literal">on PATH</tt></b>
</dt>
<dd>
<p>(F) You used the <span class="option">-S</span> switch, but the script to execute could not be found
in the <tt class="literal">PATH</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Can't find label</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) You said to <tt class="literal">goto</tt> a label that isn't mentioned anywhere that
it's possible for us to go to.</p>
</dd>


<dt>
<b><tt class="literal">Can't find string terminator</tt> <em class="replaceable">%s</em> <tt class="literal">anywhere before EOF</tt></b>
</dt>
<dd>
<p>(F) Perl strings can stretch over multiple lines.  This message means that
the closing delimiter was omitted.  Because bracketed quotes count nesting
levels, the following is missing its final parenthesis:
<blockquote>
<pre class="programlisting">print q(The character '(' starts a side comment.);</pre>
</blockquote>

If you're getting this error from a here document, you may have 
included unseen whitespace before or after your closing tag. A good 
programmer's editor will have a way to help you find these characters.</p>
</dd>


<dt>
<b><tt class="literal">Can't fork</tt></b>
</dt>
<dd>
<p>(F) A fatal error occurred trying to <tt class="literal">fork</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Can't get filespec - stale stat buffer?</tt></b>
</dt>
<dd>
<p>(S) This warning is peculiar to VMS.  This arises because of the difference
between access checks under VMS and under the Unix model Perl assumes. Under VMS, access checks are done by filename, rather than by bits in
the <tt class="literal">stat</tt> buffer, so that ACLs and other protections can be taken into
account.  Unfortunately, Perl assumes that the <tt class="literal">stat</tt> buffer contains
all the necessary information and passes it, instead of the filespec,
to the access-checking routine.  It will try to retrieve the filespec
using the device name and FID present in the stat buffer, but if you have made a subsequent call to the CRTL <tt class="literal">stat</tt>
routine, this won't work because the device name is overwritten with each call.  If
this warning appears, the name lookup failed and the access-checking
routine gave up and returned false, just to be conservative.  (Note:
the access-checking routine knows about the Perl <tt class="literal">stat</tt> operator and
file tests, so you shouldn't ever see this warning in response to a
Perl command; it arises only if some internal code takes stat buffers
lightly.)</p>
</dd>


<dt>
<b><tt class="literal">Can't get pipe mailbox device name</tt></b>
</dt>
<dd>
<p>(P) This error is peculiar to VMS.  After creating a mailbox to act as a
pipe, Perl can't retrieve its name for later use.</p>
</dd>


<dt>
<b><tt class="literal">Can't get SYSGEN parameter value for MAXBUF</tt></b>
</dt>
<dd>
<p>(P) This error is peculiar to VMS.  Perl asked <tt class="literal">$GETSYI</tt> how big you want
your mailbox buffers to be, and it didn't get an answer.</p>
</dd>


<dt>
<b><tt class="literal">Can't goto subroutine outside a subroutine</tt></b>
</dt>
<dd>
<p>(F) The deeply magical <tt class="literal">goto</tt><em class="replaceable">SUBROUTINE</em> call can only replace one
subroutine call for another.  It can't manufacture one out of whole
cloth.  In general, you should be calling it out of only an <tt class="literal">AUTOLOAD</tt>
routine anyway.</p>
</dd>


<dt>
<b><tt class="literal">Can't goto subroutine from an eval-string</tt></b>
</dt>
<dd>
<p>(F) The <tt class="literal">goto</tt><em class="replaceable">SUBROUTINE</em> call can't be used to jump out of an
<tt class="literal">eval</tt> string.  (You can use it to jump out of an <tt class="literal">eval</tt><em class="replaceable">BLOCK</em>,
but you probably don't want to.)</p>
</dd>


<dt>
<b><tt class="literal">Can't ignore signal CHLD, forcing to default</tt></b>
</dt>
<dd>
<p>(W signal) Perl has detected that it is being run with the <tt class="literal">SIGCHLD</tt> signal
(sometimes known as <tt class="literal">SIGCLD</tt>) disabled.  Since disabling this signal
will interfere with proper determination of exit status of child
processes, Perl has reset the signal to its default value. This situation typically indicates that the parent program under
which Perl may be running (e.g., <em class="emphasis">cron</em>) is being very careless.</p>
</dd>


<dt>
<b><tt class="literal">Can't localize through a reference</tt></b>
</dt>
<dd>
<p>(F) You said something like <tt class="literal">local $$ref</tt>, which Perl can't currently
handle because when it goes to restore the old value of whatever <tt class="literal">$ref</tt>
pointed to after the scope of the <tt class="literal">local</tt> is finished, it can't be
sure that <tt class="literal">$ref</tt> will still be a reference.</p>
</dd>


<dt>
<b><tt class="literal">Can't localize lexical variable</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) You used <tt class="literal">local</tt> on a variable name that was previously declared as a
lexical variable using <tt class="literal">my</tt>.  This is not allowed.  If you want to
localize a package variable of the same name, qualify it with the
package name.</p>
</dd>


<dt>
<b><tt class="literal">Can't localize pseudohash element</tt></b>
</dt>
<dd>
<p>(F) You said something like <tt class="literal">local $ar-&gt;{'key'}</tt>, where <tt class="literal">$ar</tt> is
a reference to a pseudohash.  That hasn't been implemented yet, but
you can get a similar effect by localizing the corresponding array
element directly--<tt class="literal">local $ar-&gt;[$ar-&gt;[0]{'key'}]</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Can't locate auto/</tt><em class="replaceable">%s</em><tt class="literal">.al in @INC</tt></b>
</dt>
<dd>
<p>(F) A function (or method) was called in a package that allows
autoloading, but there is no function to autoload.  Most probable causes
are a misprint in a function/method name or a failure to <tt class="literal">AutoSplit</tt>
the file, say, by doing <tt class="literal">make install</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Can't locate</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) You said to <tt class="literal">do</tt> (or <tt class="literal">require</tt>, or <tt class="literal">use</tt>) a file that couldn't
be found. Perl looks for the file in all the locations mentioned in
<tt class="literal">@INC</tt>, unless the filename included the full path to the file. Perhaps you need to set the <tt class="literal">PERL5LIB</tt> or <tt class="literal">PERL5OPT</tt> environment variable
to say where the extra library is, or maybe the script needs to add
the library name to <tt class="literal">@INC</tt>.  Or maybe you just misspelled the name of
the file.</p>
</dd>


<dt>
<b><tt class="literal">Can't locate object method "</tt><em class="replaceable">%s</em><tt class="literal">" via package "</tt><em class="replaceable">%s</em><tt class="literal">"</tt></b>
</dt>
<dd>
<p>(F) You called a method correctly, and it correctly indicated a package
functioning as a class, but that package doesn't define that particular
method, nor does any of its base classes.</p>
</dd>


<dt>
<b><tt class="literal">Can't locate package</tt> <em class="replaceable">%s</em> <tt class="literal">for @</tt><em class="replaceable">%s</em><tt class="literal">::ISA</tt></b>
</dt>
<dd>
<p>(W syntax) The <tt class="literal">@ISA</tt> array contained the name of another package that
doesn't seem to exist.</p>
</dd>


<dt>
<b><tt class="literal">Can't make list assignment to \%ENV on this system</tt></b>
</dt>
<dd>
<p>(F) List assignment to <tt class="literal">%ENV</tt> is not supported on some systems,
notably VMS.</p>
</dd>


<dt>
<b><tt class="literal">Can't modify</tt> <em class="replaceable">%s</em> <tt class="literal">in</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) You aren't allowed to assign to the item indicated or otherwise try to
change it, such as with an autoincrement.</p>
</dd>


<dt>
<b><tt class="literal">Can't modify non-lvalue subroutine call</tt></b>
</dt>
<dd>
<p>(F) Subroutines meant to be used in lvalue context should be declared as
such.</p>
</dd>


<dt>
<b><tt class="literal">Can't modify nonexistent substring</tt></b>
</dt>
<dd>
<p>(P) The internal routine that does assignment to a <tt class="literal">substr</tt> was handed
a NULL.</p>
</dd>


<dt>
<b><tt class="literal">Can't msgrcv to read-only var</tt></b>
</dt>
<dd>
<p>(F) The target of a <tt class="literal">msgrcv</tt> must be modifiable to be used as a receive
buffer.</p>
</dd>


<dt>
<b><tt class="literal">Can't open</tt> <em class="replaceable">%s</em><tt class="literal">:</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(S inplace) The implicit opening of a file through use of the <tt class="literal">&lt;&gt;</tt>
filehandle, either implicitly under the <span class="option">-n</span> or <span class="option">-p</span> command-line
switches or explicitly, failed for the indicated reason.  Usually this
is because you don't have read permission for a file which you named
on the command line.</p>
</dd>


<dt>
<b><tt class="literal">Can't open bidirectional pipe</tt></b>
</dt>
<dd>
<p>(W pipe) You tried to say <tt class="literal">open(CMD, "|cmd|")</tt>, which is not
supported.  You can try any of several modules in the Perl library to
do this, such as <tt class="literal">IPC::Open2</tt>.  Alternatively, direct the pipe's output to
a file using <tt class="literal">&gt;</tt>, and then read it in under a different filehandle.</p>
</dd>


<dt>
<b><tt class="literal">Can't open error file</tt> <em class="replaceable">%s</em> <tt class="literal">as stderr</tt></b>
</dt>
<dd>
<p>(F) This is an error peculiar to VMS.  Perl does its own command-line
redirection, and it couldn't open the file specified after <tt class="literal">2&gt;</tt> or
<tt class="literal">2&gt;&gt;</tt> on the command line for writing.</p>
</dd>


<dt>
<b><tt class="literal">Can't open input file</tt> <em class="replaceable">%s</em> <tt class="literal">as stdin</tt></b>
</dt>
<dd>
<p>(F) This is an error peculiar to VMS.  Perl does its own command-line
redirection, and it couldn't open the file specified after <tt class="literal">&lt;</tt> on
the command line for reading.</p>
</dd>


<dt>
<b><tt class="literal">Can't open output file</tt> <em class="replaceable">%s</em> <tt class="literal">as stdout</tt></b>
</dt>
<dd>
<p>(F) This is an error peculiar to VMS.  Perl does its own command-line
redirection, and it couldn't open the file specified after <tt class="literal">&gt;</tt> or
<tt class="literal">&gt;&gt;</tt> on the command line for writing.</p>
</dd>


<dt>
<b><tt class="literal">Can't open output pipe (name:</tt> <em class="replaceable">%s</em><tt class="literal">)</tt></b>
</dt>
<dd>
<p>(P) This is an error peculiar to VMS.  Perl does its own command-line
redirection, and it couldn't open the pipe into which to send data
destined for <tt class="literal">STDOUT</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Can't open perl script "</tt><em class="replaceable">%s</em><tt class="literal">":</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) The script you specified can't be opened for the indicated reason.</p>
</dd>


<dt>
<b><tt class="literal">Can't redefine active sort subroutine</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) Perl optimizes the internal handling of sort subroutines and keeps
pointers into them.  You tried to redefine one such sort subroutine when it
was currently active, which is not allowed.  If you really want to do
this, you should write <tt class="literal">sort { &amp;func } @x</tt> instead of <tt class="literal">sort func @x</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Can't remove</tt> <em class="replaceable">%s</em><tt class="literal">:</tt> <em class="replaceable">%s</em><tt class="literal">, skipping file</tt></b>
</dt>
<dd>
<p>(S inplace) You requested an inplace edit without creating a backup
file.  Perl was unable to remove the original file to replace it with
the modified file.  The file was left unmodified.</p>
</dd>


<dt>
<b><tt class="literal">Can't rename</tt> <em class="replaceable">%s</em> <tt class="literal">to</tt> <em class="replaceable">%s</em><tt class="literal">:</tt> <em class="replaceable">%s</em><tt class="literal">, skipping file</tt></b>
</dt>
<dd>
<p>(S inplace) The rename done by the <span class="option">-i</span> switch failed for some reason,
probably because you don't have write permission to the directory.</p>
</dd>


<dt>
<b><tt class="literal">Can't reopen input pipe (name:</tt> <em class="replaceable">%s</em><tt class="literal">) in binary mode</tt></b>
</dt>
<dd>
<p>(P) An error peculiar to VMS.  Perl thought <tt class="literal">STDIN</tt> was a pipe, and tried to
reopen it to accept binary data.  Alas, it failed.</p>
</dd>


<dt>
<b><tt class="literal">Can't reswap uid and euid</tt></b>
</dt>
<dd>
<p>(P) The <tt class="literal">setreuid</tt> call failed for some reason in the setuid emulator
of <em class="emphasis">suidperl</em>.</p>
</dd>


<dt>
<b><tt class="literal">Can't return outside a subroutine</tt></b>
</dt>
<dd>
<p>(F) The <tt class="literal">return</tt> statement was executed in mainline code, that is, where
there was no subroutine call to return out of.</p>
</dd>


<dt>
<b><tt class="literal">Can't return</tt> <em class="replaceable">%s</em> <tt class="literal">from lvalue subroutine</tt></b>
</dt>
<dd>
<p>(F) Perl detected an attempt to return illegal lvalues (such
as temporary or readonly values) from a subroutine used as an lvalue. This is not allowed.</p>
</dd>


<dt>
<b><tt class="literal">Can't stat script "</tt><em class="replaceable">%s</em><tt class="literal">"</tt></b>
</dt>
<dd>
<p>(P) For some reason, you can't <tt class="literal">fstat</tt> the script even though you have
it open already.  Bizarre.</p>
</dd>


<dt>
<b><tt class="literal">Can't swap uid and euid</tt></b>
</dt>
<dd>
<p>(P) The <tt class="literal">setreuid</tt> call failed for some reason in the setuid emulator
of <em class="emphasis">suidperl</em>.</p>
</dd>


<dt>
<b><tt class="literal">Can't take log of</tt> <em class="replaceable">%g</em></b>
</dt>
<dd>
<p>(F) For ordinary real numbers, you can't take the logarithm of a
negative number or zero. There's a <tt class="literal">Math::Complex</tt> package that comes
standard with Perl, though, if you really want to do that for
the negative numbers.</p>
</dd>


<dt>
<b><tt class="literal">Can't take sqrt of</tt> <em class="replaceable">%g</em></b>
</dt>
<dd>
<p>(F) For ordinary real numbers, you can't take the square root of a
negative number.  There's a <tt class="literal">Math::Complex</tt> package that comes standard
with Perl, though, if you really want to do that.</p>
</dd>


<dt>
<b><tt class="literal">Can't undef active subroutine</tt></b>
</dt>
<dd>
<p>(F) You can't undefine a routine that's currently running.  You can,
however, redefine it while it's running, and you can even <tt class="literal">undef</tt> the
redefined subroutine while the old routine is running.  Go figure.</p>
</dd>


<dt>
<b><tt class="literal">Can't unshift</tt></b>
</dt>
<dd>
<p>(F) You tried to unshift an "unreal" array that can't be <tt class="literal">unshift</tt>ed,
such as the main Perl stack.</p>
</dd>


<dt>
<b><tt class="literal">Can't upgrade that kind of scalar</tt></b>
</dt>
<dd>
<p>(P) The internal <tt class="literal">sv_upgrade</tt> routine adds "members" to an SV, making
it into a more specialized kind of SV.  The top several SV types are
so specialized, however, that they cannot be interconverted.  This
message indicates that such a conversion was attempted.</p>
</dd>


<dt>
<b><tt class="literal">Can't upgrade to undef</tt></b>
</dt>
<dd>
<p>(P) The undefined SV is the bottom of the totem pole, in the scheme
of upgradability.  Upgrading to <tt class="literal">undef</tt> indicates an error in the
code calling <tt class="literal">sv_upgrade</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Can't use %%! because Errno.pm is not available</tt></b>
</dt>
<dd>
<p>(F) The first time the <tt class="literal">%!</tt> hash is used, Perl automatically loads
the <tt class="literal">Errno</tt> module. The <tt class="literal">Errno</tt> module is expected to tie the <tt class="literal">%!</tt>
hash to provide symbolic names for <tt class="literal">$!</tt> errno values.</p>
</dd>


<dt>
<b><tt class="literal">Can't use "my</tt> <em class="replaceable">%s</em><tt class="literal">" in sort comparison</tt></b>
</dt>
<dd>
<p>(F) The global variables <tt class="literal">$a</tt> and <tt class="literal">$b</tt> are reserved for sort
comparisons.  You mentioned <tt class="literal">$a</tt> or <tt class="literal">$b</tt> in the same line as the 
<tt class="literal">&lt;=&gt;</tt> or <tt class="literal">cmp</tt> operator, and the variable had earlier been declared
as a lexical variable.  Either qualify the sort variable with the
package name, or rename the lexical variable.</p>
</dd>


<dt>
<b><tt class="literal">Bad evalled substitution pattern</tt></b>
</dt>
<dd>
<p>(F) You've used the <tt class="literal">/e</tt> switch to evaluate the replacement for a
substitution, but Perl found a syntax error in the code to evaluate,
most likely an unexpected right brace <tt class="literal">}</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Can't use</tt> <em class="replaceable">%s</em> <tt class="literal">for loop variable</tt></b>
</dt>
<dd>
<p>(F) Only a simple scalar variable may be used as a loop variable on a
<tt class="literal">foreach</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Can't use</tt> <em class="replaceable">%s</em> <tt class="literal">ref as</tt> <em class="replaceable">%s</em> <tt class="literal">ref</tt></b>
</dt>
<dd>
<p>(F) You've mixed up your reference types.  You have to dereference a
reference of the type needed.  You can use the <tt class="literal">ref</tt>
function to test the type of the reference, if need be.</p>
</dd>


<dt>
<b><tt class="literal">Can't use \</tt><em class="replaceable">%c</em><tt class="literal"> to mean $</tt><em class="replaceable">%c</em><tt class="literal"> in expression</tt></b>
</dt>
<dd>
<p>(W syntax) In an ordinary expression, backslash is a unary operator
that creates a reference to its argument.  The use of backslash to
indicate a backreference to a matched substring is valid only as part
of a regular expression pattern.  Trying to do this in ordinary Perl
code produces a value that prints out looking like <tt class="literal">SCALAR(0xdecaf)</tt>. Use the <tt class="literal">$1</tt> form instead.</p>
</dd>


<dt>
<b><tt class="literal">Can't use bareword ("</tt><em class="replaceable">%s</em><tt class="literal">") as</tt> <em class="replaceable">%s</em> <tt class="literal">ref while "strict refs" in use</tt></b>
</dt>
<dd>
<p>(F) Only hard references are allowed by <tt class="literal">strict refs</tt>.  Symbolic
references are disallowed.</p>
</dd>


<dt>
<b><tt class="literal">Can't use string ("</tt><em class="replaceable">%s</em><tt class="literal">") as</tt> <em class="replaceable">%s</em> <tt class="literal">ref while "strict refs" in use</tt></b>
</dt>
<dd>
<p>(F) Only hard references are allowed by <tt class="literal">strict refs</tt>.  Symbolic
references are disallowed.</p>
</dd>


<dt>
<b><tt class="literal">Can't use an undefined value as</tt> <em class="replaceable">%s</em> <tt class="literal">reference</tt></b>
</dt>
<dd>
<p>(F) A value used as either a hard reference or a symbolic reference must
be a defined value.  This helps to delurk some insidious errors.</p>
</dd>


<dt>
<b><tt class="literal">Can't use global</tt> <em class="replaceable">%s</em> <tt class="literal">in "my"</tt></b>
</dt>
<dd>
<p>(F) You tried to declare a magical variable as a lexical variable.  This is
not allowed because the magic can be tied to only one location (namely
the global variable) and it would be incredibly confusing to have
variables in your program that looked like magical variables but
weren't.</p>
</dd>


<dt>
<b><tt class="literal">Can't use subscript on</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) The compiler tried to interpret a bracketed expression as a
subscript.  But to the left of the brackets was an expression that
didn't look like an array reference, or anything else subscriptable.</p>
</dd>


<dt>
<b><tt class="literal">Can't weaken a nonreference</tt></b>
</dt>
<dd>
<p>(F) You attempted to weaken something that was not a reference.  Only
references can be weakened.</p>
</dd>


<dt>
<b><tt class="literal">Can't x= to read-only value</tt></b>
</dt>
<dd>
<p>(F) You tried to repeat a constant value (often the undefined value) with
an assignment operator, which implies modifying the value itself. Perhaps you need to copy the value to a temporary variable, and repeat that.</p>
</dd>


<dt>
<b><tt class="literal">Can't find an opnumber for "</tt><em class="replaceable">%s</em><tt class="literal">"</tt></b>
</dt>
<dd>
<p>(F) A string of a form <tt class="literal">CORE::</tt><em class="replaceable">word</em> was given to <tt class="literal">prototype</tt>, but
there is no built-in with the name <em class="replaceable">word</em>.</p>
</dd>


<dt>
<b><tt class="literal">Can't resolve method `</tt><em class="replaceable">%s</em><tt class="literal">' overloading `</tt><em class="replaceable">%s</em><tt class="literal">' in package `</tt><em class="replaceable">%s</em><tt class="literal">'</tt></b>
</dt>
<dd>
<p>(F|P) An error occurred when resolving overloading specified by a method name (as
opposed to a subroutine reference): no such method callable via the
package. If the method name is <tt class="literal">???</tt>, this is an internal error.</p>
</dd>


<dt>
<b><tt class="literal">Character class [:</tt><em class="replaceable">%s</em><tt class="literal">:] unknown</tt></b>
</dt>
<dd>
<p>(F) The class in the character class <tt class="literal">[: :]</tt> syntax is unknown.</p>
</dd>


<dt>
<b><tt class="literal">Character class syntax [</tt><em class="replaceable">%s</em><tt class="literal">] belongs inside character classes</tt></b>
</dt>
<dd>
<p>(W unsafe) The character class constructs <tt class="literal">[: :]</tt>, <tt class="literal">[= =]</tt>, and
<tt class="literal">[. .]</tt> go <em class="emphasis">inside</em> character classes, for example:
<tt class="literal">/[012[:alpha:]345]/</tt>.  Note that the <tt class="literal">[= =]</tt> and <tt class="literal">[. .]</tt> constructs are not
currently implemented; they are simply placeholders for future
extensions.</p>
</dd>


<dt>
<b><tt class="literal">Character class syntax [. .] is reserved for future extensions</tt></b>
</dt>
<dd>
<p>(W regexp) Within regular expression character classes (<tt class="literal">[]</tt>), the syntax
beginning with <tt class="literal">[.</tt> and ending with <tt class="literal">.]</tt> is reserved for future
extensions.  If you need to represent those character sequences inside
a regular expression character class, just quote the square brackets
with the backslash: <tt class="literal">\[.</tt> and <tt class="literal">.\]</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Character class syntax [= =] is reserved for future extensions</tt></b>
</dt>
<dd>
<p>(W regexp) Within regular expression character classes (<tt class="literal">[]</tt>), the syntax
beginning with <tt class="literal">[=</tt> and ending with <tt class="literal">=]</tt> is reserved for future extensions. If you need to represent those character sequences inside a regular
expression character class, just quote the square brackets with the
backslash: <tt class="literal">\[=</tt> and <tt class="literal">=\]</tt>.</p>
</dd>


<dt>
<b><tt class="literal">chmod() mode argument is missing initial 0</tt></b>
</dt>
<dd>
<p>(W chmod) A novice will sometimes say:
<blockquote>
<pre class="programlisting">chmod 777, $filename</pre>
</blockquote>

not realizing that 777 will be interpreted as a decimal number, equivalent
to 01411.  Octal constants are introduced with a leading 0 in Perl, as in C.</p>
</dd>


<dt>
<b><tt class="literal">Close on unopened file &lt;</tt><em class="replaceable">%s</em><tt class="literal">&gt;</tt></b>
</dt>
<dd>
<p>(W unopened) You tried to close a filehandle that was never opened.</p>
</dd>


<dt>
<b><tt class="literal">Compilation failed in require</tt></b>
</dt>
<dd>
<p>(F) Perl could not compile a file specified in a <tt class="literal">require</tt> statement. Perl uses this generic message when none of the errors that it encountered
were severe enough to halt compilation immediately.</p>
</dd>


<dt>
<b><tt class="literal">Complex regular subexpression recursion limit (</tt><em class="replaceable">%d</em><tt class="literal">) exceeded</tt></b>
</dt>
<dd>
<p>(W regexp) The regular expression engine uses recursion in complex
situations where backtracking is required.  Recursion depth is limited
to 32,766, or perhaps less in architectures where the stack cannot
grow arbitrarily.  ("Simple" and "medium" situations are handled
without recursion and are not subject to a limit.) Try shortening the
string under examination; looping in Perl code (e.g., with
<tt class="literal">while</tt>) rather than in the regular expression
engine; or rewriting the regular expression so that it is simpler or
backtracks less.</p>
</dd>


<dt>
<b><tt class="literal">connect() on closed socket</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W closed) You tried to do a connect on a closed socket.  Did you
forget to check the return value of your <tt class="literal">socket</tt> call?</p>
</dd>


<dt>
<b><tt class="literal">Constant is not</tt> <em class="replaceable">%s</em> <tt class="literal">reference</tt></b>
</dt>
<dd>
<p>(F) A constant value (perhaps declared using the <tt class="literal">use constant</tt> pragma)
is being dereferenced, but it amounts to the wrong type of reference.  The
message indicates the type of reference that was expected. This usually
indicates a syntax error in dereferencing the constant value.</p>
</dd>


<dt>
<b><tt class="literal">Constant subroutine</tt> <em class="replaceable">%s</em> <tt class="literal">redefined</tt></b>
</dt>
<dd>
<p>(S|W redefine) You redefined a subroutine that had previously been
eligible for inlining.</p>
</dd>


<dt>
<b><tt class="literal">Constant subroutine</tt> <em class="replaceable">%s</em> <tt class="literal">undefined</tt></b>
</dt>
<dd>
<p>(W misc) You undefined a subroutine that had previously been eligible for
inlining.</p>
</dd>


<dt>
<b><tt class="literal">constant(</tt><em class="replaceable">%s</em><tt class="literal">):</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) The parser found inconsistencies either while attempting to define an
overloaded constant or when trying to find the character name specified
in the <tt class="literal">\N{...}</tt> escape.  Perhaps you forgot to load the corresponding
<tt class="literal">overload</tt> or <tt class="literal">charnames</tt> pragma?</p>
</dd>


<dt>
<b><tt class="literal">Copy method did not return a reference</tt></b>
</dt>
<dd>
<p>(F) The method that overloads <tt class="literal">=</tt> is buggy.</p>
</dd>


<dt>
<b><tt class="literal">CORE::</tt><em class="replaceable">%s</em> <tt class="literal">is not a keyword</tt></b>
</dt>
<dd>
<p>(F) The <tt class="literal">CORE::</tt> namespace is reserved for Perl keywords.</p>
</dd>


<dt>
<b><tt class="literal">Corrupt malloc ptr 0x</tt><em class="replaceable">%lx</em><tt class="literal"> at 0x</tt><em class="replaceable">%lx</em></b>
</dt>
<dd>
<p>(P) The <tt class="literal">malloc</tt> package that comes with Perl had an internal failure.</p>
</dd>


<dt>
<b><tt class="literal">corrupted regexp pointers</tt></b>
</dt>
<dd>
<p>(P) The regular expression engine got confused by what the regular
expression compiler gave it.</p>
</dd>


<dt>
<b><tt class="literal">corrupted regexp program</tt></b>
</dt>
<dd>
<p>(P) The regular expression engine got passed a regexp program without
a valid magic number.</p>
</dd>


<dt>
<b><tt class="literal">Deep recursion on subroutine "</tt><em class="replaceable">%s</em><tt class="literal">"</tt></b>
</dt>
<dd>
<p>(W recursion) This subroutine has called itself (directly or
indirectly) 100 times more than it has returned.  This probably
indicates an infinite recursion, unless you're writing strange
benchmark programs, in which case it indicates something else.</p>
</dd>


<dt>
<b><tt class="literal">defined(@array) is deprecated</tt></b>
</dt>
<dd>
<p>(D deprecated) <tt class="literal">defined</tt> is not usually useful on arrays because it
checks for an undefined <em class="emphasis">scalar</em> value.  If you want to see if the
array is empty, just use <tt class="literal">if (@array) { # not empty }</tt>.</p>
</dd>


<dt>
<b><tt class="literal">defined(%hash) is deprecated</tt></b>
</dt>
<dd>
<p>(D deprecated) <tt class="literal">defined</tt> is not usually useful on hashes because it
checks for an undefined <em class="emphasis">scalar</em> value.  If you want to see if the
hash is empty, just use <tt class="literal">if (%hash) { # not empty }</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Delimiter for here document is too long</tt></b>
</dt>
<dd>
<p>(F) In a here document construct like <tt class="literal">&lt;&lt;FOO</tt>, the label
<tt class="literal">FOO</tt> is too long for Perl to handle.  You have to be seriously
twisted to write code that triggers this error.</p>
</dd>


<dt>
<b><tt class="literal">Did not produce a valid header</tt></b>
</dt>
<dd>
<p>See <tt class="literal">Server error</tt>.</p>
</dd>


<dt>
<b><tt class="literal">(Did you mean &amp;</tt><em class="replaceable">%s</em> <tt class="literal">instead?)</tt></b>
</dt>
<dd>
<p>(W) You probably referred to an imported subroutine <tt class="literal">&amp;FOO</tt> as <tt class="literal">$FOO</tt>
or some such.</p>
</dd>


<dt>
<b><tt class="literal">(Did you mean "local" instead of "our"?)</tt></b>
</dt>
<dd>
<p>(W misc) Remember that <tt class="literal">our</tt> does not localize the declared global
variable.  You have declared it again in the same lexical scope, which
seems superfluous.</p>
</dd>


<dt>
<b><tt class="literal">(Did you mean $ or @ instead of %?)</tt></b>
</dt>
<dd>
<p>(W) You probably said <tt class="literal">%hash{$key}</tt> when you meant <tt class="literal">$hash{$key}</tt> or
<tt class="literal">@hash{@keys}</tt>.  On the other hand, maybe you just meant <tt class="literal">%hash</tt> and
got carried away.</p>
</dd>


<dt>
<b><tt class="literal">Died</tt></b>
</dt>
<dd>
<p>(F) You passed <tt class="literal">die</tt> an empty string (the equivalent of <tt class="literal">die ""</tt>) or
you called it with no args and both <tt class="literal">$@</tt> and <tt class="literal">$_</tt> were empty.</p>
</dd>


<dt>
<b><tt class="literal">(Do you need to predeclare</tt> <em class="replaceable">%s</em><tt class="literal">?)</tt></b>
</dt>
<dd>
<p>(S) This is an educated guess made in conjunction with the message "<em class="replaceable">%s</em>
found where operator expected".  It often means a subroutine or module
name is being referenced that hasn't been declared yet.  This may be
because of ordering problems in your file or because of a missing
<tt class="literal">sub</tt>, <tt class="literal">package</tt>, <tt class="literal">require</tt>, or <tt class="literal">use</tt> statement.  If you're
referencing something that isn't defined yet, you don't actually have
to define the subroutine or package before the current location.  You
can use an empty <tt class="literal">sub foo;</tt> or <tt class="literal">package FOO;</tt> to enter a "forward"
declaration.</p>
</dd>


<dt>
<b><tt class="literal">Document contains no data</tt></b>
</dt>
<dd>
<p>See <tt class="literal">Server error</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Don't know how to handle magic of type '</tt><em class="replaceable">%s</em><tt class="literal">'</tt></b>
</dt>
<dd>
<p>(P) The internal handling of magical variables has been cursed.</p>
</dd>


<dt>
<b><tt class="literal">do_study: out of memory</tt></b>
</dt>
<dd>
<p>(P) This should have been caught by <tt class="literal">safemalloc</tt> instead.</p>
</dd>


<dt>
<b><tt class="literal">Duplicate free() ignored</tt></b>
</dt>
<dd>
<p>(S malloc) An internal routine called <tt class="literal">free</tt> on something that had already
been freed.</p>
</dd>


<dt>
<b><tt class="literal">elseif should be elsif</tt></b>
</dt>
<dd>
<p>(S) There is no keyword "<tt class="literal">elseif</tt>" in Perl because Larry thinks it's
ugly.  Your code will be interpreted as an attempt to call a method
named <tt class="literal">elseif</tt> for the class returned by the following block.  This is
unlikely to be what you want.</p>
</dd>


<dt>
<b><em class="replaceable">%s</em> <tt class="literal">failed--call queue aborted</tt></b>
</dt>
<dd>
<p>(F) An untrapped exception was raised while executing a <tt class="literal">CHECK</tt>,
<tt class="literal">INIT</tt>, or <tt class="literal">END</tt> subroutine.  Processing of the remainder of the
queue of such routines has been prematurely ended.</p>
</dd>


<dt>
<b><tt class="literal">entering effective</tt> <em class="replaceable">%s</em> <tt class="literal">failed</tt></b>
</dt>
<dd>
<p>(F) While under the <tt class="literal">use filetest</tt> pragma, switching the real and
effective UIDs or GIDs failed.</p>
</dd>


<dt>
<b><tt class="literal">Error converting file specification</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) This is an error peculiar to VMS.  Because Perl may have to deal with file
specifications in either VMS or Unix syntax, it converts them to a
single form when it must operate on them directly.  Either you've
passed an invalid file specification to Perl, or you've found a
case the conversion routines don't handle.  Drat.</p>
</dd>


<dt>
<b><em class="replaceable">%s</em><tt class="literal">: Eval-group in insecure regular expression</tt></b>
</dt>
<dd>
<p>(F) Perl detected tainted data when trying to compile a regular expression
that contains the <tt class="literal">(?{ ... })</tt> zero-width assertion, which is unsafe.</p>
</dd>


<dt>
<b><em class="replaceable">%s</em><tt class="literal">: Eval-group not allowed, use re 'eval'</tt></b>
</dt>
<dd>
<p>(F) A regular expression contained the <tt class="literal">(?{ ... })</tt> zero-width assertion,
but that construct is only allowed when the <tt class="literal">use re 'eval'</tt> pragma is
in effect.</p>
</dd>


<dt>
<b><em class="replaceable">%s</em><tt class="literal">: Eval-group not allowed at run time</tt></b>
</dt>
<dd>
<p>(F) Perl tried to compile a regular expression containing the
<tt class="literal">(?{ ... })</tt> zero-width assertion at run time,
as it would when the pattern contains interpolated values.  Since that
is a security risk, it is not allowed.  If you insist, you may still
do this by explicitly building the pattern from an interpolated string
at run time and using that in an <tt class="literal">eval</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Excessively long &lt;&gt; operator</tt></b>
</dt>
<dd>
<p>(F) The contents of a <tt class="literal">&lt;&gt;</tt> operator may not exceed the maximum
size of a Perl identifier.  If you're just trying to glob a long list
of filenames, try using the <tt class="literal">glob</tt> operator or putting the filenames into
a variable and globbing that.</p>
</dd>


<dt>
<b><tt class="literal">Execution of</tt> <em class="replaceable">%s</em> <tt class="literal">aborted due to compilation errors</tt></b>
</dt>
<dd>
<p>(F) The final summary message when a Perl compilation fails.</p>
</dd>


<dt>
<b><tt class="literal">Exiting eval via</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W exiting) You are exiting an <tt class="literal">eval</tt> by unconventional means, such
as a <tt class="literal">goto</tt> or a loop control statement.</p>
</dd>


<dt>
<b><tt class="literal">Exiting format via</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W exiting) You are exiting a <tt class="literal">format</tt> by unconventional means, such as
a <tt class="literal">goto</tt> or a loop control statement.</p>
</dd>


<dt>
<b><tt class="literal">Exiting pseudoblock via</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W exiting) You are exiting a rather special block construct (like a
sort block or subroutine) by unconventional means, such as a <tt class="literal">goto</tt> or
a loop control statement.</p>
</dd>


<dt>
<b><tt class="literal">Exiting subroutine via</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W exiting) You are exiting a subroutine by unconventional means, such as
a <tt class="literal">goto</tt> or a loop control statement.</p>
</dd>


<dt>
<b><tt class="literal">Exiting substitution via</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W exiting) You are exiting a substitution by unconventional means, such as
a <tt class="literal">return</tt>, a <tt class="literal">goto</tt>, or a loop control statement.</p>
</dd>


<dt>
<b><tt class="literal">Explicit blessing to '' (assuming package main)</tt></b>
</dt>
<dd>
<p>(W misc) You are blessing a reference to a zero-length string.  This has
the effect of blessing the reference into the package <tt class="literal">main</tt>.  This is
usually not what you want.  Consider providing a default target
package, such as <tt class="literal">bless($ref, $p || 'MyPackage')</tt>;</p>
</dd>


<dt>
<b><tt class="literal">false [] range "</tt><em class="replaceable">%s</em><tt class="literal">" in regexp</tt></b>
</dt>
<dd>
<p>(W regexp) A character class range must start and end at a literal
character, not another character class like <tt class="literal">\d</tt> or <tt class="literal">[:alpha:]</tt>.
The <tt class="literal">-</tt> in your false range is interpreted as a literal <tt class="literal">-</tt>.  Consider
quoting the <tt class="literal">-</tt> like this: <tt class="literal">\-</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Fatal VMS error at</tt> <em class="replaceable">%s</em><tt class="literal">, line</tt> <em class="replaceable">%d</em></b>
</dt>
<dd>
<p>(P) This is an error peculiar to VMS.  Something untoward happened in a VMS
system service or RTL routine; Perl's exit status should provide more
details.  The filename in <tt class="literal">at</tt><em class="replaceable">%s</em>
and the line number in <tt class="literal">line</tt><em class="replaceable">%d</em>
tell you which section of the Perl source code is distressed.</p>
</dd>


<dt>
<b><tt class="literal">fcntl is not implemented</tt></b>
</dt>
<dd>
<p>(F) Your machine apparently doesn't implement <tt class="literal">fcntl</tt>.  What is this, a
PDP-11 or something?</p>
</dd>


<dt>
<b><tt class="literal">Filehandle</tt> <em class="replaceable">%s</em> <tt class="literal">never opened</tt></b>
</dt>
<dd>
<p>(W unopened) An I/O operation was attempted on a filehandle that was
never initialized.  You need to do an <tt class="literal">open</tt> or a <tt class="literal">socket</tt> call, or
call a constructor from the <tt class="literal">FileHandle</tt> module.</p>
</dd>


<dt>
<b><tt class="literal">Filehandle</tt> <em class="replaceable">%s</em> <tt class="literal">opened only for input</tt></b>
</dt>
<dd>
<p>(W io) You tried to write on a read-only filehandle. If you intended
it to be a read-write filehandle, you needed to open it with <tt class="literal">+&lt;</tt>
or <tt class="literal">+&gt;</tt> or <tt class="literal">+&gt;&gt;</tt> instead of with <tt class="literal">&lt;</tt> or nothing.  If
you intended only to write the file, use <tt class="literal">&gt;</tt> or <tt class="literal">&gt;&gt;</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Filehandle</tt> <em class="replaceable">%s</em> <tt class="literal">opened only for output</tt></b>
</dt>
<dd>
<p>(W io) You tried to read from a filehandle opened only for writing.  If you
intended it to be a read/write filehandle, you needed to open
it with <tt class="literal">+&lt;</tt> or <tt class="literal">+&gt;</tt> or <tt class="literal">+&gt;&gt;</tt> instead of with <tt class="literal">&lt;</tt>
or nothing.  If you intended only to read from the file, use <tt class="literal">&lt;</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Final $ should be \$ or $name</tt></b>
</dt>
<dd>
<p>(F) You must now decide whether the final <tt class="literal">$</tt> in a string was meant
to be a literal dollar sign or was meant to introduce a variable name
that happens to be missing.  So you have to add either the backslash
or the name.</p>
</dd>


<dt>
<b><tt class="literal">Final @ should be \@ or @name</tt></b>
</dt>
<dd>
<p>(F) You must now decide whether the final <tt class="literal">@</tt> in a string was meant
to be a literal "at" sign or was meant to introduce a variable name
that happens to be missing.  So you have to add either the backslash
or the name.</p>
</dd>


<dt>
<b><tt class="literal">flock() on closed filehandle</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W closed) The filehandle you're attempting to <tt class="literal">flock</tt> got itself
closed some time before now.  Check your logic flow.  <tt class="literal">flock</tt>
operates on filehandles.  Are you attempting to call <tt class="literal">flock</tt> on a
dirhandle by the same name?</p>
</dd>


<dt>
<b><tt class="literal">Format</tt> <em class="replaceable">%s</em> <tt class="literal">redefined</tt></b>
</dt>
<dd>
<p>(W redefine) You redefined a format.  To suppress this warning, say:
<blockquote>
<pre class="programlisting">{
    no warnings;
    eval "format NAME =...";
}</pre>
</blockquote>
</p>
</dd>


<dt>
<b><tt class="literal">Format not terminated</tt></b>
</dt>
<dd>
<p>(F) A format must be terminated by a line with a solitary dot.  Perl got
to the end of your file without finding such a line.</p>
</dd>


<dt>
<b><tt class="literal">Found = in conditional, should be ==</tt></b>
</dt>
<dd>
<p>(W syntax) You said:
<blockquote>
<pre class="programlisting">if ($foo = 123)</pre>
</blockquote>

when you meant:
<blockquote>
<pre class="programlisting">if ($foo == 123)</pre>
</blockquote>

(or something like that).</p>
</dd>


<dt>
<b><tt class="literal">gdbm store returned</tt> <em class="replaceable">%d</em><tt class="literal">, errno</tt> <em class="replaceable">%d</em><tt class="literal">, key "</tt><em class="replaceable">%s</em><tt class="literal">"</tt></b>
</dt>
<dd>
<p>(S) A warning from the <tt class="literal">GDBM_File</tt> extension that a store failed.</p>
</dd>


<dt>
<b><tt class="literal">gethostent not implemented</tt></b>
</dt>
<dd>
<p>(F) Your C library apparently doesn't implement <tt class="literal">gethostent</tt>,
probably because if it did, it'd feel morally obligated to return
every hostname on the Internet.</p>
</dd>


<dt>
<b><tt class="literal">get</tt><em class="replaceable">%s</em><tt class="literal">name() on closed socket</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W closed) You tried to get a socket or peer socket name on a closed socket.
Did you forget to check the return value of your <tt class="literal">socket</tt> call?</p>
</dd>


<dt>
<b><tt class="literal">getpwnam returned invalid UIC %#o for user "</tt><em class="replaceable">%s</em><tt class="literal">"</tt></b>
</dt>
<dd>
<p>(S) A warning peculiar to VMS.  The call to <tt class="literal">sys$getuai</tt> underlying the
<tt class="literal">getpwnam</tt> operator returned an invalid UIC.</p>
</dd>


<dt>
<b><tt class="literal">getsockopt() on closed socket</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W closed) You tried to get a socket option on a closed socket.
Did you forget to check the return value of your <tt class="literal">socket</tt> call?</p>
</dd>


<dt>
<b><tt class="literal">glob failed (</tt><em class="replaceable">%s</em><tt class="literal">)</tt></b>
</dt>
<dd>
<p>(W glob) Something went wrong with the external program(s) used for
<tt class="literal">glob</tt> and <tt class="literal">&lt;*.c&gt;</tt>.  Usually,
this means that you supplied a <tt class="literal">glob</tt> pattern that
caused the external program to fail and exit with a nonzero status.
If the message indicates that the abnormal exit resulted in a core
dump, this may also mean that your <em class="emphasis">csh</em> (C shell)
is broken.  If so, you should change all of the
<em class="emphasis">csh</em>-related variables in
<em class="emphasis">config.sh</em>: If you have <em class="emphasis">tcsh</em>,
make the variables refer to it as if it were csh (e.g.,
<tt class="literal">full_csh='/usr/bin/tcsh'</tt>); otherwise, make them all
empty (except that <tt class="literal">d_csh</tt> should be
<tt class="literal">'undef'</tt>) so that Perl will think
<em class="emphasis">csh</em> is missing.  In either case, after editing
<em class="emphasis">config.sh</em>, run <tt class="command">./Configure -S</tt>
and rebuild Perl.</p>
</dd>


<dt>
<b><tt class="literal">Glob not terminated</tt></b>
</dt>
<dd>
<p>(F) The lexer saw a left angle bracket in a place where it was expecting
a term, so it's looking for the corresponding right angle bracket and not
finding it.  Chances are you left some needed parentheses out earlier in
the line, and you really meant a <tt class="literal">&lt;</tt> symbol.</p>
</dd>


<dt>
<b><tt class="literal">Global symbol "</tt><em class="replaceable">%s</em><tt class="literal">" requires explicit package name</tt></b>
</dt>
<dd>
<p>(F) You've said <tt class="literal">use strict vars</tt>, which indicates that all variables
must either be lexically scoped (using <tt class="literal">my</tt>), declared beforehand using
<tt class="literal">our</tt>, or explicitly qualified to say which package the global variable
is in (using <tt class="literal">::</tt>).</p>
</dd>


<dt>
<b><tt class="literal">Got an error from DosAllocMem</tt></b>
</dt>
<dd>
<p>(P) This is an error peculiar to OS/2.  Most probably you're using an obsolete
version of Perl, so this error should not happen anyway.</p>
</dd>


<dt>
<b><tt class="literal">goto must have label</tt></b>
</dt>
<dd>
<p>(F) Unlike with <tt class="literal">next</tt> or <tt class="literal">last</tt>, you're not allowed to <tt class="literal">goto</tt> an
unspecified destination.</p>
</dd>


<dt>
<b><tt class="literal">Had to create</tt> <em class="replaceable">%s</em> <tt class="literal">unexpectedly</tt></b>
</dt>
<dd>
<p>(S internal) A routine asked for a symbol from a symbol table that
ought to have existed already, but for some reason it didn't and had
to be created on an emergency basis to prevent a core dump.</p>
</dd>


<dt>
<b><tt class="literal">Hash %</tt><em class="replaceable">%s</em> <tt class="literal">missing the % in argument</tt> <em class="replaceable">%d</em><tt class="literal"> of</tt> <em class="replaceable">%s</em><tt class="literal">()</tt></b>
</dt>
<dd>
<p>(D deprecated) Really old Perl let you omit the <tt class="literal">%</tt> on hash names in
some spots.  This is now heavily deprecated.</p>
</dd>


<dt>
<b><tt class="literal">Hexadecimal number &gt; 0xffffffff non-portable</tt></b>
</dt>
<dd>
<p>(W portable) The hexadecimal number you specified is larger than
<tt class="literal">2**32-1</tt> (4,294,967,295) and therefore nonportable between systems.</p>
</dd>


<dt>
<b><tt class="literal">Identifier too long</tt></b>
</dt>
<dd>
<p>(F) Perl limits identifiers (names for variables, functions, etc.) to
about 250 characters for simple names, and somewhat more for compound
names (like <tt class="literal">$A::B</tt>).  You've exceeded Perl's limits.  Future
versions of Perl are likely to eliminate these arbitrary limitations.</p>
</dd>


<dt>
<b><tt class="literal">Ill-formed CRTL environ value "</tt><em class="replaceable">%s</em><tt class="literal">"</tt></b>
</dt>
<dd>
<p>(W internal) This is a warning peculiar to VMS.  Perl tried to read the CRTL's
internal environ array and encountered an element without the <tt class="literal">=</tt>
delimiter used to separate keys from values.  The element is ignored.</p>
</dd>


<dt>
<b><tt class="literal">Ill-formed message in prime_env_iter: |</tt><em class="replaceable">%s</em><tt class="literal">|</tt></b>
</dt>
<dd>
<p>(W internal) This is a warning peculiar to VMS.  Perl tried to read a logical
name or CLI symbol definition when preparing to iterate over <tt class="literal">%ENV</tt>
and didn't see the expected delimiter between key and value, so the
line was ignored.</p>
</dd>


<dt>
<b><tt class="literal">Illegal character</tt> <em class="replaceable">%s</em> <tt class="literal">(carriage return)</tt></b>
</dt>
<dd>
<p>(F) Perl normally treats carriage returns in the program text as it
would any other whitespace, which means you should never see this
error when Perl was built using standard options.  For some reason,
your version of Perl appears to have been built without this support. Talk
to your Perl administrator.</p>
</dd>


<dt>
<b><tt class="literal">Illegal division by zero</tt></b>
</dt>
<dd>
<p>(F) You tried to divide a number by 0.  Either something was wrong in
your logic, or you need to put a conditional in to guard against
meaningless input.</p>
</dd>


<dt>
<b><tt class="literal">Illegal modulus zero</tt></b>
</dt>
<dd>
<p>(F) You tried to divide a number by 0 to get the remainder.  Most numbers
don't take to this kindly.</p>
</dd>


<dt>
<b><tt class="literal">Illegal binary digit</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) You used a digit other than 0 or 1 in a binary number.</p>
</dd>


<dt>
<b><tt class="literal">Illegal octal digit</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) You used an 8 or 9 in a octal number.</p>
</dd>


<dt>
<b><tt class="literal">Illegal binary digit</tt> <em class="replaceable">%s</em> <tt class="literal">ignored</tt></b>
</dt>
<dd>
<p>(W digit) You may have tried to use a digit other than 0 or 1 in a binary number. Interpretation of the binary number stopped before the offending digit.</p>
</dd>


<dt>
<b><tt class="literal">Illegal octal digit</tt> <em class="replaceable">%s</em> <tt class="literal">ignored</tt></b>
</dt>
<dd>
<p>(W digit) You may have tried to use an 8 or 9 in a octal number. Interpretation of the octal number stopped before the 8 or 9.</p>
</dd>


<dt>
<b><tt class="literal">Illegal hexadecimal digit</tt> <em class="replaceable">%s</em> <tt class="literal">ignored</tt></b>
</dt>
<dd>
<p>(W digit) You may have tried to use a character other than <tt class="literal">0</tt>
through <tt class="literal">9</tt>, <tt class="literal">A</tt>
through <tt class="literal">F</tt>, or <tt class="literal">a</tt> through
<tt class="literal"></tt>f in a hexadecimal number.  Interpretation of the
hexadecimal number stopped before the illegal character.</p>
</dd>


<dt>
<b><tt class="literal">Illegal number of bits in vec</tt></b>
</dt>
<dd>
<p>(F) The number of bits in <tt class="literal">vec</tt> (the third argument) must be a power of
two from 1 to 32 (or 64, if your platform supports that).</p>
</dd>


<dt>
<b><tt class="literal">Illegal switch in PERL5OPT:</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(X) The <tt class="literal">PERL5OPT</tt> environment variable may only be used to set the
following switches: <span class="option">-[DIMUdmw]</span>.</p>
</dd>


<dt>
<b><tt class="literal">In string, @</tt><em class="replaceable">%s</em> <tt class="literal">now must be written as \@</tt><em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) It used to be that Perl would try to guess whether you wanted an
array interpolated or a literal <tt class="literal">@</tt>.  It did this when the string was
first used at run time.  Now strings are parsed at compile time, and
ambiguous instances of <tt class="literal">@</tt> must be disambiguated, either by
prepending a backslash to indicate a literal, or by declaring (or
using) the array within the program before the string (lexically).
(Someday it will simply assume that an unbackslashed <tt class="literal">@</tt> interpolates
an array.)</p>
</dd>


<dt>
<b><tt class="literal">Insecure dependency in</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) You tried to do something that the tainting mechanism didn't like. The tainting mechanism is turned on when you're running setuid or setgid,
or when you specify <span class="option">-T</span> to turn it on explicitly.  The tainting mechanism
labels all data that's derived directly or indirectly from the user,
who is considered to be unworthy of your trust.  If any such data is
used in a "dangerous" operation, you get this error.</p>
</dd>


<dt>
<b><tt class="literal">Insecure directory in</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) You can't use <tt class="literal">system</tt>, <tt class="literal">exec</tt>, or a piped open in a setuid or setgid
script if <tt class="literal">$ENV{PATH}</tt> contains a directory that is writable by the world.</p>
</dd>


<dt>
<b><tt class="literal">Insecure $ENV{</tt><em class="replaceable">%s</em><tt class="literal">} while running</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) You can't use <tt class="literal">system</tt>, <tt class="literal">exec</tt>, or a piped open in a setuid or
setgid script if any of <tt class="literal">$ENV{PATH}</tt>, <tt class="literal">$ENV{IFS}</tt>, <tt class="literal">$ENV{CDPATH}</tt>,
<tt class="literal">$ENV{ENV}</tt>, or <tt class="literal">$ENV{BASH_ENV}</tt> are derived from data supplied (or
potentially supplied) by the user.  The script must set the path to a
known value, using trustworthy data.</p>
</dd>


<dt>
<b><tt class="literal">Integer overflow in</tt> <em class="replaceable">%s</em> <tt class="literal">number</tt></b>
</dt>
<dd>
<p>(W overflow) The hexadecimal, octal, or binary number you have specified either
as a literal or as an argument to <tt class="literal">hex</tt> or <tt class="literal">oct</tt> is too big for your
architecture and has been converted to a floating-point number.  On
32-bit machines, the largest hex, octal, or binary number
representable without overflow is 0xFFFFFFFF, 037777777777, or
0b11111111111111111111111111111111 respectively.  Note that Perl
transparently promotes all numbers to a floating-point representation
internally--subject to loss of precision errors in subsequent
operations.</p>
</dd>


<dt>
<b><tt class="literal">Internal inconsistency in tracking vforks</tt></b>
</dt>
<dd>
<p>(S) This is a warning peculiar to VMS.  Perl keeps track of the number of
times you've called <tt class="literal">fork</tt> and <tt class="literal">exec</tt>, to determine whether the
current call to <tt class="literal">exec</tt> should affect the current script or a
subprocess (see "exec LIST" in <em class="emphasis">perlvms</em>(1)).  Somehow, this count
has become scrambled, so Perl is making a guess and treating this
<tt class="literal">exec</tt> as a request to terminate the Perl script and execute the
specified command.</p>
</dd>


<dt>
<b><tt class="literal">internal disaster in regexp</tt></b>
</dt>
<dd>
<p>(P) Something went badly wrong in the regular expression parser.</p>
</dd>


<dt>
<b><tt class="literal">internal urp in regexp at /</tt><em class="replaceable">%s</em><tt class="literal">/</tt></b>
</dt>
<dd>
<p>(P) Something went badly awry in the regular expression parser.</p>
</dd>


<dt>
<b><tt class="literal">Invalid</tt> <em class="replaceable">%s</em> <tt class="literal">attribute:</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) The indicated attribute for a subroutine or variable was not recognized
by Perl or by a user-supplied handler.</p>
</dd>


<dt>
<b><tt class="literal">Invalid</tt> <em class="replaceable">%s</em> <tt class="literal">attributes:</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) The indicated attributes for a subroutine or variable were not recognized
by Perl or by a user-supplied handler.</p>
</dd>


<dt>
<b><tt class="literal">invalid [] range "</tt><em class="replaceable">%s</em><tt class="literal">" in regexp</tt></b>
</dt>
<dd>
<p>(F) The range specified in a character class had a minimum character
greater than the maximum character.</p>
</dd>


<dt>
<b><tt class="literal">Invalid conversion in</tt> <em class="replaceable">%s</em><tt class="literal">: "</tt><em class="replaceable">%s</em><tt class="literal">"</tt></b>
</dt>
<dd>
<p>(W printf) Perl does not understand the given format conversion.</p>
</dd>


<dt>
<b><tt class="literal">Invalid separator character</tt> <em class="replaceable">%s</em> <tt class="literal">in attribute list</tt></b>
</dt>
<dd>
<p>(F) Something other than a colon or whitespace was seen between the
elements of an attribute list.  If the previous attribute
had a parenthesized parameter list, perhaps that list was terminated
too soon.</p>
</dd>


<dt>
<b><tt class="literal">Invalid type in pack: '</tt><em class="replaceable">%s</em><tt class="literal">'</tt></b>
</dt>
<dd>
<p>(F) The given character is not a valid pack type.</p>

<p>(W pack) The given character is not a valid pack type, but it used to be silently ignored.</p>
</dd>


<dt>
<b><tt class="literal">Invalid type in unpack: '</tt><em class="replaceable">%s</em><tt class="literal">'</tt></b>
</dt>
<dd>
<p>(F) The given character is not a valid unpack type.</p>

<p>(W unpack) The given character is not a valid unpack type, but it used to
be silently ignored.</p>
</dd>


<dt>
<b><tt class="literal">ioctl is not implemented</tt></b>
</dt>
<dd>
<p>(F) Your machine apparently doesn't implement <tt class="literal">ioctl</tt>, which is pretty
strange for a machine that supports C.</p>
</dd>


<dt>
<b><tt class="literal">junk on end of regexp</tt></b>
</dt>
<dd>
<p>(P) The regular expression parser is confused.</p>
</dd>


<dt>
<b><tt class="literal">Label not found for "last</tt> <em class="replaceable">%s</em><tt class="literal">"</tt></b>
</dt>
<dd>
<p>(F) You named a loop to break out of, but you're not currently in a
loop of that name, not even if you count where you were called from.</p>
</dd>


<dt>
<b><tt class="literal">Label not found for "next</tt> <em class="replaceable">%s</em><tt class="literal">"</tt></b>
</dt>
<dd>
<p>(F) You named a loop to continue, but you're not currently in a loop of
that name, not even if you count where you were called from.</p>
</dd>


<dt>
<b><tt class="literal">Label not found for "redo</tt> <em class="replaceable">%s</em><tt class="literal">"</tt></b>
</dt>
<dd>
<p>(F) You named a loop to restart, but you're not currently in a loop of
that name, not even if you count where you were called from.</p>
</dd>


<dt>
<b><tt class="literal">leaving effective</tt> <em class="replaceable">%s</em> <tt class="literal">failed</tt></b>
</dt>
<dd>
<p>(F) While under the <tt class="literal">use filetest</tt> pragma, switching the real and
effective UIDs or GIDs failed.</p>
</dd>


<dt>
<b><tt class="literal">listen() on closed socket</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W closed) You tried to do a listen on a closed socket.  Did you
forget to check the return value of your <tt class="literal">socket</tt> call?</p>
</dd>


<dt>
<b><tt class="literal">Lvalue subs returning</tt> <em class="replaceable">%s</em> <tt class="literal">not implemented yet</tt></b>
</dt>
<dd>
<p>(F) Due to limitations in the current implementation, array and hash
values cannot be returned in subroutines used in lvalue context.</p>
</dd>


<dt>
<b><tt class="literal">Malformed PERLLIB_PREFIX</tt></b>
</dt>
<dd>
<p>(F) This is an error peculiar to OS/2.  <tt class="literal">PERLLIB_PREFIX</tt> should be of the form:
<blockquote>
<pre class="programlisting">
<em class="replaceable">prefix1</em>;<em class="replaceable">prefix2</em>
</pre>
</blockquote>

or:
<blockquote>
<pre class="programlisting">
<em class="replaceable">prefix1 prefix2</em>
</pre>
</blockquote>

with nonempty <em class="replaceable">prefix1</em> and <em class="replaceable">prefix2</em>.  If <em class="replaceable">prefix1</em> is indeed a
prefix of a built-in library search path, <em class="replaceable">prefix2</em> is substituted.
The error may appear if components are not found, or are too long.
See <tt class="literal">PERLLIB_PREFIX</tt> in the <em class="emphasis">README.os2</em> file bundled with the Perl
distribution.</p>
</dd>


<dt>
<b><tt class="literal">Method for operation</tt> <em class="replaceable">%s</em> <tt class="literal">not found in package</tt> <em class="replaceable">%s</em> <tt class="literal">during blessing</tt></b>
</dt>
<dd>
<p>(F) An attempt was made to specify an entry in an overloading table that
doesn't resolve to a valid subroutine.</p>
</dd>


<dt>
<b><tt class="literal">Method</tt> <em class="replaceable">%s</em> <tt class="literal">not permitted</tt></b>
</dt>
<dd>
<p>See <tt class="literal">Server error</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Might be a runaway multi-line</tt> <em class="replaceable">%s</em><tt class="literal"> string starting on line</tt> <em class="replaceable">%d</em></b>
</dt>
<dd>
<p>(S) An advisory indicating that the previous error may have been caused
by a missing delimiter on a string or pattern, because the string eventually
ended earlier on the current line.</p>
</dd>


<dt>
<b><tt class="literal">Misplaced _ in number</tt></b>
</dt>
<dd>
<p>(W syntax) An underline in a decimal constant wasn't at a 3-digit boundary.</p>
</dd>


<dt>
<b><tt class="literal">Missing $ on loop variable</tt></b>
</dt>
<dd>
<p>(F) Apparently, you've been programming in <em class="emphasis">csh</em> too much.  Variables
are always mentioned with the <tt class="literal">$</tt> in Perl, unlike in the shells, where
it can vary from one line to the next.</p>
</dd>


<dt>
<b><tt class="literal">Missing</tt> <em class="replaceable">%s</em><tt class="literal">brace</tt><em class="replaceable">%s</em> <tt class="literal">on \N{}</tt></b>
</dt>
<dd>
<p>(F) You used the wrong syntax of character name literal <tt class="literal">\N{charname}</tt> within
double-quotish context.</p>
</dd>


<dt>
<b><tt class="literal">Missing comma after first argument to</tt> <em class="replaceable">%s</em> <tt class="literal">function</tt></b>
</dt>
<dd>
<p>(F) While certain functions allow you to specify a filehandle or an
"indirect object" before the argument list, this ain't one of them.</p>
</dd>


<dt>
<b><tt class="literal">Missing command in piped open</tt></b>
</dt>
<dd>
<p>(W pipe) You used the <tt class="literal">open(FH, "| command")</tt> or <tt class="literal">open(FH, "command |")</tt>
construction, but the command was missing or blank.</p>
</dd>


<dt>
<b><tt class="literal">(Missing operator before</tt> <em class="replaceable">%s</em><tt class="literal">?)</tt></b>
</dt>
<dd>
<p>(S) This is an educated guess made in conjunction with the message "<em class="replaceable">%s</em>
found where operator expected".  Often the missing operator is a comma.</p>
</dd>


<dt>
<b><tt class="literal">Missing right curly or square bracket</tt></b>
</dt>
<dd>
<p>(F) The lexer counted more opening curly or square brackets than
closing ones.  As a general rule, you'll find it's missing near the place
you were last editing.</p>
</dd>


<dt>
<b><tt class="literal">Modification of a read-only value attempted</tt></b>
</dt>
<dd>
<p>(F) You tried, directly or indirectly, to change the value of a
constant.  You didn't, of course, try <tt class="literal">2 = 1</tt>, because the compiler
catches that.  But an easy way to do the same thing is:
<blockquote>
<pre class="programlisting">sub mod { $_[0] = 1 }
mod(2);</pre>
</blockquote>

Another way is to assign to a <tt class="literal">substr</tt> that's off the end of the string.</p>
</dd>


<dt>
<b><tt class="literal">Modification of non-creatable array value attempted, subscript <em class="replaceable">%d</em></tt></b>
</dt>
<dd>
<p>(F) You tried to make an array value spring into existence, and the
subscript was probably negative, even counting from end of the array
backward.</p>
</dd>


<dt>
<b><tt class="literal">Modification of non-creatable hash value attempted, subscript "</tt><em class="replaceable">%s</em><tt class="literal">"</tt></b>
</dt>
<dd>
<p>(P) You tried to make a hash value spring into existence, and it couldn't
be created for some peculiar reason.</p>
</dd>


<dt>
<b><tt class="literal">Module name must be constant</tt></b>
</dt>
<dd>
<p>(F) Only a bare module name is allowed as the first argument to a <tt class="literal">use</tt>.</p>
</dd>


<dt>
<b><tt class="literal">msg</tt><em class="replaceable">%s</em> <tt class="literal">not implemented</tt></b>
</dt>
<dd>
<p>(F) You don't have System V message IPC on your system.</p>
</dd>


<dt>
<b><tt class="literal">Multidimensional syntax</tt> <em class="replaceable">%s</em> <tt class="literal">not supported</tt></b>
</dt>
<dd>
<p>(W syntax) Multidimensional arrays aren't written like <tt class="literal">$foo[1,2,3]</tt>. They're written like <tt class="literal">$foo[1][2][3]</tt>, as in C.</p>
</dd>


<dt>
<b><tt class="literal">Missing name in "my sub"</tt></b>
</dt>
<dd>
<p>(F) The reserved syntax for lexically scoped subroutines requires that they
have a name with which they can be found.</p>
</dd>


<dt>
<b><tt class="literal">Name "</tt><em class="replaceable">%s</em><tt class="literal">::</tt><em class="replaceable">%s</em><tt class="literal">" used only once: possible typo</tt></b>
</dt>
<dd>
<p>(W once) Typographical errors often show up as unique variable names. If you had a good reason for having a unique name, then just mention
it again somehow to suppress the message.  The <tt class="literal">our</tt> declaration is
provided for this purpose.</p>
</dd>


<dt>
<b><tt class="literal">Negative length</tt></b>
</dt>
<dd>
<p>(F) You tried to do a <tt class="literal">read</tt>/<tt class="literal">write</tt>/<tt class="literal">send</tt>/<tt class="literal">recv</tt> operation with
a buffer length that is less than 0.  This is difficult to imagine.</p>
</dd>


<dt>
<b><tt class="literal">nested *?+ in regexp</tt></b>
</dt>
<dd>
<p>(F) You can't quantify a quantifier without intervening parentheses.  So
things like <tt class="literal">**</tt> or <tt class="literal">+*</tt> or <tt class="literal">?*</tt> are illegal.</p>

<p>Note, however, that the minimal matching quantifiers, <tt class="literal">*?</tt>, <tt class="literal">+?</tt>,
and <tt class="literal">??</tt> appear to be nested quantifiers, but aren't.</p>
</dd>


<dt>
<b><tt class="literal">No #! line</tt></b>
</dt>
<dd>
<p>(F) The setuid emulator requires that scripts have a well-formed <tt class="literal">#!</tt> line
even on machines that don't support the <tt class="literal">#!</tt> construct.</p>
</dd>


<dt>
<b><tt class="literal">No</tt> <em class="replaceable">%s</em> <tt class="literal">allowed while running setuid</tt></b>
</dt>
<dd>
<p>(F) Certain operations are deemed to be too insecure for a setuid or setgid
script to even attempt.  Generally speaking, there will be
another way to do what you want that is, if not secure, at least securable.</p>
</dd>


<dt>
<b><tt class="literal">No -e allowed in setuid scripts</tt></b>
</dt>
<dd>
<p>(F) A setuid script can't be specified by the user.</p>
</dd>


<dt>
<b><tt class="literal">No</tt> <em class="replaceable">%s</em> <tt class="literal">specified for -</tt><em class="replaceable">%c</em></b>
</dt>
<dd>
<p>(F) The indicated command-line switch needs a mandatory argument, but
you haven't specified one.</p>
</dd>


<dt>
<b><tt class="literal">No comma allowed after</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) A list operator that has a filehandle or "indirect object" is not
allowed to have a comma between that and the following
arguments.  Otherwise, it would be interpreted as just another argument.</p>

<p>One obscure situation where this message occurs is when you
expect a constant to be imported into your namespace with <tt class="literal">use</tt> or
<tt class="literal">import</tt>, but no such importing took place (say, because your
operating system doesn't support that particular constant). You should
have used an explicit import list for the constants you expect to see. An explicit import list would probably have caught this error earlier.
Or maybe there's just a typo in the name of the constant.</p>
</dd>


<dt>
<b><tt class="literal">No command into which to pipe on command line</tt></b>
</dt>
<dd>
<p>(F) This is an error peculiar to VMS.  Perl handles its own command-line
redirection and found a <tt class="literal">|</tt> at the end of the command line, so it
doesn't know where you want to pipe the output from this command.</p>
</dd>


<dt>
<b><tt class="literal">No DB::DB routine defined</tt></b>
</dt>
<dd>
<p>(F) The currently executing code was compiled with the <span class="option">-d</span> switch,
but for some reason the <em class="emphasis">perl5db.pl</em> file (or some facsimile thereof)
didn't define a routine to be called at the beginning of each
statement.  Which is odd, because the file should have been required
automatically and should have blown up the require if it didn't parse
right.</p>
</dd>


<dt>
<b><tt class="literal">No dbm on this machine</tt></b>
</dt>
<dd>
<p>(P) This is counted as an internal error; every machine should
supply a DBM nowadays because Perl comes with SDBM.</p>
</dd>


<dt>
<b><tt class="literal">No DBsub routine</tt></b>
</dt>
<dd>
<p>(F) The currently executing code was compiled with the <span class="option">-d</span> switch,
but for some reason the <em class="emphasis">perl5db.pl</em> file (or some facsimile thereof)
didn't define a <tt class="literal">DB::sub</tt> routine to be called at the beginning of each
ordinary subroutine call.</p>
</dd>


<dt>
<b><tt class="literal">No error file after 2&gt; or 2&gt;&gt; on command line</tt></b>
</dt>
<dd>
<p>(F) This is an error peculiar to VMS.  Perl handles its own command-line redirection,
and found a <tt class="literal">2&gt;</tt> or a <tt class="literal">2&gt;&gt;</tt> on the command line, but it can't find
the name of the file to which to write data destined for <tt class="literal">STDERR</tt>.</p>
</dd>


<dt>
<b><tt class="literal">No input file after &lt; on command line</tt></b>
</dt>
<dd>
<p>(F) This is an error peculiar to VMS.  Perl handles its own command-line redirection
and found a <tt class="literal">&lt;</tt> on the command line, but it can't find the name of the file
from which to read data for <tt class="literal">STDIN</tt>.</p>
</dd>


<dt>
<b><tt class="literal">No output file after &gt; on command line</tt></b>
</dt>
<dd>
<p>(F) This is an error peculiar to VMS.  Perl handles its own command-line redirection
and found a lone <tt class="literal">&gt;</tt> at the end of the command line, but it doesn't know
where you wanted to redirect <tt class="literal">STDOUT</tt>.</p>
</dd>


<dt>
<b><tt class="literal">No output file after &gt; or &gt;&gt; on command line</tt></b>
</dt>
<dd>
<p>(F) This is an error peculiar to VMS.  Perl handles its own command-line
redirection and found a <tt class="literal">&gt;</tt> or a <tt class="literal">&gt;&gt;</tt> on the command
line, but it can't find the name of the file to which to write data
destined for <tt class="literal">STDOUT</tt>.</p>
</dd>


<dt>
<b><tt class="literal">No package name allowed for variable</tt> <em class="replaceable">%s</em> <tt class="literal">in "our"</tt></b>
</dt>
<dd>
<p>(F) Fully qualified variable names are not allowed in <tt class="literal">our</tt>
declarations, because they don't make much sense under existing
semantics.  Such syntax is reserved for future extensions.</p>
</dd>


<dt>
<b><tt class="literal">No Perl script found in input</tt></b>
</dt>
<dd>
<p>(F) You called <tt class="command">perl -x</tt>, but no line was found in the file beginning
with <tt class="literal">#!</tt> and containing the word "<tt class="literal">perl</tt>".</p>
</dd>


<dt>
<b><tt class="literal">No setregid available</tt></b>
</dt>
<dd>
<p>(F) <em class="emphasis">Configure</em> didn't find anything resembling the <tt class="literal">setregid</tt> call for
your system.</p>
</dd>


<dt>
<b><tt class="literal">No setreuid available</tt></b>
</dt>
<dd>
<p>(F) <em class="emphasis">Configure</em> didn't find anything resembling the <tt class="literal">setreuid</tt> call for
your system.</p>
</dd>


<dt>
<b><tt class="literal">No space allowed after -</tt><em class="replaceable">%c</em></b>
</dt>
<dd>
<p>(F) The argument to the indicated command-line switch must follow immediately
after the switch, without intervening spaces.</p>
</dd>


<dt>
<b><tt class="literal">No such pseudohash field "</tt><em class="replaceable">%s</em><tt class="literal">"</tt></b>
</dt>
<dd>
<p>(F) You tried to access an array as a hash, but the field name used is
not defined.  The hash at index 0 should map all valid field names to
array indices for that to work.</p>
</dd>


<dt>
<b><tt class="literal">No such pseudohash field "</tt><em class="replaceable">%s</em><tt class="literal">" in variable</tt> <em class="replaceable">%s</em> <tt class="literal">of type</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) You tried to access a field of a typed variable, but the type
does not know about the field name.  The field names are looked up in
the <tt class="literal">%FIELDS</tt> hash in the type package at compile time.  The <tt class="literal">%FIELDS</tt> hash
is usually set up with the <tt class="literal">fields</tt> pragma.</p>
</dd>


<dt>
<b><tt class="literal">No such pipe open</tt></b>
</dt>
<dd>
<p>(P) This is an error peculiar to VMS.  The internal routine <tt class="literal">my_pclose</tt> tried to
close a pipe that hadn't been opened.  This should have been caught earlier as
an attempt to close an unopened filehandle.</p>
</dd>


<dt>
<b><tt class="literal">No such signal: SIG</tt><em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W signal) The signal name you specified as a subscript to <tt class="literal">%SIG</tt> was not recognized.  Say <tt class="command">kill -l</tt> in your shell to see the valid
signal names on your system.</p>
</dd>


<dt>
<b><tt class="literal">no UTC offset information; assuming local time is UTC</tt></b>
</dt>
<dd>
<p>(S) This is a warning peculiar to VMS.  Perl was unable to find the local
time zone offset, so it assumes that the local system time and the UTC
are equivalent.  If they're not, define the logical name <tt class="literal">SYS$TIMEZONE_DIFFERENTIAL</tt>
to translate to the number of seconds that need to be added to UTC to
get local time.</p>
</dd>


<dt>
<b><tt class="literal">Not a CODE reference</tt></b>
</dt>
<dd>
<p>(F) Perl was trying to evaluate a reference to a code value (that is, a
subroutine) but found a reference to something else instead.  You can
use the <tt class="literal">ref</tt> function to find out what kind of ref it really was.</p>
</dd>


<dt>
<b><tt class="literal">Not a format reference</tt></b>
</dt>
<dd>
<p>(F) We're not sure how you managed to generate a reference to an anonymous
format, but this message indicates that you did and that it didn't exist.</p>
</dd>


<dt>
<b><tt class="literal">Not a GLOB reference</tt></b>
</dt>
<dd>
<p>(F) Perl was trying to evaluate a reference to a "typeglob" (that is,
a symbol table entry that looks like <tt class="literal">*foo</tt>) but found a reference to
something else instead.  You can use the <tt class="literal">ref</tt> function to find out
what kind of ref it really was.</p>
</dd>


<dt>
<b><tt class="literal">Not a HASH reference</tt></b>
</dt>
<dd>
<p>(F) Perl was trying to evaluate a reference to a hash value but
found a reference to something else instead.  You can use the <tt class="literal">ref</tt>
function to find out what kind of ref it really was.</p>
</dd>


<dt>
<b><tt class="literal">Not a perl script</tt></b>
</dt>
<dd>
<p>(F) The setuid emulator requires that scripts have a well-formed <tt class="literal">#!</tt> line
even on machines that don't support the <tt class="literal">#!</tt> construct.  The line must
mention "<tt class="literal">perl</tt>".</p>
</dd>


<dt>
<b><tt class="literal">Not a SCALAR reference</tt></b>
</dt>
<dd>
<p>(F) Perl was trying to evaluate a reference to a scalar value but
found a reference to something else instead.  You can use the <tt class="literal">ref</tt>
function to find out what kind of ref it really was.</p>
</dd>


<dt>
<b><tt class="literal">Not a subroutine reference</tt></b>
</dt>
<dd>
<p>(F) Perl was trying to evaluate a reference to a code value (that is, a
subroutine) but found a reference to something else instead.  You can
use the <tt class="literal">ref</tt> function to find out what kind of ref it really was.</p>
</dd>


<dt>
<b><tt class="literal">Not a subroutine reference in overload table</tt></b>
</dt>
<dd>
<p>(F) An attempt was made to specify an entry in an overloading table that
doesn't somehow point to a valid subroutine.</p>
</dd>


<dt>
<b><tt class="literal">Not an ARRAY reference</tt></b>
</dt>
<dd>
<p>(F) Perl was trying to evaluate a reference to an array value but
found a reference to something else instead.  You can use the <tt class="literal">ref</tt>
function to find out what kind of ref it really was.</p>
</dd>


<dt>
<b><tt class="literal">Not enough arguments for</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) The function requires more arguments than you specified.</p>
</dd>


<dt>
<b><tt class="literal">Not enough format arguments</tt></b>
</dt>
<dd>
<p>(W syntax) A format specified more picture fields than the next line
supplied.</p>
</dd>


<dt>
<b><tt class="literal">Null filename used</tt></b>
</dt>
<dd>
<p>(F) You can't require the null filename, especially because on many machines
that means the current directory!</p>
</dd>


<dt>
<b><tt class="literal">Null picture in formline</tt></b>
</dt>
<dd>
<p>(F) The first argument to <tt class="literal">formline</tt> must be a valid format picture
specification.  The argument was found to be empty, which probably means you
supplied it an uninitialized value.</p>
</dd>


<dt>
<b><tt class="literal">NULL OP IN RUN</tt></b>
</dt>
<dd>
<p>(P debugging) Some internal routine called <tt class="literal">run</tt> with a null opcode pointer.</p>
</dd>


<dt>
<b><tt class="literal">Null realloc</tt></b>
</dt>
<dd>
<p>(P) An attempt was made to realloc NULL.</p>
</dd>


<dt>
<b><tt class="literal">NULL regexp argument</tt></b>
</dt>
<dd>
<p>(P) The internal pattern-matching routines blew it big time.</p>
</dd>


<dt>
<b><tt class="literal">NULL regexp parameter</tt></b>
</dt>
<dd>
<p>(P) The internal pattern-matching routines are out of their gourd.</p>
</dd>


<dt>
<b><tt class="literal">Number too long</tt></b>
</dt>
<dd>
<p>(F) Perl limits the representation of decimal numbers in programs to about
about 250 characters.  You've exceeded that length.  Future versions of
Perl are likely to eliminate this arbitrary limitation.  In the meantime,
try using scientific notation (e.g., <tt class="literal">1e6</tt> instead of <tt class="literal">1_000_000</tt>).</p>
</dd>


<dt>
<b><tt class="literal">Octal number &gt; 037777777777 non-portable</tt></b>
</dt>
<dd>
<p>(W portable) The octal number you specified is larger than <tt class="literal">2**32-1</tt>
(4,294,967,295) and therefore nonportable between systems.</p>
</dd>


<dt>
<b><tt class="literal">Octal number in vector unsupported</tt></b>
</dt>
<dd>
<p>(F) Numbers with a leading <tt class="literal">0</tt> are not currently allowed in vectors.  The
octal number interpretation of such numbers may be supported in a future
version.</p>
</dd>


<dt>
<b><tt class="literal">Odd number of elements in hash assignment</tt></b>
</dt>
<dd>
<p>(W misc) You specified an odd number of elements to initialize a hash, which
is odd because hashes come in key/value pairs.</p>
</dd>


<dt>
<b><tt class="literal">Offset outside string</tt></b>
</dt>
<dd>
<p>(F) You tried to do a <tt class="literal">read</tt>/<tt class="literal">write</tt>/<tt class="literal">send</tt>/<tt class="literal">recv</tt> operation with an offset
pointing outside the buffer.  This is difficult to imagine. The sole exception to this rule is that <tt class="literal">sysread</tt>ing past the buffer
will extend the buffer and zero-pad the new area.</p>
</dd>


<dt>
<b><tt class="literal">oops: oopsAV</tt></b>
</dt>
<dd>
<p>(S internal) An internal warning indicating that the grammar is screwed up.</p>
</dd>


<dt>
<b><tt class="literal">oops: oopsHV</tt></b>
</dt>
<dd>
<p>(S internal) An internal warning indicating that the grammar is screwed up.</p>
</dd>


<dt>
<b><tt class="literal">Operation `</tt><em class="replaceable">%s</em><tt class="literal">': no method found,</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) An attempt was made to perform an overloaded operation for which
no handler was defined.  While some handlers can be autogenerated in
terms of other handlers, there is no default handler for any
operation, unless the <tt class="literal">fallback</tt> overloading key is specified to be true.</p>
</dd>


<dt>
<b><tt class="literal">Operator or semicolon missing before</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(S ambiguous) You used a variable or subroutine call when the parser was
expecting an operator.  The parser has assumed you really meant
to use an operator, but this is highly likely to be incorrect.  For
example, if you accidentally say <tt class="literal">*foo</tt><tt class="literal">*foo</tt>, it will be interpreted as
if you'd said <tt class="literal">*foo * 'foo'</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Out of memory!</tt></b>
</dt>
<dd>
<p>(X) Perl's internal <tt class="literal">malloc</tt> function returned 0, indicating that the remaining memory (or virtual memory) was insufficient to satisfy the
request.  Perl has no option but to exit immediately.</p>
</dd>


<dt>
<b><tt class="literal">Out of memory for yacc stack</tt></b>
</dt>
<dd>
<p>(F) The <em class="emphasis">yacc</em> parser wanted to grow its stack so it could continue
parsing, but <tt class="literal">realloc</tt> wouldn't give it more memory, virtual or
otherwise.</p>
</dd>


<dt>
<b><tt class="literal">Out of memory during request for</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(X|F) The <tt class="literal">malloc</tt> function returned 0, indicating that the remaining memory (or virtual memory) was insufficient to satisfy the
request.</p>

<p>The request was judged to be small, so the possibility to trap it
depends on the way Perl was compiled.  By default, it is not trappable.
However, if compiled for this purpose, Perl may use the contents of <tt class="literal">$^M</tt> as
an emergency pool after <tt class="literal">die</tt>ing with this message.  In this case, the
error is trappable <em class="emphasis">once</em>.</p>
</dd>


<dt>
<b><tt class="literal">Out of memory during "large" request for</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) Perl's internal <tt class="literal">malloc</tt> function returned 0, indicating that the remaining memory (or virtual memory) was insufficient to satisfy the
request. However, the request was judged large enough (compile-time
default is 64K), so a possibility to shut down by trapping this error
is granted.</p>
</dd>


<dt>
<b><tt class="literal">Out of memory during ridiculously large request</tt></b>
</dt>
<dd>
<p>(F) You can't allocate more than <tt class="literal">2**31+</tt>"small amount" bytes.  This error
is most likely to be caused by a typo in the Perl program (e.g., <tt class="literal">$arr[time]</tt>
instead of <tt class="literal">$arr[$time]</tt>).</p>
</dd>


<dt>
<b><tt class="literal">page overflow</tt></b>
</dt>
<dd>
<p>(W io) A single call to <tt class="literal">write</tt> produced more lines than can fit on a page.</p>
</dd>


<dt>
<b><tt class="literal">panic: ck_grep</tt></b>
</dt>
<dd>
<p>(P) The program failed an internal consistency check while trying to compile a <tt class="literal">grep</tt>.</p>
</dd>


<dt>
<b><tt class="literal">panic: ck_split</tt></b>
</dt>
<dd>
<p>(P) The program failed an internal consistency check while trying to compile a <tt class="literal">split</tt>.</p>
</dd>


<dt>
<b><tt class="literal">panic: corrupt saved stack index</tt></b>
</dt>
<dd>
<p>(P) The savestack was requested to restore more localized values than there
are in the savestack.</p>
</dd>


<dt>
<b><tt class="literal">panic: del_backref</tt></b>
</dt>
<dd>
<p>(P) The program failed an internal consistency check while trying to reset a weak
reference.</p>
</dd>


<dt>
<b><tt class="literal">panic: die</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(P) We popped the context stack to an <tt class="literal">eval</tt> context and then discovered
it wasn't an <tt class="literal">eval</tt> context.</p>
</dd>


<dt>
<b><tt class="literal">panic: do_match</tt></b>
</dt>
<dd>
<p>(P) The internal <tt class="literal">pp_match</tt> routine was called with invalid operational data.</p>
</dd>


<dt>
<b><tt class="literal">panic: do_split</tt></b>
</dt>
<dd>
<p>(P) Something terrible went wrong in setting up for the <tt class="literal">split</tt>.</p>
</dd>


<dt>
<b><tt class="literal">panic: do_subst</tt></b>
</dt>
<dd>
<p>(P) The internal <tt class="literal">pp_subst</tt> routine was called with invalid operational data.</p>
</dd>


<dt>
<b><tt class="literal">panic: do_trans</tt></b>
</dt>
<dd>
<p>(P) The internal <tt class="literal">do_trans</tt> routine was called with invalid operational data.</p>
</dd>


<dt>
<b><tt class="literal">panic: frexp</tt></b>
</dt>
<dd>
<p>(P) The library function <tt class="literal">frexp</tt> failed, making <tt class="literal">printf("%f")</tt> impossible.</p>
</dd>


<dt>
<b><tt class="literal">panic: goto</tt></b>
</dt>
<dd>
<p>(P) We popped the context stack to a context with the specified label
and then discovered it wasn't a context in which we know how to do a <tt class="literal">goto</tt>.</p>
</dd>


<dt>
<b><tt class="literal">panic: INTERPCASEMOD</tt></b>
</dt>
<dd>
<p>(P) The lexer got into a bad state at a case modifier.</p>
</dd>


<dt>
<b><tt class="literal">panic: INTERPCONCAT</tt></b>
</dt>
<dd>
<p>(P) The lexer got into a bad state parsing a string with brackets.</p>
</dd>


<dt>
<b><tt class="literal">panic: kid popen errno read</tt></b>
</dt>
<dd>
<p>(F) The forked child returned an incomprehensible message about its errno.</p>
</dd>


<dt>
<b><tt class="literal">panic: last</tt></b>
</dt>
<dd>
<p>(P) We popped the context stack to a block context and then discovered
it wasn't a block context.</p>
</dd>


<dt>
<b><tt class="literal">panic: leave_scope clearsv</tt></b>
</dt>
<dd>
<p>(P) A writable lexical variable became read-only somehow within the scope.</p>
</dd>


<dt>
<b><tt class="literal">panic: leave_scope inconsistency</tt></b>
</dt>
<dd>
<p>(P) The savestack probably got out of sync.  At least, there was an
invalid <tt class="literal">enum</tt> on the top of it.</p>
</dd>


<dt>
<b><tt class="literal">panic: malloc</tt></b>
</dt>
<dd>
<p>(P) Something requested a negative number of bytes of <tt class="literal">malloc</tt>.</p>
</dd>


<dt>
<b><tt class="literal">panic: magic_killbackrefs</tt></b>
</dt>
<dd>
<p>(P) The program failed an internal consistency check while trying to reset all weak
references to an object.</p>
</dd>


<dt>
<b><tt class="literal">panic: mapstart</tt></b>
</dt>
<dd>
<p>(P) The compiler is screwed up with respect to the <tt class="literal">map</tt> function.</p>
</dd>


<dt>
<b><tt class="literal">panic: null array</tt></b>
</dt>
<dd>
<p>(P) One of the internal array routines was passed a null AV pointer.</p>
</dd>


<dt>
<b><tt class="literal">panic: pad_alloc</tt></b>
</dt>
<dd>
<p>(P) The compiler got confused about which scratchpad it was allocating
and freeing temporaries and lexicals from.</p>
</dd>


<dt>
<b><tt class="literal">panic: pad_free curpad</tt></b>
</dt>
<dd>
<p>(P) The compiler got confused about which scratchpad it was allocating
and freeing temporaries and lexicals from.</p>
</dd>


<dt>
<b><tt class="literal">panic: pad_free po</tt></b>
</dt>
<dd>
<p>(P) An invalid scratchpad offset was detected internally.</p>
</dd>


<dt>
<b><tt class="literal">panic: pad_reset curpad</tt></b>
</dt>
<dd>
<p>(P) The compiler got confused about which scratchpad it was allocating
and freeing temporaries and lexicals from.</p>
</dd>


<dt>
<b><tt class="literal">panic: pad_sv po</tt></b>
</dt>
<dd>
<p>(P) An invalid scratchpad offset was detected internally.</p>
</dd>


<dt>
<b><tt class="literal">panic: pad_swipe curpad</tt></b>
</dt>
<dd>
<p>(P) The compiler got confused about which scratchpad it was allocating
and freeing temporaries and lexicals from.</p>
</dd>


<dt>
<b><tt class="literal">panic: pad_swipe po</tt></b>
</dt>
<dd>
<p>(P) An invalid scratchpad offset was detected internally.</p>
</dd>


<dt>
<b><tt class="literal">panic: pp_iter</tt></b>
</dt>
<dd>
<p>(P) The <tt class="literal">foreach</tt> iterator got called in a nonloop context frame.</p>
</dd>


<dt>
<b><tt class="literal">panic: realloc</tt></b>
</dt>
<dd>
<p>(P) Something requested a negative number of bytes of <tt class="literal">realloc</tt>.</p>
</dd>


<dt>
<b><tt class="literal">panic: restartop</tt></b>
</dt>
<dd>
<p>(P) Some internal routine requested a <tt class="literal">goto</tt> (or something like it) but
didn't supply the destination.</p>
</dd>


<dt>
<b><tt class="literal">panic: return</tt></b>
</dt>
<dd>
<p>(P) We popped the context stack to a subroutine or <tt class="literal">eval</tt> context and
then discovered it wasn't a subroutine or <tt class="literal">eval</tt> context.</p>
</dd>


<dt>
<b><tt class="literal">panic: scan_num</tt></b>
</dt>
<dd>
<p>(P) Perl's internal <tt class="literal">scan_num</tt> got called on something that wasn't a
number.</p>
</dd>


<dt>
<b><tt class="literal">panic: sv_insert</tt></b>
</dt>
<dd>
<p>(P) The <tt class="literal">sv_insert</tt> routine was told to remove more string than there
was string.</p>
</dd>


<dt>
<b><tt class="literal">panic: top_env</tt></b>
</dt>
<dd>
<p>(P) The compiler attempted to do a <tt class="literal">goto</tt>, or something weird like that.</p>
</dd>


<dt>
<b><tt class="literal">panic: yylex</tt></b>
</dt>
<dd>
<p>(P) The lexer got into a bad state while processing a case modifier.</p>
</dd>


<dt>
<b><tt class="literal">panic:</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(P) An internal error.</p>
</dd>


<dt>
<b><tt class="literal">Parentheses missing around "</tt><em class="replaceable">%s</em><tt class="literal">" list</tt></b>
</dt>
<dd>
<p>(W parenthesis) You said something like:
<blockquote>
<pre class="programlisting">my $foo, $bar = @_;</pre>
</blockquote>

when you meant:
<blockquote>
<pre class="programlisting">my ($foo, $bar) = @_;</pre>
</blockquote>

Remember that <tt class="literal">my</tt>, <tt class="literal">our</tt>, and <tt class="literal">local</tt> bind tighter than the comma.</p>
</dd>


<dt>
<b><tt class="literal">Perl %3.3f required--this is only version</tt> <em class="replaceable">%s</em><tt class="literal">, stopped</tt></b>
</dt>
<dd>
<p>(F) The module in question uses features of a version of Perl more recent
than the currently running version.  How long has it been since you upgraded,
anyway?</p>
</dd>


<dt>
<b><tt class="literal">PERL_SH_DIR too long</tt></b>
</dt>
<dd>
<p>(F) This is an error peculiar to OS/2. <tt class="literal">PERL_SH_DIR</tt> is the directory that contains the
<em class="emphasis">sh</em> shell.  See <tt class="literal">PERL_SH_DIR</tt> in the <em class="emphasis">README.os2</em> file bundled with
the Perl distribution.</p>
</dd>


<dt>
<b><tt class="literal">Permission denied</tt></b>
</dt>
<dd>
<p>(F) The setuid emulator in <em class="emphasis">suidperl</em> decided you were up to no good.</p>
</dd>


<dt>
<b><tt class="literal">pid</tt> <em class="replaceable">%x</em><tt class="literal"> not a child</tt></b>
</dt>
<dd>
<p>(W exec) This is a warning peculiar to VMS; <tt class="literal">waitpid</tt> was asked to wait for a
process that isn't a subprocess of the current process.  While this
is fine from VMS's perspective, it's probably not what you intended.</p>
</dd>


<dt>
<b><tt class="literal">POSIX getpgrp can't take an argument</tt></b>
</dt>
<dd>
<p>(F) Your system has POSIX <tt class="literal">getpgrp</tt>, which takes no argument, unlike
the BSD version, which takes a PID.</p>
</dd>


<dt>
<b><tt class="literal">Possible Y2K bug:</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W y2k) You are concatenating the number 19 with another number, which
could be a potential year 2000 problem.</p>
</dd>


<dt>
<b><tt class="literal">Possible attempt to put comments in qw() list</tt></b>
</dt>
<dd>
<p>(W qw) <tt class="literal">qw</tt> lists contain items separated by whitespace; as with
literal strings, comment characters are not ignored but are instead
treated as literal data.  (You may have used delimiters other than
the parentheses shown here; braces are also frequently used.)</p>

<p>You probably wrote something like this:
<blockquote>
<pre class="programlisting">@list = qw(
    a # a comment
    b # another comment
);</pre>
</blockquote>

when you should have written this:
<blockquote>
<pre class="programlisting">@list = qw(
    a
    b
);</pre>
</blockquote>

If you really want comments, build your list the
old-fashioned way, with quotes and commas:
<blockquote>
<pre class="programlisting">@list = (
    'a',    # a comment
    'b',    # another comment
);</pre>
</blockquote>
</p>
</dd>


<dt>
<b><tt class="literal">Possible attempt to separate words with commas</tt></b>
</dt>
<dd>
<p>(W qw) <tt class="literal">qw</tt> lists contain items separated by whitespace; therefore, commas
aren't needed to separate the items.  (You may have used
delimiters other than the parentheses shown here; braces are also frequently
used.)</p>

<p>You probably wrote something like this:
<blockquote>
<pre class="programlisting">qw( a, b, c );</pre>
</blockquote>

which puts literal commas into some of the list items.  Write it without
commas if you don't want them to appear in your data:
<blockquote>
<pre class="programlisting">qw( a b c );</pre>
</blockquote>
</p>
</dd>


<dt>
<b><tt class="literal">Possible memory corruption:</tt> <em class="replaceable">%s</em> <tt class="literal">overflowed 3rd argument</tt></b>
</dt>
<dd>
<p>(F) An <tt class="literal">ioctl</tt> or <tt class="literal">fcntl</tt> returned more than Perl was bargaining for. Perl guesses a reasonable buffer size but puts a sentinel byte at the
end of the buffer just in case.  This sentinel byte got clobbered, and
Perl assumes that memory is now corrupted.</p>
</dd>


<dt>
<b><tt class="literal">pragma "attrs" is deprecated, use "sub NAME : ATTRS" instead</tt></b>
</dt>
<dd>
<p>(W deprecated) You have written something like this:
<blockquote>
<pre class="programlisting">sub doit
{
    use attrs qw(locked);
}</pre>
</blockquote>

You should use the new declaration syntax instead:
<blockquote>
<pre class="programlisting">sub doit : locked
{
    ...</pre>
</blockquote>

The <tt class="literal">use attrs</tt> pragma is now obsolete and is only provided for
backward compatibility.</p>
</dd>


<dt>
<b><tt class="literal">Precedence problem: open</tt> <em class="replaceable">%s</em> <tt class="literal">should be open(</tt><em class="replaceable">%s</em><tt class="literal">)</tt></b>
</dt>
<dd>
<p>(S precedence) The old irregular construct:
<blockquote>
<pre class="programlisting">open FOO || die;</pre>
</blockquote>

is now misinterpreted as:
<blockquote>
<pre class="programlisting">open(FOO || die);</pre>
</blockquote>

because of the strict regularization of Perl 5's grammar into unary
and list operators.  (The old <tt class="literal">open</tt> was a little of both.)  You must
put parentheses around the filehandle or use the new <tt class="literal">or</tt> operator
instead of <tt class="literal">||</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Premature end of script headers</tt></b>
</dt>
<dd>
<p>See <tt class="literal">Server error</tt>.</p>
</dd>


<dt>
<b><tt class="literal">print() on closed filehandle</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W closed) The filehandle you're printing on got itself closed
sometime before now.  Check your logic flow.</p>
</dd>


<dt>
<b><tt class="literal">printf() on closed filehandle</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W closed) The filehandle you're writing to got itself closed sometime
before now.  Check your logic flow.</p>
</dd>


<dt>
<b><tt class="literal">Process terminated by SIG</tt><em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W) This is a standard message issued by OS/2 applications, while Unix
applications die in silence.  It is considered a feature of the OS/2
port.  One can easily disable this warning by setting appropriate signal handlers.
See also "Process terminated by <tt class="literal">SIGTERM</tt>/<tt class="literal">SIGINT</tt>" in the <em class="emphasis">README.os2</em>
file bundled with the Perl distribution.</p>
</dd>


<dt>
<b><tt class="literal">Prototype mismatch:</tt> <em class="replaceable">%s</em> <tt class="literal">vs</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(S unsafe) The subroutine being declared or defined had previously
been declared or defined with a different function prototype.</p>
</dd>


<dt>
<b><tt class="literal">Range iterator outside integer range</tt></b>
</dt>
<dd>
<p>(F) One (or both) of the numeric arguments of the range operator <tt class="literal">..</tt>
are outside the range that can be represented by integers internally.
One possible workaround is to force Perl to use magical string
increments by prepending <tt class="literal">0</tt> to your numbers.</p>
</dd>


<dt>
<b><tt class="literal">readline() on closed filehandle</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W closed) The filehandle you're reading from got itself closed
sometime before now.  Check your logic flow.</p>
</dd>


<dt>
<b><tt class="literal">realloc() of freed memory ignored</tt></b>
</dt>
<dd>
<p>(S malloc) An internal routine called <tt class="literal">realloc</tt> on something that had
already been freed.</p>
</dd>


<dt>
<b><tt class="literal">Reallocation too large:</tt> <em class="replaceable">%lx</em></b>
</dt>
<dd>
<p>(F) You can't allocate more than 64K on an MS-DOS machine.</p>
</dd>


<dt>
<b><tt class="literal">Recompile perl with -DDEBUGGING to use -D switch</tt></b>
</dt>
<dd>
<p>(F debugging) You can't use the <span class="option">-D</span> option unless the code to
produce the desired output is compiled into Perl, which entails some
overhead, which is why it's currently left out of your copy.</p>
</dd>


<dt>
<b><tt class="literal">Recursive inheritance detected in package '</tt><em class="replaceable">%s</em><tt class="literal">'</tt></b>
</dt>
<dd>
<p>(F) More than 100 levels of inheritance were used.  This probably indicates
an unintended loop in your inheritance hierarchy.</p>
</dd>


<dt>
<b><tt class="literal">Recursive inheritance detected while looking for method '</tt><em class="replaceable">%s</em><tt class="literal">' in package '</tt><em class="replaceable">%s</em><tt class="literal">'</tt></b>
</dt>
<dd>
<p>(F) More than 100 levels of inheritance were encountered while a
method was invoked.  This probably indicates an unintended loop in your inheritance hierarchy.</p>
</dd>


<dt>
<b><tt class="literal">Reference found where even-sized list expected</tt></b>
</dt>
<dd>
<p>(W misc) You gave a single reference when Perl was expecting a list with
an even number of elements (for assignment to a hash). This
usually means that you used the anonymous hash constructor when you meant 
to use parens. In any case, a hash requires key/value <em class="emphasis">pairs</em>:
<blockquote>
<pre class="programlisting">%hash = { one =&gt; 1, two =&gt; 2, };    # WRONG
%hash = [ qw( an anon array /)];    # WRONG
%hash = ( one =&gt; 1, two =&gt; 2, );    # right
%hash = qw( one 1 two 2 );          # also fine</pre>
</blockquote>
</p>
</dd>


<dt>
<b><tt class="literal">Reference is already weak</tt></b>
</dt>
<dd>
<p>(W misc) You have attempted to weaken a reference that is already weak.
Doing so has no effect.</p>
</dd>


<dt>
<b><tt class="literal">Reference miscount in sv_replace()</tt></b>
</dt>
<dd>
<p>(W internal) The internal <tt class="literal">sv_replace</tt> function was handed a new SV with a
reference count of other than 1.</p>
</dd>


<dt>
<b><tt class="literal">regexp *+ operand could be empty</tt></b>
</dt>
<dd>
<p>(F) The part of the regexp subject to either the <tt class="literal">*</tt> or <tt class="literal">+</tt>
quantifier could match an empty string.</p>
</dd>


<dt>
<b><tt class="literal">regexp memory corruption</tt></b>
</dt>
<dd>
<p>(P) The regular expression engine got confused by what the regular
expression compiler gave it.</p>
</dd>


<dt>
<b><tt class="literal">regexp out of space</tt></b>
</dt>
<dd>
<p>(P) This is a "can't happen" error, because <tt class="literal">safemalloc</tt> should have caught
it earlier.</p>
</dd>


<dt>
<b><tt class="literal">Reversed</tt> <em class="replaceable">%s</em><tt class="literal">= operator</tt></b>
</dt>
<dd>
<p>(W syntax) You wrote your assignment operator backward.  The <tt class="literal">=</tt> must always
come last, to avoid ambiguity with subsequent unary operators.</p>
</dd>


<dt>
<b><tt class="literal">Runaway format</tt></b>
</dt>
<dd>
<p>(F) Your format contained the <tt class="literal">~~</tt> repeat-until-blank sequence, but it
produced 200 lines at once, and the 200th line looked exactly like the
199th line.  Apparently, you didn't arrange for the arguments to exhaust
themselves either by using <tt class="literal">^</tt> instead of <tt class="literal">@</tt> (for scalar variables) or by
shifting or popping (for array variables).</p>
</dd>


<dt>
<b><tt class="literal">Scalar value @</tt><em class="replaceable">%s</em><tt class="literal">[</tt><em class="replaceable">%s</em><tt class="literal">] better written as $</tt><em class="replaceable">%s</em><tt class="literal">[</tt><em class="replaceable">%s</em><tt class="literal">]</tt></b>
</dt>
<dd>
<p>(W syntax) You've used an array slice (indicated by <tt class="literal">@</tt>) to select a
single element of an array.  Generally, it's better to ask for a scalar
value (indicated by <tt class="literal">$</tt>).  The difference is that <tt class="literal">$foo[&amp;bar]</tt> always
behaves like a scalar, both when assigning to it and when evaluating
its argument, while <tt class="literal">@foo[&amp;bar]</tt> behaves like a list when you assign
to it and provides a list context to its subscript, which can do
weird things if you're expecting only one subscript.</p>

<p>On the other hand, if you were actually hoping to treat the array
element as a list, you need to look into how references work, because
Perl will not magically convert between scalars and lists for you.</p>
</dd>


<dt>
<b><tt class="literal">Scalar value @</tt><em class="replaceable">%s</em><tt class="literal">{</tt><em class="replaceable">%s</em><tt class="literal">} better written as $</tt><em class="replaceable">%s</em><tt class="literal">{</tt><em class="replaceable">%s</em><tt class="literal">}</tt></b>
</dt>
<dd>
<p>(W syntax) You've used a hash slice (indicated by <tt class="literal">@</tt>) to select a
single element of a hash.  Generally, it's better to ask for a scalar
value (indicated by <tt class="literal">$</tt>).  The difference is that <tt class="literal">$foo{&amp;bar}</tt>
always behaves like a scalar, both when assigning to it and when
evaluating its argument, while <tt class="literal">@foo{&amp;bar}</tt> behaves like a list when
you assign to it, and provides a list context to its subscript, which
can do weird things if you're expecting only one subscript.</p>

<p>On the other hand, if you were actually hoping to treat the hash
element as a list, you need to look into how references work, because
Perl will not magically convert between scalars and lists for you.</p>
</dd>


<dt>
<b><tt class="literal">Script is not setuid/setgid in suidperl</tt></b>
</dt>
<dd>
<p>(F) Oddly, the <em class="emphasis">suidperl</em> program was invoked on a script without a setuid
or setgid bit set.  This doesn't make much sense.</p>
</dd>


<dt>
<b><tt class="literal">Search pattern not terminated</tt></b>
</dt>
<dd>
<p>(F) The lexer couldn't find the final delimiter of a <tt class="literal">//</tt> or <tt class="literal">m{}</tt>
construct.  Remember that bracketing delimiters count nesting levels. Omitting the leading <tt class="literal">$</tt> from a variable <tt class="literal">$m</tt> may cause this error.</p>
</dd>


<dt>
<b><em class="replaceable">%s</em><tt class="literal">seek() on unopened file</tt></b>
</dt>
<dd>
<p>(W unopened) You tried to use the <tt class="literal">seek</tt> or <tt class="literal">sysseek</tt> function on a
filehandle that either was never opened or has since been closed.</p>
</dd>


<dt>
<b><tt class="literal">select not implemented</tt></b>
</dt>
<dd>
<p>(F) This machine doesn't implement the <tt class="literal">select</tt> system call.</p>
</dd>


<dt>
<b><tt class="literal">sem</tt><em class="replaceable">%s</em> <tt class="literal">not implemented</tt></b>
</dt>
<dd>
<p>(F) You don't have System V semaphore IPC on your system.</p>
</dd>


<dt>
<b><tt class="literal">semi-panic: attempt to dup freed string</tt></b>
</dt>
<dd>
<p>(S internal) The internal <tt class="literal">newSVsv</tt> routine was called to duplicate a scalar
that had previously been marked as free.</p>
</dd>


<dt>
<b><tt class="literal">Semicolon seems to be missing</tt></b>
</dt>
<dd>
<p>(W semicolon) A nearby syntax error was probably caused by a missing semicolon,
or possibly some other missing operator, such as a comma.</p>
</dd>


<dt>
<b><tt class="literal">send() on closed socket</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W closed) The socket you're sending to got itself closed sometime
before now.  Check your logic flow.</p>
</dd>


<dt>
<b><tt class="literal">Sequence (? incomplete</tt></b>
</dt>
<dd>
<p>(F) A regular expression ended with an incomplete extension <tt class="literal">(?</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Sequence (?#... not terminated</tt></b>
</dt>
<dd>
<p>(F) A regular expression comment must be terminated by a closing
parenthesis.  Embedded parentheses aren't allowed.</p>
</dd>


<dt>
<b><tt class="literal">Sequence (?</tt><em class="replaceable">%s</em><tt class="literal">...) not implemented</tt></b>
</dt>
<dd>
<p>(F) A proposed regular expression extension has reserved the character
but has not yet been written.</p>
</dd>


<dt>
<b><tt class="literal">Sequence (?</tt><em class="replaceable">%s</em><tt class="literal">...) not recognized</tt></b>
</dt>
<dd>
<p>(F) You used a regular expression extension that doesn't make sense.</p>
</dd>


<dt>
<b><tt class="literal">Server error</tt></b>
</dt>
<dd>
<p>This is the error message generally seen in a browser window when you try
to run a CGI program (including SSI) over the web. The actual error
text varies widely from server to server. The most frequently seen
variants are "<tt class="literal">500 Server error</tt>", "<tt class="literal">Method</tt><em class="replaceable">(something)</em><tt class="literal">not permitted</tt>",
"<tt class="literal">Document contains no data</tt>", "<tt class="literal">Premature end of script headers</tt>", and
"<tt class="literal">Did not produce a valid header</tt>".</p>

<p>
<em class="emphasis">This is a CGI error, not a Perl error</em>.</p>

<p>You need to make sure your script is executable, is accessible by the user
CGI is running the script under (which is probably not the user account you
tested it under), does not rely on any environment variables (like <tt class="literal">PATH</tt>)
from the user it isn't running under, and isn't in a location where the CGI
server can't find it, basically, more or less.  Please see the following
for more information:</p>

<blockquote>
<pre class="programlisting">
<a href="http://www.perl.com/CPAN/doc/FAQs/cgi/idiots-guide.html">http://www.perl.com/CPAN/doc/FAQs/cgi/idiots-guide.html</a>
<a href="http://www.perl.com/CPAN/doc/FAQs/cgi/perl-cgi-faq.html">http://www.perl.com/CPAN/doc/FAQs/cgi/perl-cgi-faq.html</a>
ftp://rtfm.mit.edu/pub/usenet/news.answers/www/cgi-faq
<a href="http://hoohoo.ncsa.uiuc.edu/cgi/interface.html">http://hoohoo.ncsa.uiuc.edu/cgi/interface.html</a>
<a href="http://www-genome.wi.mit.edu/WWW/faqs/www-security-faq.html">http://www-genome.wi.mit.edu/WWW/faqs/www-security-faq.html</a>
</pre>
</blockquote>
<p>You should also look at the Perl FAQ.</p>
</dd>


<dt>
<b><tt class="literal">setegid() not implemented</tt></b>
</dt>
<dd>
<p>(F) You tried to assign to <tt class="literal">$)</tt>, but your operating system doesn't support
the <tt class="literal">setegid</tt> system call (or equivalent), or at least <em class="emphasis">Configure</em> didn't
think so.</p>
</dd>


<dt>
<b><tt class="literal">seteuid() not implemented</tt></b>
</dt>
<dd>
<p>(F) You tried to assign to <tt class="literal">$&gt;</tt>, but your operating system
doesn't support the <tt class="literal">seteuid</tt> system call (or equivalent), or at
least <em class="emphasis">Configure</em> didn't think so.</p>
</dd>


<dt>
<b><tt class="literal">setpgrp can't take arguments</tt></b>
</dt>
<dd>
<p>(F) Your system has the <tt class="literal">setpgrp</tt> from BSD 4.2, which takes no arguments,
unlike POSIX <tt class="literal">setpgid</tt>, which takes a process ID and process group ID.</p>
</dd>


<dt>
<b><tt class="literal">setrgid() not implemented</tt></b>
</dt>
<dd>
<p>(F) You tried to assign to <tt class="literal">$(</tt>, but your operating system doesn't support
the <tt class="literal">setrgid</tt> system call (or equivalent), or at least <em class="emphasis">Configure</em> didn't
think so.</p>
</dd>


<dt>
<b><tt class="literal">setruid() not implemented</tt></b>
</dt>
<dd>
<p>(F) You tried to assign to <tt class="literal">$&lt;</tt>, but your operating system doesn't support
the <tt class="literal">setruid</tt> system call (or equivalent), or at least <em class="emphasis">Configure</em> didn't
think so.</p>
</dd>


<dt>
<b><tt class="literal">setsockopt() on closed socket</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W closed) You tried to set a socket option on a closed socket.
Did you forget to check the return value of your <tt class="literal">socket</tt> call?</p>
</dd>


<dt>
<b><tt class="literal">Setuid/gid script is writable by world</tt></b>
</dt>
<dd>
<p>(F) The setuid emulator won't run a script that is writable by the world,
because the world might have written on it already.</p>
</dd>


<dt>
<b><tt class="literal">shm</tt><em class="replaceable">%s</em> <tt class="literal">not implemented</tt></b>
</dt>
<dd>
<p>(F) You don't have System V shared memory IPC on your system.</p>
</dd>


<dt>
<b><tt class="literal">shutdown() on closed socket</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W closed) You tried to do a shutdown on a closed socket.  Seems a bit
superfluous.</p>
</dd>


<dt>
<b><tt class="literal">SIG</tt><em class="replaceable">%s</em> <tt class="literal">handler "</tt><em class="replaceable">%s</em><tt class="literal">" not defined</tt></b>
</dt>
<dd>
<p>(W signal) The signal handler named in <tt class="literal">%SIG</tt> doesn't, in fact,
exist.  Perhaps you put it into the wrong package?</p>
</dd>


<dt>
<b><tt class="literal">sort is now a reserved word</tt></b>
</dt>
<dd>
<p>(F) An ancient error message that almost nobody ever runs into anymore. But before sort was a keyword, people sometimes used it as a filehandle.</p>
</dd>


<dt>
<b><tt class="literal">Sort subroutine didn't return a numeric value</tt></b>
</dt>
<dd>
<p>(F) A sort comparison routine must return a number.  You probably blew
it by not using <tt class="literal">&lt;=&gt;</tt> or <tt class="literal">cmp</tt>, or by not using them correctly.</p>
</dd>


<dt>
<b><tt class="literal">Sort subroutine didn't return single value</tt></b>
</dt>
<dd>
<p>(F) A sort comparison subroutine cannot return a list value with more
or less than one element.</p>
</dd>


<dt>
<b><tt class="literal">Split loop</tt></b>
</dt>
<dd>
<p>(P) The <tt class="literal">split</tt> was looping infinitely.  (Obviously, a <tt class="literal">split</tt>
shouldn't iterate more times than there are characters of input, which
is what happened.)</p>
</dd>


<dt>
<b><tt class="literal">Stat on unopened file &gt;</tt><em class="replaceable">%s</em><tt class="literal">&gt;</tt></b>
</dt>
<dd>
<p>(W unopened) You tried to use the <tt class="literal">stat</tt> function (or an equivalent
file test) on a filehandle that either was never opened or has since
been closed.</p>
</dd>


<dt>
<b><tt class="literal">Statement unlikely to be reached</tt></b>
</dt>
<dd>
<p>(W exec) You did an <tt class="literal">exec</tt> with some statement after it other than a
<tt class="literal">die</tt>.  This is almost always an error, because <tt class="literal">exec</tt> never returns
unless there was a failure.  You probably wanted to use <tt class="literal">system</tt>
instead, which does return.  To suppress this warning, put the <tt class="literal">exec</tt>
in a block by itself.</p>
</dd>


<dt>
<b><tt class="literal">Strange *+?{} on zero-length expression</tt></b>
</dt>
<dd>
<p>(W regexp) You applied a regular expression quantifier in a place where it
makes no sense, such as on a zero-width assertion. Try putting the quantifier inside the assertion instead.  For example,
the way to match <tt class="literal">abc</tt> provided that it is followed by three
repetitions of <tt class="literal">xyz</tt> is <tt class="literal">/abc(?=(?:xyz){3})/</tt>, not <tt class="literal">/abc(?=xyz){3}/</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Stub found while resolving method `</tt><em class="replaceable">%s</em><tt class="literal">' overloading `</tt><em class="replaceable">%s</em><tt class="literal">' in package `</tt><em class="replaceable">%s</em><tt class="literal">'</tt></b>
</dt>
<dd>
<p>(P) Overloading resolution over <tt class="literal">@ISA</tt> tree may be broken by
importation stubs.  Stubs should never be implicitly created, but
explicit calls to <tt class="literal">can</tt> may break this.</p>
</dd>


<dt>
<b><tt class="literal">Subroutine</tt> <em class="replaceable">%s</em> <tt class="literal">redefined</tt></b>
</dt>
<dd>
<p>(W redefine) You redefined a subroutine.  To suppress this warning, say:
<blockquote>
<pre class="programlisting">{
    no warnings;
    eval "sub name { ... }";
}</pre>
</blockquote>
</p>
</dd>


<dt>
<b><tt class="literal">Substitution loop</tt></b>
</dt>
<dd>
<p>(P) The substitution was looping infinitely.  (Obviously, a
substitution shouldn't iterate more times than there are characters of
input, which is what happened.)</p>
</dd>


<dt>
<b><tt class="literal">Substitution pattern not terminated</tt></b>
</dt>
<dd>
<p>(F) The lexer couldn't find the interior delimiter of an <tt class="literal">s///</tt> or <tt class="literal">s{}{}</tt>
construct.  Remember that bracketing delimiters count nesting levels. Omitting the leading <tt class="literal">$</tt> from variable <tt class="literal">$s</tt> may cause this error.</p>
</dd>


<dt>
<b><tt class="literal">Substitution replacement not terminated</tt></b>
</dt>
<dd>
<p>(F) The lexer couldn't find the final delimiter of an <tt class="literal">s///</tt> or <tt class="literal">s{}{}</tt>
construct.  Remember that bracketing delimiters count nesting levels. Omitting the leading <tt class="literal">$</tt> from variable <tt class="literal">$s</tt> may cause this error.</p>
</dd>


<dt>
<b><tt class="literal">substr outside of string</tt></b>
</dt>
<dd>
<p>(W substr|F) You tried to reference a <tt class="literal">substr</tt> that pointed outside
of a string.  That is, the absolute value of the offset was larger
than the length of the string.  This warning is fatal if <tt class="literal">substr</tt> is
used in an lvalue context (as the lefthand side of an assignment or
as a subroutine argument, for example).</p>
</dd>


<dt>
<b><tt class="literal">suidperl is no longer needed since</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) Your Perl was compiled with <span class="option">-DSETUID_SCRIPTS_ARE_SECURE_NOW</span>, but a
version of the setuid emulator somehow got run anyway.</p>
</dd>


<dt>
<b><tt class="literal">switching effective</tt> <em class="replaceable">%s</em> <tt class="literal">is not implemented</tt></b>
</dt>
<dd>
<p>(F) While under the <tt class="literal">use filetest</tt> pragma, we cannot switch the
real and effective UIDs or GIDs.</p>
</dd>


<dt>
<b><tt class="literal">syntax error</tt></b>
</dt>
<dd>
<p>(F) This message probably means you had a syntax error.  Common reasons include:</p>
</dd>


<dt>
<b><tt class="literal">syntax error at line</tt> <em class="replaceable">%d</em><tt class="literal">: `</tt><em class="replaceable">%s</em><tt class="literal">' unexpected</tt></b>
</dt>
<dd>
<p>(A) You've accidentally run your script through the Bourne shell
instead of Perl.  Check the <tt class="literal">#!</tt> line, or manually feed your script
into Perl yourself.</p>
</dd>


<dt>
<b><tt class="literal">System V</tt> <em class="replaceable">%s</em> <tt class="literal">is not implemented on this machine</tt></b>
</dt>
<dd>
<p>(F) You tried to do something with a function beginning with <tt class="literal">sem</tt>,
<tt class="literal">shm</tt>, or <tt class="literal">msg</tt> but System V IPC is not implemented in your
machine.  (In some machines, the functionality can exist but may be
unconfigured.)</p>
</dd>


<dt>
<b><tt class="literal">syswrite() on closed filehandle</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W closed) The filehandle you're writing to got itself closed sometime
before now.  Check your logic flow.</p>
</dd>


<dt>
<b><tt class="literal">Target of goto is too deeply nested</tt></b>
</dt>
<dd>
<p>(F) You tried to use <tt class="literal">goto</tt> to reach a label that was too deeply
nested for Perl to reach.  Perl is doing you a favor by refusing.</p>
</dd>


<dt>
<b><tt class="literal">tell() on unopened file</tt></b>
</dt>
<dd>
<p>(W unopened) You tried to use the <tt class="literal">tell</tt> function on a filehandle that
either was never opened or has since been closed.</p>
</dd>


<dt>
<b><tt class="literal">Test on unopened file</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W unopened) You tried to invoke a file test operator on a filehandle
that isn't open.  Check your logic.</p>
</dd>


<dt>
<b><tt class="literal">That use of $[ is unsupported</tt></b>
</dt>
<dd>
<p>(F) Assignment to <tt class="literal">$[</tt> is now strictly circumscribed and interpreted as
a compiler directive.  You may say only one of:
<blockquote>
<pre class="programlisting">$[ = 0;
$[ = 1;
...
local $[ = 0;
local $[ = 1;
...</pre>
</blockquote>

This is to prevent the problem of one module inadvertently changing the array base
out from under another module.</p>
</dd>


<dt>
<b><tt class="literal">The</tt> <em class="replaceable">%s</em> <tt class="literal">function is unimplemented</tt></b>
</dt>
<dd>
<p>The function indicated isn't implemented on this architecture, according
to the probings of <em class="emphasis">Configure</em>.</p>
</dd>


<dt>
<b><tt class="literal">The crypt() function is unimplemented due to excessive paranoia</tt></b>
</dt>
<dd>
<p>(F) <em class="emphasis">Configure</em> couldn't find the <tt class="literal">crypt</tt> function on your machine,
probably because your vendor didn't supply it, probably because they
think the U.S. government thinks it's a secret or at least
will continue to pretend that it is.</p>
</dd>


<dt>
<b><tt class="literal">The stat preceding -l _ wasn't an lstat</tt></b>
</dt>
<dd>
<p>(F) It makes no sense to test the current stat buffer for symbolic linkhood
if the last <tt class="literal">stat</tt> that wrote to the stat buffer already went past
the symlink to get to the real file.  Use an actual filename instead.</p>
</dd>


<dt>
<b><tt class="literal">This Perl can't reset CRTL environ elements (</tt><em class="replaceable">%s</em><tt class="literal">)</tt></b>
</dt>
<dt>
<b><tt class="literal">This Perl can't set CRTL environ elements (</tt><em class="replaceable">%s</em><tt class="literal">=</tt><em class="replaceable">%s</em><tt class="literal">)</tt></b>
</dt>
<dd>
<p>(W internal) These are warnings peculiar to VMS.  You tried to change or delete
an element of the CRTL's internal environ array, but your copy of Perl
wasn't built with a CRTL that contained the internal <tt class="literal">setenv</tt>
function.  You'll need to rebuild Perl with a CRTL that does, or
redefine <tt class="literal">PERL_ENV_TABLES</tt> (see <em class="emphasis">perlvms</em>(1)) so that the environ array
isn't the target of the change to <tt class="literal">%ENV</tt> that produced the warning.</p>
</dd>


<dt>
<b><tt class="literal">times not implemented</tt></b>
</dt>
<dd>
<p>(F) Your version of the C library apparently doesn't do <tt class="literal">times</tt>.  I
suspect you're not running on Unix.</p>
</dd>


<dt>
<b><tt class="literal">Too few args to syscall</tt></b>
</dt>
<dd>
<p>(F) There has to be at least one argument to <tt class="literal">syscall</tt> to specify the
system call to call, silly dilly.</p>
</dd>


<dt>
<b><tt class="literal">Too late for "-T" option</tt></b>
</dt>
<dd>
<p>(X) The <tt class="literal">#!</tt> line (or local equivalent) in a Perl script contains the
<span class="option">-T</span> option, but Perl was not invoked with <span class="option">-T</span> in its command line.
This is an error because by the time Perl discovers a <span class="option">-T</span> in a
script, it's too late to properly taint everything from the environment. So Perl gives up.</p>

<p>If the Perl script is being executed as a command using the <tt class="literal">#!</tt>
mechanism (or its local equivalent), this error can usually be fixed
by editing the <tt class="literal">#!</tt> line so that the <span class="option">-T</span> option is a part of Perl's
first argument: e.g., change <tt class="literal">perl -n -T</tt> to <tt class="literal">perl -T -n</tt>.</p>

<p>If the Perl script is being executed as <tt class="command">perl scriptname</tt>, then the
<span class="option">-T</span> option must appear on the command line: <tt class="command">perl -T scriptname</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Too late for "-</tt><em class="replaceable">%s</em><tt class="literal">" option</tt></b>
</dt>
<dd>
<p>(X) The <tt class="literal">#!</tt> line (or local equivalent) in a Perl script contains the
<span class="option">-M</span> or <span class="option">-m</span> option.  This is an error because <span class="option">-M</span> and <span class="option">-m</span> options
are not intended for use inside scripts.  Use a <tt class="literal">use</tt> declaration instead.</p>
</dd>


<dt>
<b><tt class="literal">Too late to run</tt> <em class="replaceable">%s</em> <tt class="literal">block</tt></b>
</dt>
<dd>
<p>(W void) A <tt class="literal">CHECK</tt> or <tt class="literal">INIT</tt> block is being defined during run time
proper, when the opportunity to run them has already passed.  Perhaps
you are loading a file with <tt class="literal">require</tt> or <tt class="literal">do</tt> when you should be
using <tt class="literal">use</tt> instead.  Or perhaps you should put the <tt class="literal">require</tt> or
<tt class="literal">do</tt> inside a <tt class="literal">BEGIN</tt> block.</p>
</dd>


<dt>
<b><tt class="literal">Too many ('s</tt></b>
</dt>
<dt>
<b><tt class="literal">Too many )'s</tt></b>
</dt>
<dd>
<p>(A) You've accidentally run your script through <em class="emphasis">csh</em> instead
of Perl.  Check the <tt class="literal">#!</tt> line, or manually feed your script into
Perl yourself.</p>
</dd>


<dt>
<b><tt class="literal">Too many args to syscall</tt></b>
</dt>
<dd>
<p>(F) Perl supports a maximum of only 14 arguments to <tt class="literal">syscall</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Too many arguments for</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) The function requires fewer arguments than you specified.</p>
</dd>


<dt>
<b><tt class="literal">trailing \ in regexp</tt></b>
</dt>
<dd>
<p>(F) The regular expression ends with an unbackslashed backslash.  Backslash
it.</p>
</dd>


<dt>
<b><tt class="literal">Transliteration pattern not terminated</tt></b>
</dt>
<dd>
<p>(F) The lexer couldn't find the interior delimiter of a <tt class="literal">tr///</tt> or
<tt class="literal">tr[][]</tt> or <tt class="literal">y///</tt> or <tt class="literal">y[][]</tt> construct.  Omitting the leading <tt class="literal">$</tt>
from variables <tt class="literal">$tr</tt> or <tt class="literal">$y</tt> may cause this error.</p>
</dd>


<dt>
<b><tt class="literal">Transliteration replacement not terminated</tt></b>
</dt>
<dd>
<p>(F) The lexer couldn't find the final delimiter of a <tt class="literal">tr///</tt> or <tt class="literal">tr[][]</tt>
construct.</p>
</dd>


<dt>
<b><tt class="literal">truncate not implemented</tt></b>
</dt>
<dd>
<p>(F) Your machine doesn't implement a file truncation mechanism that
<em class="emphasis">Configure</em> knows about.</p>
</dd>


<dt>
<b><tt class="literal">Type of arg</tt> <em class="replaceable">%d</em> <tt class="literal">to</tt> <em class="replaceable">%s</em> <tt class="literal">must be</tt> <em class="replaceable">%s</em> <tt class="literal">(not</tt> <em class="replaceable">%s</em><tt class="literal">)</tt></b>
</dt>
<dd>
<p>(F) This function requires the argument in that position to be of a
certain type.  Arrays must be <tt class="literal">@</tt><em class="replaceable">NAME</em> or <tt class="literal">@</tt><em class="replaceable">{EXPR}</em>.  Hashes must be
<tt class="literal">%</tt><em class="replaceable">NAME</em> or
<tt class="literal">%{</tt><em class="replaceable">EXPR</em><tt class="literal">}</tt>.  No
implicit dereferencing is allowed--use the
<tt class="literal">{</tt><em class="replaceable">EXPR</em><tt class="literal">}</tt> form
as an explicit dereference.</p>
</dd>


<dt>
<b><tt class="literal">umask: argument is missing initial 0</tt></b>
</dt>
<dd>
<p>(W umask) A umask of <tt class="literal">222</tt> is incorrect.  It should be <tt class="literal">0222</tt> because octal
literals always start with <tt class="literal">0</tt> in Perl, as in C.</p>
</dd>


<dt>
<b><tt class="literal">umask not implemented</tt></b>
</dt>
<dd>
<p>(F) Your machine doesn't implement the <tt class="literal">umask</tt> function, and you tried
to use it to restrict permissions for yourself (<em class="replaceable">EXPR</em><tt class="literal"> &amp; 0700</tt>).</p>
</dd>


<dt>
<b><tt class="literal">Unable to create sub named "</tt><em class="replaceable">%s</em><tt class="literal">"</tt></b>
</dt>
<dd>
<p>(F) You attempted to create or access a subroutine with an illegal name.</p>
</dd>


<dt>
<b><tt class="literal">Unbalanced context:</tt> <em class="replaceable">%d</em> <tt class="literal">more PUSHes than POPs</tt></b>
</dt>
<dd>
<p>(W internal) The exit code detected an internal inconsistency in how
many execution contexts were entered and left.</p>
</dd>


<dt>
<b><tt class="literal">Unbalanced saves:</tt> <em class="replaceable">%d</em> <tt class="literal">more saves than restores</tt></b>
</dt>
<dd>
<p>(W internal) The exit code detected an internal inconsistency in how many
values were temporarily localized.</p>
</dd>


<dt>
<b><tt class="literal">Unbalanced scopes:</tt> <em class="replaceable">%d</em> <tt class="literal">more ENTERs than LEAVEs</tt></b>
</dt>
<dd>
<p>(W internal) The exit code detected an internal inconsistency in how
many blocks were entered and left.</p>
</dd>


<dt>
<b><tt class="literal">Unbalanced tmps:</tt> <em class="replaceable">%d</em> <tt class="literal">more allocs than frees</tt></b>
</dt>
<dd>
<p>(W internal) The exit code detected an internal inconsistency in how
many mortal scalars were allocated and freed.</p>
</dd>


<dt>
<b><tt class="literal">Undefined format "</tt><em class="replaceable">%s</em><tt class="literal">" called</tt></b>
</dt>
<dd>
<p>(F) The format indicated doesn't seem to exist.  Perhaps it's really in
another package?</p>
</dd>


<dt>
<b><tt class="literal">Undefined sort subroutine "</tt><em class="replaceable">%s</em><tt class="literal">" called</tt></b>
</dt>
<dd>
<p>(F) The sort comparison routine specified doesn't seem to exist.  Perhaps
it's in a different package?</p>
</dd>


<dt>
<b><tt class="literal">Undefined subroutine &amp;</tt><em class="replaceable">%s</em> <tt class="literal">called</tt></b>
</dt>
<dd>
<p>(F) The subroutine indicated hasn't been defined, or if it was, it
has since been undefined.</p>
</dd>


<dt>
<b><tt class="literal">Undefined subroutine called</tt></b>
</dt>
<dd>
<p>(F) The anonymous subroutine you're trying to call hasn't been defined,
or if it was, it has since been undefined.</p>
</dd>


<dt>
<b><tt class="literal">Undefined subroutine in sort</tt></b>
</dt>
<dd>
<p>(F) The sort comparison routine specified is declared but doesn't seem to
have been defined yet.</p>
</dd>


<dt>
<b><tt class="literal">Undefined top format "</tt><em class="replaceable">%s</em><tt class="literal">" called</tt></b>
</dt>
<dd>
<p>(F) The format indicated doesn't seem to exist.  Perhaps it's really in
another package?</p>
</dd>


<dt>
<b><tt class="literal">Undefined value assigned to typeglob</tt></b>
</dt>
<dd>
<p>(W misc) An undefined value was assigned to a typeglob, such as <tt class="literal">*foo =
undef</tt>.  This does nothing.  It's possible that you really mean
<tt class="literal">undef *foo</tt>.</p>
</dd>


<dt>
<b><tt class="literal">unexec of</tt> <em class="replaceable">%s</em> <tt class="literal">into</tt> <em class="replaceable">%s</em> <tt class="literal">failed!</tt></b>
</dt>
<dd>
<p>(F) The <tt class="literal">unexec</tt> routine failed for some reason.  See your local FSF
representative, who probably put it there in the first place.</p>
</dd>


<dt>
<b><tt class="literal">Unknown BYTEORDER</tt></b>
</dt>
<dd>
<p>(F) There are no byte-swapping functions for a machine with this byte order.</p>
</dd>


<dt>
<b><tt class="literal">Unknown open() mode '</tt><em class="replaceable">%s</em><tt class="literal">'</tt></b>
</dt>
<dd>
<p>(F) The second argument of three-argument <tt class="literal">open</tt> is not in the list
of valid modes: <tt class="literal">&lt;</tt>, <tt class="literal">&gt;</tt>, <tt class="literal">&gt;&gt;</tt>, <tt class="literal">+&lt;</tt>,
<tt class="literal">+&gt;</tt>, <tt class="literal">+&gt;&gt;</tt>, <tt class="literal">-|</tt>, <tt class="literal">|-</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Unknown process</tt> <em class="replaceable">%x</em> <tt class="literal">sent message to prime_env_iter:</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(P) This is an error peculiar to VMS.  Perl was reading values for <tt class="literal">%ENV</tt> before
iterating over it, and someone else stuck a message in the stream of
data Perl expected.  Someone's very confused, or perhaps trying to
subvert Perl's population of <tt class="literal">%ENV</tt> for nefarious purposes.</p>
</dd>


<dt>
<b><tt class="literal">unmatched () in regexp</tt></b>
</dt>
<dd>
<p>(F) Unbackslashed parentheses must always be balanced in regular
expressions.  If you're a <em class="emphasis">vi</em> user, the <tt class="literal">%</tt> key is valuable for finding
the matching parenthesis.</p>
</dd>


<dt>
<b><tt class="literal">Unmatched right</tt> <em class="replaceable">%s</em> <tt class="literal">bracket</tt></b>
</dt>
<dd>
<p>(F) The lexer counted more closing curly or square brackets than
opening ones, so you're probably missing a matching opening bracket. As a general rule, you'll find the missing one (so to speak) near the
place you were last editing.</p>
</dd>


<dt>
<b><tt class="literal">unmatched [] in regexp</tt></b>
</dt>
<dd>
<p>(F) The brackets around a character class must match.  If you wish to
include a closing bracket in a character class, backslash it or put it
first.</p>
</dd>


<dt>
<b><tt class="literal">Unquoted string "</tt><em class="replaceable">%s</em><tt class="literal">" may clash with future reserved word</tt></b>
</dt>
<dd>
<p>(W reserved) You used a bareword that might someday be claimed as a
reserved word.  It's best to put such a word in quotes, or capitalize
it somehow, or insert an underbar into it.  You might also declare it
as a subroutine.</p>
</dd>


<dt>
<b><tt class="literal">Unrecognized character</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) The Perl parser has no idea what to do with the specified character
in your Perl script (or <tt class="literal">eval</tt>).  Perhaps you tried to run a compressed
script, a binary program, or a directory as a Perl program.</p>
</dd>


<dt>
<b><tt class="literal">Unrecognized escape \\%c passed through</tt></b>
</dt>
<dd>
<p>(W misc) You used a backslash-character combination that is not recognized
by Perl.</p>
</dd>


<dt>
<b><tt class="literal">Unrecognized signal name "</tt><em class="replaceable">%s</em><tt class="literal">"</tt></b>
</dt>
<dd>
<p>(F) You specified a signal name to the <tt class="literal">kill</tt> function that was not
recognized.  Say <tt class="command">kill -l</tt> in your shell to see the valid signal
names on your system.</p>
</dd>


<dt>
<b><tt class="literal">Unrecognized switch: -</tt><em class="replaceable">%s</em>  <tt class="literal">(-h will show valid options)</tt></b>
</dt>
<dd>
<p>(F) You specified an illegal option to Perl.  Don't do that.
(If you think you didn't do that, check the <tt class="literal">#!</tt> line to see if it's
supplying the bad switch on your behalf.)</p>
</dd>


<dt>
<b><tt class="literal">Unsuccessful</tt> <em class="replaceable">%s</em> <tt class="literal">on filename containing newline</tt></b>
</dt>
<dd>
<p>(W newline) A file operation was attempted on a filename, and that operation
failed, probably because the filename contained a newline, probably
because you forgot to <tt class="literal">chop</tt> or <tt class="literal">chomp</tt> it off.</p>
</dd>


<dt>
<b><tt class="literal">Unsupported directory function "</tt><em class="replaceable">%s</em><tt class="literal">" called</tt></b>
</dt>
<dd>
<p>(F) Your machine doesn't support <tt class="literal">opendir</tt> and <tt class="literal">readdir</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Unsupported function fork</tt></b>
</dt>
<dd>
<p>(F) Your version of executable does not support forking.</p>

<p>Note that under some systems, like OS/2, there may be different flavors of
Perl executables, some of which may support <tt class="literal">fork</tt>, some not. Try changing
the name you call Perl by to <tt class="literal">perl_</tt>, <tt class="literal">perl__</tt>, and so on.</p>
</dd>


<dt>
<b><tt class="literal">Unsupported function</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) This machine doesn't implement the indicated function, apparently. At least, <em class="emphasis">Configure</em> doesn't think so.</p>
</dd>


<dt>
<b><tt class="literal">Unsupported socket function "</tt><em class="replaceable">%s</em><tt class="literal">" called</tt></b>
</dt>
<dd>
<p>(F) Your machine doesn't support the Berkeley socket mechanism, or at
least that's what <em class="emphasis">Configure</em> thought.</p>
</dd>


<dt>
<b><tt class="literal">Unterminated &lt;&gt; operator</tt></b>
</dt>
<dd>
<p>(F) The lexer saw a left angle bracket in a place where it was expecting
a term, so it's looking for the corresponding right angle bracket and not
finding it.  Chances are you left some needed parentheses out earlier in
the line, and you really meant a <tt class="literal">&lt;</tt> symbol.</p>
</dd>


<dt>
<b><tt class="literal">Unterminated attribute parameter in attribute list</tt></b>
</dt>
<dd>
<p>(F) The lexer saw an opening (left) parenthesis character while parsing an
attribute list, but the matching closing (right) parenthesis
character was not found.  You may need to add (or remove) a backslash
character to get your parentheses to balance.</p>
</dd>


<dt>
<b><tt class="literal">Unterminated attribute list</tt></b>
</dt>
<dd>
<p>(F) The lexer found something other than a simple identifier at the start
of an attribute, and it wasn't a semicolon or the start of a
block.  Perhaps you terminated the parameter list of the previous attribute
too soon.</p>
</dd>


<dt>
<b><tt class="literal">Use of $# is deprecated</tt></b>
</dt>
<dd>
<p>(D deprecated) This was an ill-advised attempt to emulate a poorly
defined <em class="emphasis">awk</em> feature.  Use an explicit <tt class="literal">printf</tt> or <tt class="literal">sprintf</tt>
instead.</p>
</dd>


<dt>
<b><tt class="literal">Use of $* is deprecated</tt></b>
</dt>
<dd>
<p>(D deprecated) This variable magically activated multiline pattern
matching, both for you and for any luckless subroutine that you happen
to call.  You should use the <tt class="literal">//m</tt> and <tt class="literal">//s</tt> modifiers now to do
that without the dangerous action-at-a-distance effects of <tt class="literal">$*</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Use of</tt> <em class="replaceable">%s</em> <tt class="literal">in printf format not supported</tt></b>
</dt>
<dd>
<p>(F) You attempted to use a feature of <tt class="literal">printf</tt> that is accessible from
only C.  This usually means there's a better way to do it in Perl.</p>
</dd>


<dt>
<b><tt class="literal">Use of bare &lt;&lt; to mean &lt;&lt;"" is deprecated</tt></b>
</dt>
<dd>
<p>(D deprecated) You are now encouraged to use the explicitly quoted
form if you wish to use an empty line as the terminator of the
here document.</p>
</dd>


<dt>
<b><tt class="literal">Use of implicit split to @_ is deprecated</tt></b>
</dt>
<dd>
<p>(D deprecated) You make a lot of work for the compiler when you clobber a
subroutine's argument list, so it's better to assign the results of
a <tt class="literal">split</tt> explicitly to an array (or list).</p>
</dd>


<dt>
<b><tt class="literal">Use of inherited AUTOLOAD for non-method</tt> <em class="replaceable">%s</em><tt class="literal">() is deprecated</tt></b>
</dt>
<dd>
<p>(D deprecated) As an (ahem) accidental feature, <tt class="literal">AUTOLOAD</tt> subroutines were
looked up as methods (using the <tt class="literal">@ISA</tt> hierarchy) even when the subroutines
to be autoloaded were called as plain functions (e.g., <tt class="literal">Foo::bar()</tt>),
not as methods (e.g., <tt class="literal">Foo-&gt;bar()</tt> or <tt class="literal">$obj-&gt;bar()</tt>).</p>

<p>This bug was rectified in Perl 5.005, which used method lookup only
for methods' <tt class="literal">AUTOLOAD</tt>s.  However, a significant base of
existing code may be using the old behavior.  So, as an interim
step, Perl 5.004 issued this optional warning when nonmethods used
inherited <tt class="literal">AUTOLOAD</tt>s.</p>

<p>The simple rule is this: inheritance will not work when autoloading
nonmethods.  The simple fix for old code is this: in any module that used to
depend on inheriting <tt class="literal">AUTOLOAD</tt> for nonmethods from a base class named
<tt class="literal">BaseClass</tt>, execute <tt class="literal">*AUTOLOAD = \&amp;BaseClass::AUTOLOAD</tt> during startup.</p>

<p>In code that currently says <tt class="literal">use AutoLoader; @ISA = qw(AutoLoader);</tt>, you
should remove <tt class="literal">AutoLoader</tt> from <tt class="literal">@ISA</tt> and change <tt class="literal">use AutoLoader;</tt> to
<tt class="literal">use AutoLoader 'AUTOLOAD';</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Use of reserved word "</tt><em class="replaceable">%s</em><tt class="literal">" is deprecated</tt></b>
</dt>
<dd>
<p>(D deprecated) The indicated bareword is a reserved word.  Future
versions of Perl may use it as a keyword, so you're better off either
explicitly quoting the word in a manner appropriate for its context of
use, or using a different name altogether.  The warning can be
suppressed for subroutine names by either adding an <tt class="literal">&amp;</tt> prefix or
using a package qualifier, e.g., <tt class="literal">&amp;our()</tt> or <tt class="literal">Foo::our()</tt>.</p>
</dd>


<dt>
<b><tt class="literal">Use of</tt> <em class="replaceable">%s</em> <tt class="literal">is deprecated</tt></b>
</dt>
<dd>
<p>(D deprecated) The construct indicated is no longer recommended,
generally because there's a better way to do it, and also because the
old way has bad side effects.</p>
</dd>


<dt>
<b><tt class="literal">Use of uninitialized value</tt><em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W uninitialized) An undefined value was used as if it were already
defined.  It was interpreted as a <tt class="literal">""</tt> or a <tt class="literal">0</tt>, but maybe it was a
mistake.  To suppress this warning assign a defined value to your
variables.</p>
</dd>


<dt>
<b><tt class="literal">Useless use of "re" pragma</tt></b>
</dt>
<dd>
<p>(W) You did a <tt class="literal">use re</tt> without any arguments.  That isn't very useful.</p>
</dd>


<dt>
<b><tt class="literal">Useless use of</tt> <em class="replaceable">%s</em> <tt class="literal">in void context</tt></b>
</dt>
<dd>
<p>(W void) You did something without a side effect in a context that
does nothing with the return value, such as a statement that doesn't
return a value from a block or the left side of a scalar comma
operator.  For example, you'd get this if you mixed up your C
precedence with Python precedence and said:
<blockquote>
<pre class="programlisting">$one, $two = 1, 2;</pre>
</blockquote>

when you meant to say:
<blockquote>
<pre class="programlisting">($one, $two) = (1, 2);</pre>
</blockquote>

Another common error is using ordinary parentheses to construct a list
reference when you should be using square or curly brackets, for
example, if you say:
<blockquote>
<pre class="programlisting">$array = (1,2);</pre>
</blockquote>

when you should have said:
<blockquote>
<pre class="programlisting">$array = [1,2];</pre>
</blockquote>

The square brackets explicitly turn a list value into a scalar value,
while parentheses do not.  So when a parenthesized list is evaluated
in a scalar context, the comma is treated like C's comma operator,
which throws away the left argument, which is not what you want.</p>
</dd>


<dt>
<b><tt class="literal">untie attempted while</tt> <em class="replaceable">%d</em> <tt class="literal">inner references still exist</tt></b>
</dt>
<dd>
<p>(W untie) A copy of the object returned from <tt class="literal">tie</tt> (or <tt class="literal">tied</tt>) was still
valid when <tt class="literal">untie</tt> was called.</p>
</dd>


<dt>
<b><tt class="literal">Value of</tt> <em class="replaceable">%s</em> <tt class="literal">can be "0"; test with defined()</tt></b>
</dt>
<dd>
<p>(W misc) In a conditional expression, you used <tt class="literal">&lt;HANDLE&gt;</tt>, 
<tt class="literal">&lt;*&gt;</tt> (glob), <tt class="literal">each</tt>, or <tt class="literal">readdir</tt> as a Boolean value.  Each of
these constructs can return a value of <tt class="literal">"0"</tt>; that would make the
conditional expression false, which is probably not what you intended. When using these constructs in conditional expressions, test their
values with the <tt class="literal">defined</tt> operator.</p>
</dd>


<dt>
<b><tt class="literal">Value of CLI symbol "</tt><em class="replaceable">%s</em><tt class="literal">" too long</tt></b>
</dt>
<dd>
<p>(W misc) This is a warning peculiar to VMS.  Perl tried to read the value of
an <tt class="literal">%ENV</tt> element from a CLI symbol table and found a resultant
string longer than 1,024 characters.  The return value has been
truncated to 1,024 characters.</p>
</dd>


<dt>
<b><tt class="literal">Variable "</tt><em class="replaceable">%s</em><tt class="literal">" is not imported</tt><em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(F) While <tt class="literal">use strict</tt> in effect, you referred to a global variable
that you apparently thought was imported from another module, because
something else of the same name (usually a subroutine) is exported
by that module.  It usually means you put the wrong funny character
on the front of your variable.</p>
</dd>


<dt>
<b><tt class="literal">Variable "</tt><em class="replaceable">%s</em><tt class="literal">" may be unavailable</tt></b>
</dt>
<dd>
<p>(W closure) An inner (nested) <em class="emphasis">anonymous</em> subroutine is inside a <em class="emphasis">named</em>
subroutine, and outside that is another subroutine; and the anonymous
(innermost) subroutine is referencing a lexical variable defined in
the outermost subroutine.  For example:
<blockquote>
<pre class="programlisting">sub outermost { my $a; sub middle { sub { $a } } }</pre>
</blockquote>

If the anonymous subroutine is called or referenced (directly or
indirectly) from the outermost subroutine, it will share the variable
as you would expect.  But if the anonymous subroutine is called or
referenced when the outermost subroutine is not active, it will see
the value of the shared variable as it was before and during the
<em class="emphasis">first</em> call to the outermost subroutine, which is probably not what
you want.</p>

<p>In these circumstances, it is usually best to make the middle
subroutine anonymous, using the <tt class="literal">sub {}</tt> syntax.  Perl has specific
support for shared variables in nested anonymous subroutines; a named
subroutine in between interferes with this feature.</p>
</dd>


<dt>
<b><tt class="literal">Variable "</tt><em class="replaceable">%s</em><tt class="literal">" will not stay shared</tt></b>
</dt>
<dd>
<p>(W closure) An inner (nested) <em class="emphasis">named</em> subroutine is referencing a lexical
variable defined in an outer subroutine.</p>

<p>When the inner subroutine is called, it will probably see the value of
the outer subroutine's variable as it was before and during the
<em class="emphasis">first</em> call to the outer subroutine; in this case, after the first
call to the outer subroutine is complete, the inner and outer
subroutines will no longer share a common value for the variable.  In
other words, the variable will no longer be shared.</p>

<p>Furthermore, if the outer subroutine is anonymous and references a
lexical variable outside itself, then the outer and inner subroutines
will <em class="emphasis">never</em> share the given variable.</p>

<p>This problem can usually be solved by making the inner subroutine
anonymous, using the <tt class="literal">sub {}</tt> syntax.  When inner anonymous subs that
reference variables in outer subroutines are called or referenced,
they are automatically rebound to the current values of such
variables.</p>
</dd>


<dt>
<b><tt class="literal">Variable syntax</tt></b>
</dt>
<dd>
<p>(A) You've accidentally run your script through <em class="emphasis">csh</em> instead
of Perl.  Check the <tt class="literal">#!</tt> line, or manually feed your script into
Perl yourself.</p>
</dd>


<dt>
<b><tt class="literal">Version number must be a constant number</tt></b>
</dt>
<dd>
<p>(P) The attempt to translate a <em class="replaceable">use Module n.n LIST</em> statement into
its equivalent <tt class="literal">BEGIN</tt> block found an internal inconsistency with
the version number.</p>
</dd>


<dt>
<b><tt class="literal">perl: warning: Setting locale failed.</tt></b>
</dt>
<dd>
<p>(S) The whole warning message will look something like:
<blockquote>
<pre class="programlisting">perl: warning: Setting locale failed.
    perl: warning: Please check that your locale settings:
            LC_ALL = "En_US",
            LANG = (unset)
        are supported and installed on your system.
    perl: warning: Falling back to the standard locale ("C").</pre>
</blockquote>

(Which locale settings failed will vary.)  This error means that Perl
detected that you or your system administrator have set up the
so-called variable system but Perl could not use those settings.  This
was not dead serious, fortunately: there is a "default locale" called
"C" that Perl can and will use, so the script will be run.  Before you
really fix the problem, however, you will get the same error message
each time you run Perl.  How to really fix the problem can be found in
<em class="emphasis">perllocale</em>(1), under the section "Locale Problems".</p>
</dd>


<dt>
<b><tt class="literal">Warning: something's wrong</tt></b>
</dt>
<dd>
<p>(W) You passed <tt class="literal">warn</tt> an empty string (the equivalent of <tt class="literal">warn ""</tt>), or
you called it with no arguments and <tt class="literal">$_</tt> was empty.</p>
</dd>


<dt>
<b><tt class="literal">Warning: unable to close filehandle</tt> <em class="replaceable">%s</em> <tt class="literal">properly</tt></b>
</dt>
<dd>
<p>(S) The implicit <tt class="literal">close</tt> done by an <tt class="literal">open</tt> got an error indication on the
<tt class="literal">close</tt>.  This usually indicates your filesystem ran out of disk space.</p>
</dd>


<dt>
<b><tt class="literal">Warning: Use of "</tt><em class="replaceable">%s</em><tt class="literal">" without parentheses is ambiguous</tt></b>
</dt>
<dd>
<p>(S ambiguous) You wrote a unary operator followed by something that
looks like a binary operator but could also be interpreted as
a term or unary operator.  For instance, if you know that the <tt class="literal">rand</tt>
function has a default argument of <tt class="literal">1.0</tt>, and you write:
<blockquote>
<pre class="programlisting">rand + 5;</pre>
</blockquote>

you may <em class="emphasis">think</em> you wrote the same thing as:
<blockquote>
<pre class="programlisting">rand() + 5;</pre>
</blockquote>

but in actual fact, you got:
<blockquote>
<pre class="programlisting">rand(+5);</pre>
</blockquote>

So use parentheses to say what you really mean.</p>
</dd>


<dt>
<b><tt class="literal">write() on closed filehandle</tt> <em class="replaceable">%s</em></b>
</dt>
<dd>
<p>(W closed) The filehandle you're writing to got itself closed sometime
before now.  Check your logic flow.</p>
</dd>


<dt>
<b><tt class="literal">X outside of string</tt></b>
</dt>
<dd>
<p>(F) You had a <tt class="literal">pack</tt> template that specified a relative position before
the beginning of the string being unpacked.</p>
</dd>


<dt>
<b><tt class="literal">x outside of string</tt></b>
</dt>
<dd>
<p>(F) You had a <tt class="literal">pack</tt> template that specified a relative position after
the end of the string being unpacked.</p>
</dd>


<dt>
<b><tt class="literal">Xsub "</tt><em class="replaceable">%s</em><tt class="literal">" called in sort</tt></b>
</dt>
<dd>
<p>(F) The use of an external subroutine as a sort comparison is not yet
supported.</p>
</dd>


<dt>
<b><tt class="literal">Xsub called in sort</tt></b>
</dt>
<dd>
<p>(F) The use of an external subroutine as a sort comparison is not yet
supported.</p>
</dd>


<dt>
<b><tt class="literal">You can't use -l on a filehandle</tt></b>
</dt>
<dd>
<p>(F) A filehandle represents an opened file, and when you opened the file, it
already went past any symlink you are presumably trying to look for. Use a filename instead.</p>
</dd>


<dt>
<b><tt class="literal">YOU HAVEN'T DISABLED SET-ID SCRIPTS IN THE KERNEL YET!</tt></b>
</dt>
<dd>
<p>(F) And you probably never will, because you probably don't have the
sources to your kernel, and your vendor probably doesn't give a rip
about what you want.  Your best bet is to put a setuid C wrapper
around your script with the <em class="emphasis">wrapsuid</em> script in the <tt class="literal">eg</tt> directory
of the Perl distribution.</p>
</dd>


<dt>
<b><tt class="literal">You need to quote "</tt><em class="replaceable">%s</em><tt class="literal">"</tt></b>
</dt>
<dd>
<p>(W syntax) You assigned a bareword as a signal handler name. Unfortunately, you already have a subroutine of that name declared,
which means that Perl 5 will try to call the subroutine when the
assignment is executed, which is probably not what you want.  (If it
<em class="emphasis">is</em> what you want, put an <tt class="literal">&amp;</tt> in front.)</p>
</dd>

</dl>


<!-- BOTTOM NAV BAR -->

<hr width="515" align="left">
<div class="navbar">
<table width="515" border="0">
<tr>
<td align="left" valign="top" width="172"><a href="ch32_47.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="171"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="172"></td>
</tr>
<tr>
<td align="left" valign="top" width="172">32.47. User::pwent</td><td align="center" valign="top" width="171"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="172"></td>
</tr>
</table>
</div>
<hr width="515" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="2,-1,79,99" href="../index.htm"><area shape="rect" coords="84,1,157,108" href="../perlnut/index.htm"><area shape="rect" coords="162,2,248,125" href="../prog3/index.htm"><area shape="rect" coords="253,2,326,130" href="../advprog/index.htm"><area shape="rect" coords="332,1,407,112" href="../cookbook/index.htm"><area shape="rect" coords="414,2,523,103" href="../sysadmin/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>


<br>


<table border=0 align=center>
<tr><td>


<script type="text/javascript"><!--
google_ad_client = "pub-0321943928525350";
/* 468x60, main footer */
google_ad_slot = "1100896219";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>

<script>
user = "2823";
page = "2";

</script>



</td>
<td>

<!-- Ukrainian Banner Network 468x60 START -->
<center>
<script>
//<!--
user = "2823";
page = "2";
pid = Math.round((Math.random() * (10000000 - 1)));
document.write("<iframe src='http://banner.kiev.ua/cgi-bin/bi.cgi?h" +
user + "&amp;"+ pid + "&amp;" + page + "' frameborder=0 vspace=0 hspace=0 " +
" width=468 height=60 marginwidth=0 marginheight=0 scrolling=no>");
document.write("<a href='http://banner.kiev.ua/cgi-bin/bg.cgi?" +
user + "&amp;"+ pid + "&amp;" + page + "' target=_top>");
document.write("<img border=0 src='http://banner.kiev.ua/" +
"cgi-bin/bi.cgi?i" + user + "&amp;" + pid + "&amp;" + page +
"' width=468 height=60 alt='хЛТБЙОУЛБС вБООЕТОБС уЕФШ'></a>");
document.write("</iframe>");
//-->
</script>
</center>
<!-- Ukrainian Banner Network 468x60 END -->


</td></tr>
<tr><td colspan=2>
<br>
<hr size=1>



<!-- SpyLOG -->
<script src="http://tools.spylog.ru/counter_cv.js" id="spylog_code" type="text/javascript" counter="1028713" part="docs" track_links="ext" page_level="0">
</script>
<noscript>
<a href="http://u10287.13.spylog.com/cnt?cid=1028713&f=3&p=0" target="_blank">
<img src="http://u10287.13.spylog.com/cnt?cid=1028713&p=0" alt="SpyLOG" border="0" width="88" height="31"></a>
</noscript>
<!--/ SpyLOG -->

<!--bigmir)net TOP 100-->
<script type="text/javascript" language="javascript"><!--
function BM_Draw(oBM_STAT){
document.write('<table cellpadding="0" cellspacing="0" border="0" style="display:inline;margin-right:4px;"><tr><td><div style="margin:0px;padding:0px;font-size:1px;width:88px;"><div style="background:url(\'http://i.bigmir.net/cnt/samples/diagonal/b59_top.gif\') no-repeat bottom;">&nbsp;</div><div style="font:10px Tahoma;background:url(\'http://i.bigmir.net/cnt/samples/diagonal/b59_center.gif\');"><div style="text-align:center;"><a href="http://www.bigmir.net/" target="_blank" style="color:#0000ab;text-decoration:none;font:10px Tahoma;">bigmir<span style="color:#ff0000;">)</span>net</a></div><div style="margin-top:3px;padding: 0px 6px 0px 6px;color:#003596;"><div style="float:left;font:10px Tahoma;">'+oBM_STAT.hosts+'</div><div style="float:right;font:10px Tahoma;">'+oBM_STAT.hits+'</div></div><br clear="all"/></div><div style="background:url(\'http://i.bigmir.net/cnt/samples/diagonal/b59_bottom.gif\') no-repeat top;">&nbsp;</div></div></td></tr></table>');
}
//-->
</script>

<script type="text/javascript" language="javascript"><!--
bmN=navigator,bmD=document,bmD.cookie='b=b',i=0,bs=[],bm={o:1,v:126595,s:126595,t:0,c:bmD.cookie?1:0,n:Math.round((Math.random()* 1000000)),w:0};
for(var f=self;f!=f.parent;f=f.parent)bm.w++;
try{if(bmN.plugins&&bmN.mimeTypes.length&&(x=bmN.plugins['Shockwave Flash']))bm.m=parseInt(x.description.replace(/([a-zA-Z]|s)+/,''));
else for(var f=3;f<20;f++)if(eval('new ActiveXObject("ShockwaveFlash.ShockwaveFlash.'+f+'")'))bm.m=f}catch(e){;}
try{bm.y=bmN.javaEnabled()?1:0}catch(e){;}
try{bmS=screen;bm.v^=bm.d=bmS.colorDepth||bmS.pixelDepth;bm.v^=bm.r=bmS.width}catch(e){;}
r=bmD.referrer.slice(7);if(r&&r.split('/')[0]!=window.location.host){bm.f=escape(r);bm.v^=r.length}
bm.v^=window.location.href.length;for(var x in bm) if(/^[ovstcnwmydrf]$/.test(x)) bs[i++]=x+bm[x];
bmD.write('<sc'+'ript type="text/javascript" language="javascript" src="http://c.bigmir.net/?'+bs.join('&')+'"></sc'+'ript>');
//-->
</script>
<noscript>
<a href="http://www.bigmir.net/" target="_blank"><img src="http://c.bigmir.net/?v126595&s126595&t2" width="88" height="31" alt="bigmir)net TOP 100" title="bigmir)net TOP 100" border="0" /></a>
</noscript>
<!--bigmir)net TOP 100-->

<!--begin of Rambler's Top100 code -->
<a href="http://top100.rambler.ru/top100/">
<img src="http://counter.rambler.ru/top100.cnt?692798" alt="" width=1 height=1 border=0></a>
<!--end of Top100 code-->

<!--begin of Top100 logo-->
<a href="http://top100.rambler.ru/top100/">
<img src="http://top100-images.rambler.ru/top100/w1.gif" alt="Rambler's Top100" width=88 height=31 
border=0></a>
<!--end of Top100 logo -->


<!-- hit.ua -->
<a href='http://hit.ua/?x=3601' target='_blank'>
<script language="javascript" type="text/javascript"><!--
Cd=document;Cr="&"+Math.random();Cp="&s=1";
Cd.cookie="b=b";if(Cd.cookie)Cp+="&c=1";
Cp+="&t="+(new Date()).getTimezoneOffset();
if(self!=top)Cp+="&f=1";
//--></script>
<script language="javascript1.1" type="text/javascript"><!--
if(navigator.javaEnabled())Cp+="&j=1";
//--></script>
<script language="javascript1.2" type="text/javascript"><!--
if(typeof(screen)!='undefined')Cp+="&w="+screen.width+"&h="+
screen.height+"&d="+(screen.colorDepth?screen.colorDepth:screen.pixelDepth);
//--></script>
<script language="javascript" type="text/javascript"><!--
Cd.write("<img src='http://c.hit.ua/hit?i=3601&g=0&x=1"+Cp+Cr+
"&r="+escape(Cd.referrer)+"&u="+escape(window.location.href)+
"' border='0' width='88' height='31' "+
"alt='hit.ua: сейчас на сайте, посетителей и просмотров за сегодня' title='hit.ua: сейчас на сайте, посетителей и просмотров за сегодня'/>");
//--></script>
<noscript>
<img src='http://c.hit.ua/hit?i=3601&amp;g=0&amp;x=1' border='0' width='88' height='31' alt='hit.ua: сейчас на сайте, посетителей и просмотров за сегодня' title='hit.ua: сейчас на сайте, посетителей и просмотров за сегодня'/>
</noscript></a>
<!-- / hit.ua -->

<script language="javascript">//<!--
mtI="012408140822";mtG="45";mtT="4";mtS='http://012408140822.c.mystat-in.net/?';
mtD=document;mtN=navigator.appName;mtR=escape(mtD.referrer);
mtW="";mtC="";mtV="0";mtJ="1";
//--></script><script language="javascript1.1">//<!--
mtV="1";mtJ = (navigator.javaEnabled()?"1":"0");
//--></script><script language="javascript1.2">//<!--
mtE=screen;mtW=mtE.width;mtN!="Netscape"?mtC=mtE.colorDepth:mtC=mtE.pixelDepth;mtV="2";
//--></script><script language="javascript1.3">//<!--
mtV="3";
//--></script><script language="javascript">//<!--
mtUrl="";mtUrl+="\""+mtS+"i"+mtI+"&t"+mtT+"&g"+mtG+"&w"+mtW+"&c"+mtC+"&r"+mtR+"&v"+mtV+"&j"+mtJ+"\"";
mtUrl="<a href=http://mytop-in.net/ target=_blank><img src="+mtUrl+"width=88 height=31 border=0 alt=\"Rated by MyTOP\"></a>";
mtD.write(mtUrl);
//--></script>
<noscript>
<a href=http://mytop-in.net/ target=_blank><img src=http://012408140822.c.mystat-in.net/?i012408140822&t4&g45&j0 width=88 height=31 border=0 alt="Rated by MyTOP"></a>
</noscript>

<!--Rating@Mail.ru COUNTEr--><script language="JavaScript" type="text/javascript"><!--
d=document;var a='';a+=';r='+escape(d.referrer)
js=10//--></script><script language="JavaScript1.1" type="text/javascript"><!--
a+=';j='+navigator.javaEnabled()
js=11//--></script><script language="JavaScript1.2" type="text/javascript"><!--
s=screen;a+=';s='+s.width+'*'+s.height
a+=';d='+(s.colorDepth?s.colorDepth:s.pixelDepth)
js=12//--></script><script language="JavaScript1.3" type="text/javascript"><!--
js=13//--></script><script language="JavaScript" type="text/javascript"><!--
d.write('<a href="http://top.mail.ru/jump?from=1374183"'+
' target=_top><img src="http://d7.cf.b4.a1.top.list.ru/counter'+
'?id=1374183;t=48;js='+js+a+';rand='+Math.random()+
'" alt="Рейтинг@Mail.ru"'+' border=0 height=31 width=88/><\/a>')
if(11<js)d.write('<'+'!-- ')//--></script><noscript><a
target=_top href="http://top.mail.ru/jump?from=1374183"><img
src="http://d7.cf.b4.a1.top.list.ru/counter?js=na;id=1374183;t=48"
border=0 height=31 width=88
alt="Рейтинг@Mail.ru"/></a></noscript><script language="JavaScript" type="text/javascript"><!--
if(11<js)d.write('--'+'>')//--></script><!--/COUNTER-->

<!-- I.UA counter --><a href="http://www.i.ua/" target="_blank" onclick="this.href='http://i.ua/r.php?21595';" title="Rated by I.UA">
<script type="text/javascript" language="javascript"><!--
iS='<img src="http://r.i.ua/s?u21595&p66&n'+Math.random();
iD=document;iD.cookie="iua=1";if(iD.cookie)iS+='&c1';
iS+='&d'+(screen.colorDepth?screen.colorDepth:screen.pixelDepth)
+"&w"+screen.width+'&h'+screen.height
iT=iD.referrer.slice(7);iH=window.location.href.slice(7);
((iI=iT.indexOf('/'))!=-1)?(iT=iT.substring(0,iI)):(iI=iT.length);
if(iT!=iH.substring(0,iI))iS+='&f'+escape(iD.referrer.slice(7))
iS+='&r'+escape(iH);
iD.write(iS+'" border="0" width="88" height="31" />');
//--></script></a><!-- End of I.UA counter -->

<script type="text/javascript">
<!--
Nnv=navigator;Nna=Nnv.appName;Nd=document;Nd.cookie="b=b";Nc=0;if(Nd.cookie)Nc=1;
Nn=(Nna.substring(0,2)=="Mi")?0:1;Ns=screen;Npx=(Nn==0)?Ns.colorDepth:Ns.pixelDepth;
str='<img src="http://c.uarating.com/199;'+Ns.width+'x'+Ns.height+';'+Npx+';'+Nc+';';
str=str+escape(Nd.referrer)+';'+Math.random()+'" width="88" height="31" border="0">';
document.write('<a href="http://www.uarating.com/" alt="uaRating" target="_blank">'+str+'<\/a>');
// -->
</script>
<noscript><a href="http://www.uarating.com/" target="_blank"><img src="http://c.uarating.com/199;0x0;0;0;-;0" alt="uaRating" width="88" height="31" border="0"></a></noscript>


</td></tr>
</table>


</body>
</html>