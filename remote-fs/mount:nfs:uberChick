#!/bin/tcsh -f
set lan_ip_1="192";
set wifi_id_1="${lan_ip_1}"
set lan_ip_2="168";
set wifi_id_2="${lan_ip_2}"
set lan_ip_3="0";
set wifi_id_3="${lan_ip_3}"
set lan_ip_4="8";
set wifi_id_1="4"
set server="${lan_ip_1}.${lan_ip_2}.${lan_ip_3}.${lan_ip_4}";
set shares=( "art" "art/games" "art/media" "art/www" "projects" "projects/gtk" "projects/cli" "projects/references" "media" "media/library" "media/podcasts" "media/podiobooks" "media/music" "media/videos" "media/torrents" "uberChick" "programs" "profile.d" "srv" );

next_mount:
while( ${?1} && "${1}" != "" )
	set dashes="`printf "\""${1}"\"" | sed -r 's/([\-]{1,2})([^=]+)=?['\''"\""]?(.*)['\''"\""]?/\1/'`";
	set option="`printf "\""${1}"\"" | sed -r 's/([\-]{1,2})([^=]+)=?['\''"\""]?(.*)['\''"\""]?/\2/'`";
	set value="`printf "\""${1}"\"" | sed -r 's/([\-]{1,2})([^=]+)=?['\''"\""]?(.*)['\''"\""]?/\3/'`";
	switch( ${option} )
	case "via-lan":
		set server="${lan_ip_1}.${lan_ip_2}.${lan_ip_3}.${lan_ip_4}";
		breaksw;
	
	case "via-wifi":
		set server="${wifi_ip_1}.${wifi_ip_2}.${wifi_ip_3}.${wifi_ip_4}";
		breaksw;
	
	case "use-ip":
	case "via-ip":
	case "ip":
		set ip_1="`printf '%s' '${value}' | sed -r 's/^([0-9]{1,3}\.)?([0-9]{1,3}\.)([0-9]{1,3}\.)([0-9]{1,3}))"\$"/\1/'`";
		if(!( "${ip_1}" != "${value}" && "${ip_1}" != "" )) set ip_1="${lan_ip_1}.";
		
		set ip_2"`printf '%s' '${value}' | sed -r 's/^([0-9]{1,3}\.)?([0-9]{1,3}\.)?([0-9]{1,3}\.)([0-9]{1,3}))"\$"/\2/'`";
		if(!( "${ip_2}" != "${value}" && "${ip_2}" != "" )) set ip_2="${lan_ip_2}.";
		
		set ip_3="`printf '%s' '${value}' | sed -r 's/^([0-9]{1,3}\.)?([0-9]{1,3}\.)([0-9]{1,3}\.)([0-9]{1,3}))"\$"/\3/'`";
		if(!( "${ip_3}" != "${value}" && "${ip_3}" != "" )) set ip_3="${lan_ip_3}.";
		
		set ip_4="`printf '%s' '${value}' | sed -r 's/^([0-9]{1,3}\.)?([0-9]{1,3}\.)?([0-9]{1,3}\.)?([0-9]{1,3}))"\$"/\4/'`";
		if(!( "${ip_4}" != "${value}" && "${ip_4}" != "" )) set ip_4="${lan_ip_4}";
		
		set server="${ip_1}${ip_2}${ip_3}${ip_4}";
		breaksw;
	case "mount":
		set action="mount";
		set to_or_from="to";
		breaksw;
	
	case "umount":
		set action="umount";
		set to_or_from="from";
		breaksw;
	
	case "help":
		goto usage;
		breaksw;
	
	case "server":
		set server="${value}";
		breaksw;
	
	default:
		if(! ${?action} ) then
			if(! ${?help_displayed} ) goto usage
		endif
		set single_mount="${1}";
		shift;
		goto mount_shares;
		breaksw;
	endsw
	shift;
end

mount_shares:
if(! ${?action} ) then
	if(! ${?help_displayed} ) goto usage
endif

set use_sudo="";
if( "${uid}" != "0" ) set use_sudo="sudo";
foreach share ( ${shares} )
	if( ${?single_mount} ) then
		if( "${single_mount}" != "/${share}" && "${single_mount}" != "/${share}/nfs" ) continue;
	endif
	printf "%sing %s:/%s %s /%s/nfs\n" "${action}" "${server}" "${share}" "${to_or_from}" "${share}";
	if( "${action}" == "umount" ) then
		${use_sudo} ${action} -f "/${share}/nfs";
	else
		if(! -d "/${share}/nfs" ) then
			if(! -e "/${share}/nfs" ) then
				mkdir -p "/${share}/nfs";
			else
				printf "%s is already mounted but the connection has been terminated.\n\tAttempting remount\n" "${share}";
				@ umount_attempt=0;
				while( ! -d "/${share}/nfs" && $umount_attempt < 5 )
					@ umount_attempt++;
					${use_sudo} umount -f "${share}";
				end
			endif
		endif
		${use_sudo} ${action} -t nfs4 -o defaults,users "${server}:/${share}" "/${share}/nfs";
	endif
	if( ${?single_mount} ) then
		printf "%sing %s:%s has finished.\n" "${action}" "${server}" "${single_mount}";
		if( "${1}" != "" ) goto next_mount;
	endif
end

if( ${?single_mount} ) unset single_mount;
if( ${?script} ) unset script;
if( ${?action} ) unset action;
unset server shares share  to_or_from
exit;

usage:
set help_displayed;
set script="`basename '${0}'`";
printf "%s --mount|umount [nfs4_share...]\n" "${script}";
printf "\tBy default %s mounts all nfs4 shares.\n\t[nfs4_share] is optional.\n\tIf specified only those shares are mouted, or unmouted.\n\tAvailable shares are:\n" "${script}";
foreach share ( ${shares} )
	printf "\t\t%s:/%s on %s\n" "${server}" "${share}";
end
if(! ${?action} ) exit -1;
goto next_mount

