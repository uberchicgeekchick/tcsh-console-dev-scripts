#!/bin/tcsh -f
set exit_code=0;

while ( ${?1} && "${1}" != "" )
	switch ( "${1}" )
	case "--help":
		goto usage;
		breaksw
	endsw
end

init_sync:
set sync_method="sshfs";
set project_name = "`basename '${cwd}'`";
set sshfs_path = "/projects/ssh";
set ssh_user = "dreams";
set ssh_server = "sky.ocssolutions.com";


run_sync:
switch( "${sync_method}" )
case "rsync":
	rsync -r --verbose ./* "${ssh_user}@${ssh_server}:/home/${ssh_user}/${project_name}";
	breaksw;

case "scp":
	scp -rv ./* "${ssh_user}@${ssh_server}:/home/${ssh_user}/${project_name}";
	breaksw;

case "sshfs":
	if( `mount | grep "${sshfs_path}"` == "" ) then
		sshfs "${ssh_user}@${ssh_server}:/home/${ssh_user}" "${sshfs_path}";
	endif
case "cp":
	if( ! -d "${sshfs_path}/${project_name}" ) then
		printf "I couldn't find your project: '%s' in your sshfs path: '%s'\nEither your project doesn't exist on your sshfs or ssh isn't mounted\n", ${project_name}, ${sshfs_path};
		exit;
	endif
	
	printf "\n\nI am now copying new and/or modified files.\nTo update this project's remote location.\nThis may also take several moments.\n\n";
	cp -r --verbose --update --no-dereference ./* "${sshfs_path}/${project_name}";
	printf "\t\t[done]";
	
	# cleaning up swp files that may have been copied to the remote location
	printf "\n\tI'm now removing any swap or back-up files that may have been copied.\n";
	foreach swp ( "`/usr/bin/find '${sshfs_path}/${project_name}' -iregex '.*\.\(sw.\|~\)'`" )
		rm --verbose "${swp}";
	end
	printf "\t\t[done]";
	
	# TODO: FIXME:
	# 	I really need to stop this from nuking good files, but for now `cp -u` handles more reliably w/o nuking files.
	#if( ${?skip_remote_clean_up} ) breaksw;
	# 
	## compare "${sshfs_path}/${project_name}/" against ./;
	## and remove remote files that no longer exist locally.;
	#printf "\n\nFinding all remote files to check for stale files and directories.\nPlease be patient as this may take a few moments.\n";
	#set remove_remote_regexp = "`printf "\""${sshfs_path}/${project_name}/"\"" | sed 's/\//\\\//g'`";
	#foreach remote_file ( "`/usr/bin/find "\""${sshfs_path}/${project_name}/"\""*`" )
	#	# escape special characters to keep them from being expanded by the terminal;
	#	set remote_file = "`printf '${remote_file}' | sed 's/\([\.\*\[\]()]\)/\\\1/g' | sed 's/\('\''\)/\1\\\1\1/g'`";
	#	set git_test = "`printf "\""${remote_file}"\"" | sed 's/.*\(\/\.git\).*/\1/g'`";
	#	if( "${git_test}" == "/.git" ) continue;
	#	set local_file = "`printf "\""${remote_file}"\"" | sed 's/^${remove_remote_regexp}/\.\//'`";
	#	
	#	if( -d "${local_file}" || -e "${local_file}" ) continue;
	#	
	#	printf "\t[remote] '%s' appears to be a stale " "${remote_file}";
	#	
	#	if( -d "${remote_file}" ) then
	#		printf "directory";
	#		rm -r "${remote_file}";
	#	else if( -e "${remote_file}" ) then
	#		printf "file";
	#		rm "${remote_file}";
	#	endif
	#	printf "\t[removed]\n";
	#end
	#
	#printf "\nRemoving stale remote files\t\t[done]";
	
	breaksw;
endsw

exit 0;

check_sync:
switch ( "${sync_method}" )
case "rsync":
case "scp":
case "sshfs":
case "cp":
	goto init_sync;
	breaksw;
case "no-sync":
	exit ${exit_code};
	breaksw;
default:
	printf "%s is not a supported sync method.  Valid options are:\n\trsync, scp, sshfs, cp, no-sync" "${sync_method}";
	exit -2;
	breaksw;
endsw

usage:
printf "Usage: %s\n\t--help\t Displays this message.\n\n--sync=[rsync, scp, sshfs, cp, no-sync]\tControls how files are copied or backed-up.  Especially useful for online based projects.  The project's default sync method may be set by creating a file named './.sync.default'.\n\n\t--no-pushing\tSkips git's 'remote push for this commit.\n\n--skip-remote-clean-up\tThis stops %s from comfirming that all remote files still exist locally.\nThis is specifically useful if you projects has files which use special characters.\nThe recommanded usage for this feature is to run the script 1st w/o this flag & than run a second sync using this flag.  But just an idea not a requirement or any thing.\n\n--disable-logging\tKeeps %s from preserving this commit message.\n\n--append\tappends, or re-commits, any changes using the previously logged commit message commit_message [commit_details]\n" `basename "${0}"` `basename "${0}"` `basename "${0}"`;
exit ${exit_code};

