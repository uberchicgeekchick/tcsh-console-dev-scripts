#!/bin/tcsh -f
set project_name = "`basename '${cwd}'`"

set sshfs_path = "/art/ssh"

set ssh_user = "dreams"
set ssh_server = "sky.ocssolutions.com"

if( -e "./.sync.default" ) then
	set sync_method = `cat ./.sync.default`
else
	set sync_method = "sshfs"
endif

goto check_stale

switch( "${sync_method}" )
case "rsync":
case "scp":
case "no-sync":
	exit
	breaksw

case "sshfs":
	if( `mount | grep "${sshfs_path}"` == "" ) then
		sshfs "${ssh_user}@${ssh_server}:/home/${ssh_user}" "${sshfs_path}"
	endif
case "cp":
	if( ! -d "${sshfs_path}/${project_name}" ) then
		printf "I couldn't find your project: '%s' in your sshfs path: '%s'\nEither your project doesn't exist on your sshfs or ssh isn't mounted\n", ${project_name}, ${sshfs_path}
		exit
	endif
	breaksw
endsw


printf "\n\nI am now copying new and/or modified files.\nTo update this project's remote location.\nThis may also take several moments.\n\n";
cp -r --verbose --update --no-dereference ./* "${sshfs_path}/${project_name}";
printf "\t\t[done]";

# cleaning up swp files that may have been copied to the remote location
printf "\n\tI'm now removing any swap or back-up files that may have been copied.\n";
foreach swp ( "`/usr/bin/find '${sshfs_path}/${project_name}' -iregex '.*\.\(sw.\|~\)'`" )
	rm --verbose "${swp}";
end
printf "\t\t[done]";

check_stale:
printf "\n\nFinding all remote files to check for stale files and directories.\nPlease be patient as this may take a few moments.\n"
set remove_remote_regexp = "`printf "\""${sshfs_path}/${project_name}/"\"" | sed 's/\//\\\//g'`"
foreach remote_file ( "`/usr/bin/find "\""${sshfs_path}/${project_name}/"\""`" )
	# escape special characters to keep them from being expanded by the terminal
	# set remote_file = "`printf '${remote_file}' | sed 's/\([\.\*\[\]()]\)/\\\1/g' | sed 's/\('\''\)/\1\\\1\1/g'`"

	set git_test = "`printf "\""${remote_file}"\"" | sed 's/.*\(\/\.git\).*/\1/g'`"
	if( "${git_test}" == "/.git" ) continue

	set local_file = "`printf "\""${remote_file}"\"" | sed 's/^${remove_remote_regexp}/\.\//'`"
	
	if( ! -f "${local_file}" && -f "${remote_file}" ) then
		printf "\n\nStale test failed.  Local file:\n\t%s\n[against]\nRemote file:\n\t%s\n" ${local_file} ${remote_file};
		#printf "Removing stale remote file"
		#rm "${remote_file}"
		#printf ":\n\t%s\n" "${remote_file}"
	endif
	
	if( ! -d "${local_file}" && -d "${remote_file}" ) then
		printf "Stale test failed.\n\tLocal file:\n\t%s\n[against]\nRemote file:\n\t%s\n" ${local_file} ${remote_file};
		#printf "Removing stale remote directory & contents"
		#rm -r "${remote_file}"
		#printf ":\n\t%s\n" "${remote_file}"
	endif
end
printf "\nRemoving stale remote files\t\t[done]";

printf "\n\n"

script_exit_clean:
	exit 0;

script_exit_fail:
	if( ! ${?exit_error} ) set exit_error="-1";
	exit ${exit_error};
