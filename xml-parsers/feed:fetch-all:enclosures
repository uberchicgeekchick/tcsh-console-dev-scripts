#!/usr/bin/tcsh -f
if ( "${?1}" == "0" || "${1}" == "" || "${1}" == "--help" ) then
	printf "Usage: %s [--newest|--get-first=1..10..?|--get-last=1..10..?] RSS_URI\n" `basename ${0}`;
	exit -1;
endif

set attrib = "`printf '${1}' | sed 's/\-\-\([^=]\+\)=\(.*\)/\1/g'`";
set value = "`printf '${1}' | sed 's/\-\-\([^=]\+\)=\(.*\)/\2/g'`";

switch ( "${attrib}" )
case "newest":
	shift;
	set latest_episodes = "1";
	breaksw

case "get-first":
	shift;
	set latest_episodes = "${value}";
	breaksw

case "get-last":
	shift;
	set oldest_episodes = "${value}";
	breaksw

case "regex-match-titles":
	shift;
	if ( "${value}" == "" ) breaksw
	set regex_match_titles = "${value}";
	breaksw
endsw

printf "Downloading podcast's feed.\n"
wget --quiet -O './00-feed.xml' "${1}"

printf "Finding feed's title.\n"
set title = "`/usr/bin/grep '<title.*>' './00-feed.xml' | sed 's/.*<title[^>]*>\([^<]*\)<\/title>.*/\1/gi' | head -1 | sed 's/[\r\n]//g' | sed 's/\//\ \-\ /g'`"
printf "Preparing to download: %s\n" "${title}"
if ( ! -d "${title}" ) mkdir -p "${title}"
cd "${title}"

if ( -e './00-feed.xml' && -e './00-titles.lst' && -e './00-enclosures.lst' ) goto continue_download

mv '../00-feed.xml' "./00-feed.xml"

# Concatinates all data into one single string:
ex '+1,$s/[\r\n]*//g' '+wq' './00-feed.xml' >& /dev/null

# Grabs the titles of the podcast and all episodes.
printf "Finding titles . . . this may take a few moments\t\t"
cp './00-feed.xml' './00-titles.lst'
ex '+1,$s/<\/\(item\|entry\)>/\<\/\1\>\r/ig' '+1,$s/.*<\(item\|entry\)>.*<title[^>]*>\([^<]*\)<\/title>.*\(enclosure\).*<\/\(item\|entry\)>$/\2/ig' '+1,$s/.*<\(item\|entry\)>.*<title[^>]*>\([^<]*\)<\/title>.*<\/\(item\|entry\)>[\n\r]*//ig' '+$d' '+wq' './00-titles.lst' >& /dev/null
ex '+1,$s/&\(#038\|amp\)\;/\&/ig' '+1,$s/&\(#8243\|#8217\|#8220\|#8221\|\#039\|rsquo\|lsquo\)\;/'\''/ig' '+1,$s/&[^;]\+\;[\ \t]*//ig' '+1,$s/<\!\[CDATA[\(.*\)\]\]>/\1/g' '+1,$s/#//g' '+1,$s/\//\ \-\ /g' '+wq' './00-titles.lst' >& /dev/null
printf "[done]\n"

# This will be my last update to any part of Alacast v1
# This fixes episode & chapter titles so that they will sort correctly
printf "Formating titles . . . this may take a few moments\t\t"
ex '+1,$s/\(Zero\)/0/gi' '+1,$s/\(One\)/1/gi' '+1,$s/\(Two\)/2/gi' '+1,$s/\(Three\)/3/gi' '+1,$s/\(Four\)/4/gi' '+1,$s/\(Five\)/5/gi' '+wq' './00-titles.lst' >& /dev/null
ex '+1,$s/\(Six\)/6/gi' '+1,$s/\(Seven\)/7/gi' '+1,$s/\(Eight\)/8/gi' '+1,$s/\(Nine\)/9/gi' '+1,$s/\(Ten\)/10/gi' '+wq' './00-titles.lst' >& /dev/null

ex '+1,$s/\([0-9]\)ty/\10/gi' '+1,$s/\(Fifty\)/50/gi' '+1,$s/\(Thirty\)/30/gi' '+1,$s/\(Twenty\)/20/gi' '+wq' './00-titles.lst' >& /dev/null
ex '+1,$s/\([0-9]\)teen/1\1/gi' '+1,$s/\(Fifteen\)/15/gi' '+1,$s/\(Thirteen\)/13/gi' '+1,$s/\(Twelve\)/12/gi' '+1,$s/\(Eleven\)/11/gi' '+wq' './00-titles.lst' >& /dev/null

ex '+1,$s/^\([0-9]\{1\}\)\([^0-9]\{1\}\)/0\1\2/' '+1,$s/\([^0-9]\{1\}\)\([0-9]\{1\}\)\([^0-9]\{1\}\)/\10\2\3/g' '+1,$s/\([^0-9]\{1\}\)\([0-9]\{1\}\)$/\10\2/' '+wq' './00-titles.lst' >& /dev/null

ex '+1,$s/\//\ \-\ /g' '+1,$s/\ \ /\ /g' '+wq' './00-titles.lst' >& /dev/null
printf "[done]\n"

# Grabs the enclosures from the feed.
# This 1st method only grabs one enclosure per item/entry.
printf "Finding enclosures . . . this may take a few moments\t\t"
cp '00-feed.xml' '00-enclosures-01.lst'
ex '+1,$s/<\/\(item\|entry\)>/\<\/\1\>\r/ig' '+1,$s/.*<\(item\|entry\)>.*<title[^>]*>\([^<]*\)<\/title>.*<.*enclosure[^>]*\(url\|href\)=["'\'']\([^"'\'']\+\)["'\''].*<\/\(item\|entry\)>$/\4/ig' '+1,$s/.*<\(item\|entry\)>.*<title[^>]*>\([^<]*\)<\/title>.*<\/\(item\|entry\)>[\n\r]*//ig' '+$d' '+wq' '00-enclosures-01.lst' >& /dev/null
ex '+1,$s/^[\ \s\r\n]\+//g' '+1,$s/[\ \s\r\n]\+$//g' '+1,$s/?/\\?/g' '+wq' './00-enclosures-01.lst' >& /dev/null

# This second method grabs all enclosures.
cp '00-feed.xml' '00-enclosures-02.lst'
/usr/bin/grep --perl-regex '.*<.*enclosure[^>]*>.*' './00-feed.xml' | sed 's/.*url=["'\'']\([^"'\'']\+\)["'\''].*/\1/gi' | sed 's/.*<link[^>]\+href=["'\'']\([^"'\'']\+\)["'\''].*/\1/gi' | sed 's/^\(http:\/\/\).*\(http:\/\/.*$\)/\2/gi' | sed 's/<.*>[\r\n]\+//ig' >! './00-enclosures-02.lst'
ex '+1,$s/^[\ \s\r\n]\+//g' '+1,$s/[\ \s\r\n]\+$//g' '+1,$s/?/\\?/g' '+wq' './00-enclosures-02.lst' >& /dev/null

set enclosure_count_01 = `cat "./00-enclosures-01.lst"`
set enclosure_count_02 = `cat "./00-enclosures-02.lst"`
if ( ${#enclosure_count_01} >= ${#enclosure_count_02} ) then
	mv "./00-enclosures-01.lst" "./00-enclosures.lst"
	rm "./00-enclosures-02.lst"
else
	mv "./00-enclosures-02.lst" "./00-enclosures.lst"
	rm "./00-enclosures-01.lst"
endif
printf "[done]\n"

printf "Beginning to download: %s\n" "${title}"
set episodes = ();
if ( "${?latest_episodes}" != "0" ) then
	set episodes = "`head -${latest_episodes} './00-enclosures.lst'`"
	printf "blank\n" >! './00-tmp-titles.lst'
	cat './00-titles.lst' >> './00-tmp-titles.lst'
	mv './00-tmp-titles.lst' './00-titles.lst'
	ex -s '+${latest_episodes},$d' '+wq' './00-titles.lst'
else if ( "${?oldest_episodes}" != "0" ) then
	set episodes = "`tail -${oldest_episodes} './00-enclosures.lst'`"
	printf "blank\n" >! './00-tmp-titles.lst'
	cat './00-titles.lst' >> './00-tmp-titles.lst'
	mv './00-tmp-titles.lst' './00-titles.lst'
	ex -s '+${oldest_episodes},$d' '+wq' './00-titles.lst'
else
	set episodes = "`cat './00-enclosures.lst'`"
endif

goto download_episodes

continue_download;
rm  "../00-feed.xml"
set episodes = "`cat './00-enclosures.lst'`"

download_episodes:

set download_log = "./00-"`basename "${0}"`".log"
touch "${download_log}"

printf "\n\tI have found %s episodes of:\n\t\t'%s'\n\n" "${#episodes}" "${title}"
printf "\n\tI have found %s episodes of:\n\t\t'%s'\n\n" "${#episodes}" "${title}" >! "${download_log}"

set downloaded_episodes = ();
foreach episode ( $episodes )
	set episode = `echo "${episode}" | sed 's/[\r\n]$//'`
	set episodes_filename = `basename ${episode}`
	set extension = `printf '%s' "${episodes_filename}" | sed 's/.*\.\([^.]*\)$/\1/'`
	set downloaded_episodes = ( $downloaded_episodes "" );

	set episodes_title = "`head -1 './00-titles.lst' | sed 's/[\r\n]//g' | sed 's/\?//g'`"
	if ( "${episodes_title}" == "" ) set episodes_title = `printf '%s' "${episodes_filename}" | sed 's/\(.*\)\.[^.]*$/\1/'`
	ex -s '+1d' '+wq' './00-titles.lst'

	printf "\n\n\t\tFound episode: %s\n\t\tTitle: %s\n\t\tURL: %s\n\t\t\t" "${episodes_filename}" "${episodes_title}" "${episode}" \
		;
	printf "\n\n\t\tFound episode: %s\n\t\t%s\n\t\tURL: %s\n\t\t\t" "${episodes_filename}" "${episodes_title}" "${episode}" \
	       	>> "${download_log}"

	# Skipping existing files.
	if ( -e "./${episodes_title}.${extension}" ) then
		printf "[skipping existing file]\n\n" >> "${download_log}"
		printf "[skipped existing file]\n\n"
		continue
	endif
	
	switch ( "${episodes_filename}" )
	case "theend.mp3":
	case "caughtup.mp3":
	case "caught_up_1.mp3":
		printf "[skipping podiobook.com notice]\n\n" >> "${download_log}"
		printf "[skipping podiobook.com notice]\n\n"
		continue
		breaksw
	endsw

	set is_commentary = `printf "${episodes_title}==${episodes_filename}" | sed 's/.*\([Cc]ommentary\).*/\1/gi'`
	if ( "${is_commentary}" != `printf "${episodes_title}==${episodes_filename}"` ) then
		printf "[skipped commentary track]\n\n" >> "${download_log}"
		printf "[skipped commentary track]\n\n"
		continue
	endif

	if ( "${?regex_match_titles}" == "1" ) then
		if ( "`echo ${episodes_title} | s/.*\(${regex_match_titles}\).*/\1/g'`" )= "${regex_match_titles}" ) continue;
	endif

	wget --quiet -O "./${episodes_title}.${extension}" "${episode}"
	if ( ! -e "./${episodes_title}.${extension}" ) then
		printf "[*epic fail* :(]\n\n" >> "${download_log}"
		printf "[*epic fail* :(]\n\n"
	else
		printf "[*w00t\!*, FTW\!]\n\n" >> "${download_log}"
		printf "[*w00t\!*, FTW\!]\n\n"
	endif
end

printf "*w00t\!*, I'm done; enjoy online media at its best!"

if ( ! ( "${?2}" == "1" && "${2}" == "--debug" ) ) rm './00-feed.xml' './00-titles.lst' './00-enclosures.lst'
